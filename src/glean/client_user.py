"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from glean import errors, models, utils
from glean._hooks import HookContext
from glean.types import OptionalNullable, UNSET
from glean.utils import get_security_from_env
from typing import Dict, List, Mapping, Optional, Union


class ClientUser(BaseSDK):
    def add_credential(
        self,
        *,
        x_scio_actas: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        datasource: Optional[str] = None,
        datasource_instance: Optional[str] = None,
        user: Optional[str] = None,
        token: Optional[str] = None,
        metadata: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Create credentials

        API to save a user's credentials. Used for Confluence restricted pages and Tableau per-user auth, for example

        :param x_scio_actas: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param datasource: the datasource the credential applies to
        :param datasource_instance: the datasource instance the credential applies to
        :param user: the user info (email or username for example) for the credential
        :param token: the token part of the credential (password, apiToken etc)
        :param metadata: any metadata associated with the user credential
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AddcredentialRequestRequest(
            x_scio_actas=x_scio_actas,
            x_glean_auth_type=x_glean_auth_type,
            add_credential_request=models.AddCredentialRequest(
                datasource=datasource,
                datasource_instance=datasource_instance,
                user=user,
                token=token,
                metadata=metadata,
            ),
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/addcredential",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.add_credential_request,
                False,
                False,
                "json",
                models.AddCredentialRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="addcredential",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def add_credential_async(
        self,
        *,
        x_scio_actas: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        datasource: Optional[str] = None,
        datasource_instance: Optional[str] = None,
        user: Optional[str] = None,
        token: Optional[str] = None,
        metadata: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Create credentials

        API to save a user's credentials. Used for Confluence restricted pages and Tableau per-user auth, for example

        :param x_scio_actas: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param datasource: the datasource the credential applies to
        :param datasource_instance: the datasource instance the credential applies to
        :param user: the user info (email or username for example) for the credential
        :param token: the token part of the credential (password, apiToken etc)
        :param metadata: any metadata associated with the user credential
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AddcredentialRequestRequest(
            x_scio_actas=x_scio_actas,
            x_glean_auth_type=x_glean_auth_type,
            add_credential_request=models.AddCredentialRequest(
                datasource=datasource,
                datasource_instance=datasource_instance,
                user=user,
                token=token,
                metadata=metadata,
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/addcredential",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.add_credential_request,
                False,
                False,
                "json",
                models.AddCredentialRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="addcredential",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def delete_query_history(
        self,
        *,
        x_scio_actas: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        queries: Optional[List[str]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DeleteQueryHistoryResponse:
        r"""Delete query history

        Remove one or more queries from a user's query history.

        :param x_scio_actas: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param queries: Queries to delete.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeletequeryhistoryRequestRequest(
            x_scio_actas=x_scio_actas,
            x_glean_auth_type=x_glean_auth_type,
            delete_query_history_request=models.DeleteQueryHistoryRequest(
                queries=queries,
            ),
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/deletequeryhistory",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.delete_query_history_request,
                False,
                False,
                "json",
                models.DeleteQueryHistoryRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="deletequeryhistory",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.DeleteQueryHistoryResponse
            )
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def delete_query_history_async(
        self,
        *,
        x_scio_actas: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        queries: Optional[List[str]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DeleteQueryHistoryResponse:
        r"""Delete query history

        Remove one or more queries from a user's query history.

        :param x_scio_actas: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param queries: Queries to delete.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeletequeryhistoryRequestRequest(
            x_scio_actas=x_scio_actas,
            x_glean_auth_type=x_glean_auth_type,
            delete_query_history_request=models.DeleteQueryHistoryRequest(
                queries=queries,
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/deletequeryhistory",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.delete_query_history_request,
                False,
                False,
                "json",
                models.DeleteQueryHistoryRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="deletequeryhistory",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.DeleteQueryHistoryResponse
            )
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def invite(
        self,
        *,
        x_scio_actas: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        channel: Optional[models.CommunicationChannel] = None,
        template: Optional[models.CommunicationTemplate] = None,
        recipients: Optional[
            Union[List[models.Person], List[models.PersonTypedDict]]
        ] = None,
        recipient_filters: Optional[
            Union[models.PeopleFilters, models.PeopleFiltersTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Send invitation

        Invites people to Glean via email or Slack

        :param x_scio_actas: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param channel:
        :param template: The type of email to send
        :param recipients: The people who should receive this invite
        :param recipient_filters:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.InviteRequestRequest(
            x_scio_actas=x_scio_actas,
            x_glean_auth_type=x_glean_auth_type,
            invite_request=models.InviteRequest(
                channel=channel,
                template=template,
                recipients=utils.get_pydantic_model(
                    recipients, Optional[List[models.Person]]
                ),
                recipient_filters=utils.get_pydantic_model(
                    recipient_filters, Optional[models.PeopleFilters]
                ),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/invite",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.invite_request, False, False, "json", models.InviteRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="invite",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def invite_async(
        self,
        *,
        x_scio_actas: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        channel: Optional[models.CommunicationChannel] = None,
        template: Optional[models.CommunicationTemplate] = None,
        recipients: Optional[
            Union[List[models.Person], List[models.PersonTypedDict]]
        ] = None,
        recipient_filters: Optional[
            Union[models.PeopleFilters, models.PeopleFiltersTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Send invitation

        Invites people to Glean via email or Slack

        :param x_scio_actas: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param channel:
        :param template: The type of email to send
        :param recipients: The people who should receive this invite
        :param recipient_filters:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.InviteRequestRequest(
            x_scio_actas=x_scio_actas,
            x_glean_auth_type=x_glean_auth_type,
            invite_request=models.InviteRequest(
                channel=channel,
                template=template,
                recipients=utils.get_pydantic_model(
                    recipients, Optional[List[models.Person]]
                ),
                recipient_filters=utils.get_pydantic_model(
                    recipient_filters, Optional[models.PeopleFilters]
                ),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/invite",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.invite_request, False, False, "json", models.InviteRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="invite",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_public_config(
        self,
        *,
        x_scio_actas: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        public_config_request: Optional[
            Union[models.PublicConfigRequest, models.PublicConfigRequestTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ClientConfig:
        r"""Read public client configuration

        Read configuration information such as the company name, logo and etc that is public and is not considered as PII.

        :param x_scio_actas: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param public_config_request: Public Config request
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.PublicconfigRequestRequest(
            x_scio_actas=x_scio_actas,
            x_glean_auth_type=x_glean_auth_type,
            public_config_request=utils.get_pydantic_model(
                public_config_request, Optional[models.PublicConfigRequest]
            ),
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/publicclientconfig",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.public_config_request,
                False,
                True,
                "json",
                Optional[models.PublicConfigRequest],
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="publicconfig",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.ClientConfig)
        if utils.match_response(http_res, ["401", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_public_config_async(
        self,
        *,
        x_scio_actas: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        public_config_request: Optional[
            Union[models.PublicConfigRequest, models.PublicConfigRequestTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ClientConfig:
        r"""Read public client configuration

        Read configuration information such as the company name, logo and etc that is public and is not considered as PII.

        :param x_scio_actas: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param public_config_request: Public Config request
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.PublicconfigRequestRequest(
            x_scio_actas=x_scio_actas,
            x_glean_auth_type=x_glean_auth_type,
            public_config_request=utils.get_pydantic_model(
                public_config_request, Optional[models.PublicConfigRequest]
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/publicclientconfig",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.public_config_request,
                False,
                True,
                "json",
                Optional[models.PublicConfigRequest],
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="publicconfig",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.ClientConfig)
        if utils.match_response(http_res, ["401", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def remove_credential(
        self,
        *,
        x_scio_actas: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        datasource: Optional[str] = None,
        datasource_instance: Optional[str] = None,
        user: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Delete credentials

        Delete a user's credentials. Used for Confluence restricted pages and Tableau per-user auth, for example

        :param x_scio_actas: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param datasource: the datasource the credential applies to
        :param datasource_instance: the datasource instance the credential applies to
        :param user: the user info (email or username for example) for the credential
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.RemovecredentialRequestRequest(
            x_scio_actas=x_scio_actas,
            x_glean_auth_type=x_glean_auth_type,
            remove_credential_request=models.RemoveCredentialRequest(
                datasource=datasource,
                datasource_instance=datasource_instance,
                user=user,
            ),
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/removecredential",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.remove_credential_request,
                False,
                False,
                "json",
                models.RemoveCredentialRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="removecredential",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def remove_credential_async(
        self,
        *,
        x_scio_actas: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        datasource: Optional[str] = None,
        datasource_instance: Optional[str] = None,
        user: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Delete credentials

        Delete a user's credentials. Used for Confluence restricted pages and Tableau per-user auth, for example

        :param x_scio_actas: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param datasource: the datasource the credential applies to
        :param datasource_instance: the datasource instance the credential applies to
        :param user: the user info (email or username for example) for the credential
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.RemovecredentialRequestRequest(
            x_scio_actas=x_scio_actas,
            x_glean_auth_type=x_glean_auth_type,
            remove_credential_request=models.RemoveCredentialRequest(
                datasource=datasource,
                datasource_instance=datasource_instance,
                user=user,
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/removecredential",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.remove_credential_request,
                False,
                False,
                "json",
                models.RemoveCredentialRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="removecredential",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def send_support_email(
        self,
        *,
        email_template: models.CommunicationTemplate,
        x_scio_actas: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        alert_data: Optional[Union[models.AlertData, models.AlertDataTypedDict]] = None,
        recipients: Optional[
            Union[List[models.Person], List[models.PersonTypedDict]]
        ] = None,
        cc_recipients: Optional[
            Union[List[models.Person], List[models.PersonTypedDict]]
        ] = None,
        recipient_filters: Optional[
            Union[models.PeopleFilters, models.PeopleFiltersTypedDict]
        ] = None,
        company_name: Optional[str] = None,
        datasource_instance: Optional[str] = None,
        senders: Optional[
            Union[List[models.Person], List[models.PersonTypedDict]]
        ] = None,
        web_app_url: Optional[str] = None,
        server_url_: Optional[str] = None,
        unsubscribe_url: Optional[str] = None,
        documents: Optional[
            Union[List[models.Document], List[models.DocumentTypedDict]]
        ] = None,
        reasons: Optional[List[str]] = None,
        blocks: Optional[
            Union[Dict[str, List[models.Block]], Dict[str, List[models.BlockTypedDict]]]
        ] = None,
        subjects: Optional[Dict[str, str]] = None,
        feedback_payload: Optional[
            Union[models.FeedbackPayload, models.FeedbackPayloadTypedDict]
        ] = None,
        chat_feedback_payload: Optional[
            Union[models.ChatFeedbackPayload, models.ChatFeedbackPayloadTypedDict]
        ] = None,
        dlp_report_data: Optional[
            Union[models.DlpReportData, models.DlpReportDataTypedDict]
        ] = None,
        onboarding_admin_invite_data: Optional[
            Union[
                models.OnboardingAdminInviteData,
                models.OnboardingAdminInviteDataTypedDict,
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Send support email

        Sends a support email based on a template to the Glean support team.

        :param email_template: The type of email to send
        :param x_scio_actas: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param alert_data: Admin alert related information that is used to construct the admin alert email
        :param recipients: The people to send emails to
        :param cc_recipients: The people to CC for each email
        :param recipient_filters:
        :param company_name: Name of the company.
        :param datasource_instance: The instance ID of the datasource (if any)
        :param senders: The people who triggered this email
        :param web_app_url: The URL of the client triggering the request, as received in the ClientConfig
        :param server_url: The URL of the QE instance the email request is processed by.
        :param unsubscribe_url: The URL to unsubscribe from emails.
        :param documents: The documents this email request refers to
        :param reasons: Reasons this email request was sent. Will be shown directly to end user.
        :param blocks: For building complex email UIs, we use a block structure that dictates what we create in the UI
        :param subjects: Mapping of recipientIds to the email subject they are to receive. Optional and only meant for templates with Sendgrid subject set to {{subject}}
        :param feedback_payload: Optional payload for feedback reporting.
        :param chat_feedback_payload: Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`.
        :param dlp_report_data: Dlp report metadata which is used to construct report email
        :param onboarding_admin_invite_data:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SupportEmailRequest(
            x_scio_actas=x_scio_actas,
            x_glean_auth_type=x_glean_auth_type,
            email_request=models.EmailRequest(
                email_template=email_template,
                alert_data=utils.get_pydantic_model(
                    alert_data, Optional[models.AlertData]
                ),
                recipients=utils.get_pydantic_model(
                    recipients, Optional[List[models.Person]]
                ),
                cc_recipients=utils.get_pydantic_model(
                    cc_recipients, Optional[List[models.Person]]
                ),
                recipient_filters=utils.get_pydantic_model(
                    recipient_filters, Optional[models.PeopleFilters]
                ),
                company_name=company_name,
                datasource_instance=datasource_instance,
                senders=utils.get_pydantic_model(
                    senders, Optional[List[models.Person]]
                ),
                web_app_url=web_app_url,
                server_url=server_url_,
                unsubscribe_url=unsubscribe_url,
                documents=utils.get_pydantic_model(
                    documents, Optional[List[models.Document]]
                ),
                reasons=reasons,
                blocks=utils.get_pydantic_model(
                    blocks, Optional[Dict[str, List[models.Block]]]
                ),
                subjects=subjects,
                feedback_payload=utils.get_pydantic_model(
                    feedback_payload, Optional[models.FeedbackPayload]
                ),
                chat_feedback_payload=utils.get_pydantic_model(
                    chat_feedback_payload, Optional[models.ChatFeedbackPayload]
                ),
                dlp_report_data=utils.get_pydantic_model(
                    dlp_report_data, Optional[models.DlpReportData]
                ),
                onboarding_admin_invite_data=utils.get_pydantic_model(
                    onboarding_admin_invite_data,
                    Optional[models.OnboardingAdminInviteData],
                ),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/support",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.email_request, False, False, "json", models.EmailRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="support_email",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def send_support_email_async(
        self,
        *,
        email_template: models.CommunicationTemplate,
        x_scio_actas: Optional[str] = None,
        x_glean_auth_type: Optional[str] = None,
        alert_data: Optional[Union[models.AlertData, models.AlertDataTypedDict]] = None,
        recipients: Optional[
            Union[List[models.Person], List[models.PersonTypedDict]]
        ] = None,
        cc_recipients: Optional[
            Union[List[models.Person], List[models.PersonTypedDict]]
        ] = None,
        recipient_filters: Optional[
            Union[models.PeopleFilters, models.PeopleFiltersTypedDict]
        ] = None,
        company_name: Optional[str] = None,
        datasource_instance: Optional[str] = None,
        senders: Optional[
            Union[List[models.Person], List[models.PersonTypedDict]]
        ] = None,
        web_app_url: Optional[str] = None,
        server_url_: Optional[str] = None,
        unsubscribe_url: Optional[str] = None,
        documents: Optional[
            Union[List[models.Document], List[models.DocumentTypedDict]]
        ] = None,
        reasons: Optional[List[str]] = None,
        blocks: Optional[
            Union[Dict[str, List[models.Block]], Dict[str, List[models.BlockTypedDict]]]
        ] = None,
        subjects: Optional[Dict[str, str]] = None,
        feedback_payload: Optional[
            Union[models.FeedbackPayload, models.FeedbackPayloadTypedDict]
        ] = None,
        chat_feedback_payload: Optional[
            Union[models.ChatFeedbackPayload, models.ChatFeedbackPayloadTypedDict]
        ] = None,
        dlp_report_data: Optional[
            Union[models.DlpReportData, models.DlpReportDataTypedDict]
        ] = None,
        onboarding_admin_invite_data: Optional[
            Union[
                models.OnboardingAdminInviteData,
                models.OnboardingAdminInviteDataTypedDict,
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Send support email

        Sends a support email based on a template to the Glean support team.

        :param email_template: The type of email to send
        :param x_scio_actas: Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
        :param x_glean_auth_type: Auth type being used to access the endpoint (should be non-empty only for global tokens).
        :param alert_data: Admin alert related information that is used to construct the admin alert email
        :param recipients: The people to send emails to
        :param cc_recipients: The people to CC for each email
        :param recipient_filters:
        :param company_name: Name of the company.
        :param datasource_instance: The instance ID of the datasource (if any)
        :param senders: The people who triggered this email
        :param web_app_url: The URL of the client triggering the request, as received in the ClientConfig
        :param server_url: The URL of the QE instance the email request is processed by.
        :param unsubscribe_url: The URL to unsubscribe from emails.
        :param documents: The documents this email request refers to
        :param reasons: Reasons this email request was sent. Will be shown directly to end user.
        :param blocks: For building complex email UIs, we use a block structure that dictates what we create in the UI
        :param subjects: Mapping of recipientIds to the email subject they are to receive. Optional and only meant for templates with Sendgrid subject set to {{subject}}
        :param feedback_payload: Optional payload for feedback reporting.
        :param chat_feedback_payload: Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`.
        :param dlp_report_data: Dlp report metadata which is used to construct report email
        :param onboarding_admin_invite_data:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SupportEmailRequest(
            x_scio_actas=x_scio_actas,
            x_glean_auth_type=x_glean_auth_type,
            email_request=models.EmailRequest(
                email_template=email_template,
                alert_data=utils.get_pydantic_model(
                    alert_data, Optional[models.AlertData]
                ),
                recipients=utils.get_pydantic_model(
                    recipients, Optional[List[models.Person]]
                ),
                cc_recipients=utils.get_pydantic_model(
                    cc_recipients, Optional[List[models.Person]]
                ),
                recipient_filters=utils.get_pydantic_model(
                    recipient_filters, Optional[models.PeopleFilters]
                ),
                company_name=company_name,
                datasource_instance=datasource_instance,
                senders=utils.get_pydantic_model(
                    senders, Optional[List[models.Person]]
                ),
                web_app_url=web_app_url,
                server_url=server_url_,
                unsubscribe_url=unsubscribe_url,
                documents=utils.get_pydantic_model(
                    documents, Optional[List[models.Document]]
                ),
                reasons=reasons,
                blocks=utils.get_pydantic_model(
                    blocks, Optional[Dict[str, List[models.Block]]]
                ),
                subjects=subjects,
                feedback_payload=utils.get_pydantic_model(
                    feedback_payload, Optional[models.FeedbackPayload]
                ),
                chat_feedback_payload=utils.get_pydantic_model(
                    chat_feedback_payload, Optional[models.ChatFeedbackPayload]
                ),
                dlp_report_data=utils.get_pydantic_model(
                    dlp_report_data, Optional[models.DlpReportData]
                ),
                onboarding_admin_invite_data=utils.get_pydantic_model(
                    onboarding_admin_invite_data,
                    Optional[models.OnboardingAdminInviteData],
                ),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/support",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.email_request, False, False, "json", models.EmailRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="support_email",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
