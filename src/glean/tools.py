"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from glean import errors, models, utils
from glean._hooks import HookContext
from glean.types import OptionalNullable, UNSET
from glean.utils import get_security_from_env
from typing import Dict, Mapping, Optional, Union


class Tools(BaseSDK):
    def execute_action(
        self,
        *,
        name: str,
        timezone_offset: Optional[int] = None,
        action_run_id: Optional[str] = None,
        action_instance_id: Optional[str] = None,
        parameters: Optional[
            Union[
                Dict[str, models.WriteActionParameter],
                Dict[str, models.WriteActionParameterTypedDict],
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ExecuteActionToolResponse:
        r"""Execute Action Tool

        Executes an Action tool with the specified parameters.

        :param name: The name of the tool.
        :param timezone_offset: The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
        :param action_run_id: Unique identifier for this actionRun execution event.
        :param action_instance_id: Unique identifier of an action instance.
        :param parameters: The parameters to be passed to the tool for action.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ExecuteactiontoolRequestRequest(
            timezone_offset=timezone_offset,
            execute_action_tool_request=models.ExecuteActionToolRequest(
                action_run_id=action_run_id,
                name=name,
                action_instance_id=action_instance_id,
                parameters=utils.get_pydantic_model(
                    parameters, Optional[Dict[str, models.WriteActionParameter]]
                ),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/executeactiontool",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.execute_action_tool_request,
                False,
                False,
                "json",
                models.ExecuteActionToolRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="executeactiontool",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.ExecuteActionToolResponse)
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def execute_action_async(
        self,
        *,
        name: str,
        timezone_offset: Optional[int] = None,
        action_run_id: Optional[str] = None,
        action_instance_id: Optional[str] = None,
        parameters: Optional[
            Union[
                Dict[str, models.WriteActionParameter],
                Dict[str, models.WriteActionParameterTypedDict],
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ExecuteActionToolResponse:
        r"""Execute Action Tool

        Executes an Action tool with the specified parameters.

        :param name: The name of the tool.
        :param timezone_offset: The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
        :param action_run_id: Unique identifier for this actionRun execution event.
        :param action_instance_id: Unique identifier of an action instance.
        :param parameters: The parameters to be passed to the tool for action.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ExecuteactiontoolRequestRequest(
            timezone_offset=timezone_offset,
            execute_action_tool_request=models.ExecuteActionToolRequest(
                action_run_id=action_run_id,
                name=name,
                action_instance_id=action_instance_id,
                parameters=utils.get_pydantic_model(
                    parameters, Optional[Dict[str, models.WriteActionParameter]]
                ),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/executeactiontool",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.execute_action_tool_request,
                False,
                False,
                "json",
                models.ExecuteActionToolRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="executeactiontool",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.ExecuteActionToolResponse)
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.GleanError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
