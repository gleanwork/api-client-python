"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .countinfo import CountInfo, CountInfoTypedDict
from .documentspec_union import DocumentSpecUnion, DocumentSpecUnionTypedDict
from glean.types import BaseModel
import pydantic
from typing import List, Optional, TYPE_CHECKING
from typing_extensions import Annotated, NotRequired, TypedDict

if TYPE_CHECKING:
    from .documentfacetanalytics import (
        DocumentFacetAnalytics,
        DocumentFacetAnalyticsTypedDict,
    )


class DocumentAnalyticsTypedDict(TypedDict):
    document_spec: NotRequired[DocumentSpecUnionTypedDict]
    visitor_count: NotRequired[CountInfoTypedDict]
    clicker_count: NotRequired[CountInfoTypedDict]
    user_impression_count: NotRequired[CountInfoTypedDict]
    visit_count: NotRequired[CountInfoTypedDict]
    facet_analytics: NotRequired[List["DocumentFacetAnalyticsTypedDict"]]


class DocumentAnalytics(BaseModel):
    document_spec: Annotated[
        Optional[DocumentSpecUnion], pydantic.Field(alias="documentSpec")
    ] = None

    visitor_count: Annotated[
        Optional[CountInfo], pydantic.Field(alias="visitorCount")
    ] = None

    clicker_count: Annotated[
        Optional[CountInfo], pydantic.Field(alias="clickerCount")
    ] = None

    user_impression_count: Annotated[
        Optional[CountInfo], pydantic.Field(alias="userImpressionCount")
    ] = None

    visit_count: Annotated[Optional[CountInfo], pydantic.Field(alias="visitCount")] = (
        None
    )

    facet_analytics: Annotated[
        Optional[List["DocumentFacetAnalytics"]], pydantic.Field(alias="facetAnalytics")
    ] = None
