"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .agentclientconfig import AgentClientConfig, AgentClientConfigTypedDict
from .agentmigrationstatuses import (
    AgentMigrationStatuses,
    AgentMigrationStatusesTypedDict,
)
from .fileuploadconfig import FileUploadConfig, FileUploadConfigTypedDict
from .websearchconfig import WebSearchConfig, WebSearchConfigTypedDict
from glean.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AssistantConfigTypedDict(TypedDict):
    r"""Configuration settings specific to Assistant features"""

    chat_banner_text: NotRequired[str]
    r"""Disclaimer message to be displayed as a banner on top of chat. This could be in markdown format with \"\n\" between each line."""
    chat_box_disclaimer: NotRequired[str]
    r"""Disclaimer message to be displayed below the chat box. This could be in markdown format."""
    chat_link_url_template: NotRequired[str]
    r"""The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat."""
    chat_starter_header: NotRequired[str]
    r"""Label for the chat header during initial state."""
    chat_starter_subheader: NotRequired[str]
    r"""Label for the chat subheader during initial state."""
    agent_client_configs: NotRequired[List[AgentClientConfigTypedDict]]
    redlisted_datasources: NotRequired[List[str]]
    r"""A list of datasources that are disabled in Chat"""
    greenlisted_datasource_instances: NotRequired[List[str]]
    r"""A list of datasources that are always visible in Chat"""
    gpt_agent_enabled: NotRequired[bool]
    r"""Whether the GPT agent (general mode) for Chat is enabled"""
    file_upload: NotRequired[FileUploadConfigTypedDict]
    r"""Configuration settings for the chat file upload feature"""
    chat_history_enabled: NotRequired[bool]
    r"""Whether the chat history for Chat is enabled for the deployment"""
    chat_guide_url: NotRequired[str]
    r"""Redirect URL for \"Chat guide\" in the default chat starter subheader"""
    prompts_enabled: NotRequired[bool]
    r"""Whether prompt templates feature are enabled for the deployment."""
    default_user_can_share_prompts: NotRequired[bool]
    r"""Whether a default user can share prompts to the prompt library."""
    default_user_can_share_agents: NotRequired[bool]
    r"""Whether a default user can share agents to the agent library."""
    file_upload_enabled: NotRequired[bool]
    r"""Whether file upload for Chat is enabled for the deployment"""
    web_search: NotRequired[WebSearchConfigTypedDict]
    r"""Configuration settings related to web search"""
    chat_bar_v3_enabled: NotRequired[bool]
    r"""Whether admin has enabled Chat Bar V3 for the deployment. This shall eventually go away when we launch Chat Bar V3 to all customers."""
    chat_bar_placeholder_text: NotRequired[str]
    r"""Placeholder text for the chat bar"""
    agent_migration_statuses: NotRequired[AgentMigrationStatusesTypedDict]


class AssistantConfig(BaseModel):
    r"""Configuration settings specific to Assistant features"""

    chat_banner_text: Annotated[
        Optional[str], pydantic.Field(alias="chatBannerText")
    ] = None
    r"""Disclaimer message to be displayed as a banner on top of chat. This could be in markdown format with \"\n\" between each line."""

    chat_box_disclaimer: Annotated[
        Optional[str], pydantic.Field(alias="chatBoxDisclaimer")
    ] = None
    r"""Disclaimer message to be displayed below the chat box. This could be in markdown format."""

    chat_link_url_template: Annotated[
        Optional[str], pydantic.Field(alias="chatLinkUrlTemplate")
    ] = None
    r"""The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat."""

    chat_starter_header: Annotated[
        Optional[str], pydantic.Field(alias="chatStarterHeader")
    ] = None
    r"""Label for the chat header during initial state."""

    chat_starter_subheader: Annotated[
        Optional[str], pydantic.Field(alias="chatStarterSubheader")
    ] = None
    r"""Label for the chat subheader during initial state."""

    agent_client_configs: Annotated[
        Optional[List[AgentClientConfig]], pydantic.Field(alias="agentClientConfigs")
    ] = None

    redlisted_datasources: Annotated[
        Optional[List[str]], pydantic.Field(alias="redlistedDatasources")
    ] = None
    r"""A list of datasources that are disabled in Chat"""

    greenlisted_datasource_instances: Annotated[
        Optional[List[str]], pydantic.Field(alias="greenlistedDatasourceInstances")
    ] = None
    r"""A list of datasources that are always visible in Chat"""

    gpt_agent_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="gptAgentEnabled")
    ] = None
    r"""Whether the GPT agent (general mode) for Chat is enabled"""

    file_upload: Annotated[
        Optional[FileUploadConfig], pydantic.Field(alias="fileUpload")
    ] = None
    r"""Configuration settings for the chat file upload feature"""

    chat_history_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="chatHistoryEnabled")
    ] = None
    r"""Whether the chat history for Chat is enabled for the deployment"""

    chat_guide_url: Annotated[Optional[str], pydantic.Field(alias="chatGuideUrl")] = (
        None
    )
    r"""Redirect URL for \"Chat guide\" in the default chat starter subheader"""

    prompts_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="promptsEnabled")
    ] = None
    r"""Whether prompt templates feature are enabled for the deployment."""

    default_user_can_share_prompts: Annotated[
        Optional[bool], pydantic.Field(alias="defaultUserCanSharePrompts")
    ] = None
    r"""Whether a default user can share prompts to the prompt library."""

    default_user_can_share_agents: Annotated[
        Optional[bool], pydantic.Field(alias="defaultUserCanShareAgents")
    ] = None
    r"""Whether a default user can share agents to the agent library."""

    file_upload_enabled: Annotated[
        Optional[bool],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.",
            alias="fileUploadEnabled",
        ),
    ] = None
    r"""Whether file upload for Chat is enabled for the deployment"""

    web_search: Annotated[
        Optional[WebSearchConfig], pydantic.Field(alias="webSearch")
    ] = None
    r"""Configuration settings related to web search"""

    chat_bar_v3_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="chatBarV3Enabled")
    ] = None
    r"""Whether admin has enabled Chat Bar V3 for the deployment. This shall eventually go away when we launch Chat Bar V3 to all customers."""

    chat_bar_placeholder_text: Annotated[
        Optional[str], pydantic.Field(alias="chatBarPlaceholderText")
    ] = None
    r"""Placeholder text for the chat bar"""

    agent_migration_statuses: Annotated[
        Optional[AgentMigrationStatuses], pydantic.Field(alias="agentMigrationStatuses")
    ] = None
