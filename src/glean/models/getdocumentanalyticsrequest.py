"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .documentspec_union import DocumentSpecUnion, DocumentSpecUnionTypedDict
from .period import Period, PeriodTypedDict
from glean.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetDocumentAnalyticsRequestTypedDict(TypedDict):
    document_specs: List[DocumentSpecUnionTypedDict]
    r"""The specification for the documents for which analytics will be retrieved."""
    day_range: PeriodTypedDict
    with_clicker_counts: NotRequired[bool]
    r"""Whether response should include click information or not. Default is to not include click information."""
    with_impression_counts: NotRequired[bool]
    r"""Whether response should include impression information or not. Default is to not include impression information."""
    with_facet_aggregations: NotRequired[bool]
    r"""Whether the results will include aggregate counts/info for facets like location, department, etc."""
    with_visit_counts: NotRequired[bool]
    r"""Whether response should include visit counts or not. Default is to return only visitor counts."""


class GetDocumentAnalyticsRequest(BaseModel):
    document_specs: Annotated[
        List[DocumentSpecUnion], pydantic.Field(alias="documentSpecs")
    ]
    r"""The specification for the documents for which analytics will be retrieved."""

    day_range: Annotated[Period, pydantic.Field(alias="dayRange")]

    with_clicker_counts: Annotated[
        Optional[bool], pydantic.Field(alias="withClickerCounts")
    ] = None
    r"""Whether response should include click information or not. Default is to not include click information."""

    with_impression_counts: Annotated[
        Optional[bool], pydantic.Field(alias="withImpressionCounts")
    ] = None
    r"""Whether response should include impression information or not. Default is to not include impression information."""

    with_facet_aggregations: Annotated[
        Optional[bool], pydantic.Field(alias="withFacetAggregations")
    ] = None
    r"""Whether the results will include aggregate counts/info for facets like location, department, etc."""

    with_visit_counts: Annotated[
        Optional[bool], pydantic.Field(alias="withVisitCounts")
    ] = None
    r"""Whether response should include visit counts or not. Default is to return only visitor counts."""
