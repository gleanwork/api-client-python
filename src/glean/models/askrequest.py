"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .askexperimentalmetadata import (
    AskExperimentalMetadata,
    AskExperimentalMetadataTypedDict,
)
from .chatrestrictionfilters import (
    ChatRestrictionFilters,
    ChatRestrictionFiltersTypedDict,
)
from .documentspec_union import DocumentSpecUnion, DocumentSpecUnionTypedDict
from .searchrequest import SearchRequest, SearchRequestTypedDict
from enum import Enum
from glean.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class Backend(str, Enum):
    r"""Which backend to use to fulfill the requests."""

    SEARCH = "SEARCH"
    CHAT = "CHAT"


class AskRequestTypedDict(TypedDict):
    search_request: SearchRequestTypedDict
    detect_only: NotRequired[bool]
    r"""Whether to apply only question detection and not answering."""
    ask_experimental_metadata: NotRequired[AskExperimentalMetadataTypedDict]
    excluded_document_specs: NotRequired[List[DocumentSpecUnionTypedDict]]
    r"""A list of Glean Document IDs to be excluded when retrieving documents. Note that, currently, it only supports exclusion of one Glean Documnet ID based spec. If multiple specifications are provided only the first Glean Document ID based spec is excluded and the remaining specs are ignored."""
    operators: NotRequired[str]
    r"""Search operators to append to the query"""
    backend: NotRequired[Backend]
    r"""Which backend to use to fulfill the requests."""
    chat_application_id: NotRequired[str]
    r"""The ID of the application this request originates from, used to determine the configuration of underlying chat processes when invoking the CHAT backend. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used."""
    inclusions: NotRequired[ChatRestrictionFiltersTypedDict]
    exclusions: NotRequired[ChatRestrictionFiltersTypedDict]


class AskRequest(BaseModel):
    search_request: Annotated[SearchRequest, pydantic.Field(alias="searchRequest")]

    detect_only: Annotated[Optional[bool], pydantic.Field(alias="detectOnly")] = None
    r"""Whether to apply only question detection and not answering."""

    ask_experimental_metadata: Annotated[
        Optional[AskExperimentalMetadata],
        pydantic.Field(alias="AskExperimentalMetadata"),
    ] = None

    excluded_document_specs: Annotated[
        Optional[List[DocumentSpecUnion]],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.",
            alias="excludedDocumentSpecs",
        ),
    ] = None
    r"""A list of Glean Document IDs to be excluded when retrieving documents. Note that, currently, it only supports exclusion of one Glean Documnet ID based spec. If multiple specifications are provided only the first Glean Document ID based spec is excluded and the remaining specs are ignored."""

    operators: Optional[str] = None
    r"""Search operators to append to the query"""

    backend: Optional[Backend] = None
    r"""Which backend to use to fulfill the requests."""

    chat_application_id: Annotated[
        Optional[str], pydantic.Field(alias="chatApplicationId")
    ] = None
    r"""The ID of the application this request originates from, used to determine the configuration of underlying chat processes when invoking the CHAT backend. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used."""

    inclusions: Optional[ChatRestrictionFilters] = None

    exclusions: Optional[ChatRestrictionFilters] = None
