"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .resolutionstep import ResolutionStep, ResolutionStepTypedDict
from datetime import datetime
from enum import Enum
from glean.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class BannerType(str, Enum):
    r"""Banner type to display for this alert"""

    ACTION_REQUIRED = "ACTION_REQUIRED"
    REVIEW_REQUIRED = "REVIEW_REQUIRED"


class AlertDataTypedDict(TypedDict):
    r"""Admin alert related information that is used to construct the admin alert email"""

    banner_type: NotRequired[BannerType]
    r"""Banner type to display for this alert"""
    banner_text: NotRequired[str]
    r"""Text to display for the alert banner"""
    alert_description: NotRequired[str]
    r"""Text for what happened section of an admin alert."""
    relevance_description: NotRequired[str]
    r"""Text for why this matters section of an admin alert."""
    resolution_steps_description: NotRequired[str]
    r"""Text for to do section before actual steps."""
    resolution_steps: NotRequired[List[ResolutionStepTypedDict]]
    r"""Steps to take to resolve an alert which are optionally mapped to a link for instructions (e.g. help doc)"""
    help_link: NotRequired[str]
    r"""Help link for the alert that the admin can reference"""
    name: NotRequired[str]
    r"""The name of the admin alert"""
    triggered_time: NotRequired[datetime]
    r"""The time that the alert was triggered"""
    project_name: NotRequired[str]
    r"""Human readable name of the project instance"""
    datasource: NotRequired[str]
    r"""Datasource that the alert is related to (possibly null)"""
    instance_display_name: NotRequired[str]
    r"""datasource instance's user set display name"""
    instance_name: NotRequired[str]
    r"""datasource instance's name e.g. confluence_0a0odwv"""
    email_subject_description: NotRequired[str]
    r"""custom text in subject line"""


class AlertData(BaseModel):
    r"""Admin alert related information that is used to construct the admin alert email"""

    banner_type: Annotated[Optional[BannerType], pydantic.Field(alias="bannerType")] = (
        None
    )
    r"""Banner type to display for this alert"""

    banner_text: Annotated[Optional[str], pydantic.Field(alias="bannerText")] = None
    r"""Text to display for the alert banner"""

    alert_description: Annotated[
        Optional[str], pydantic.Field(alias="alertDescription")
    ] = None
    r"""Text for what happened section of an admin alert."""

    relevance_description: Annotated[
        Optional[str], pydantic.Field(alias="relevanceDescription")
    ] = None
    r"""Text for why this matters section of an admin alert."""

    resolution_steps_description: Annotated[
        Optional[str], pydantic.Field(alias="resolutionStepsDescription")
    ] = None
    r"""Text for to do section before actual steps."""

    resolution_steps: Annotated[
        Optional[List[ResolutionStep]], pydantic.Field(alias="resolutionSteps")
    ] = None
    r"""Steps to take to resolve an alert which are optionally mapped to a link for instructions (e.g. help doc)"""

    help_link: Annotated[Optional[str], pydantic.Field(alias="helpLink")] = None
    r"""Help link for the alert that the admin can reference"""

    name: Optional[str] = None
    r"""The name of the admin alert"""

    triggered_time: Annotated[
        Optional[datetime], pydantic.Field(alias="triggeredTime")
    ] = None
    r"""The time that the alert was triggered"""

    project_name: Annotated[Optional[str], pydantic.Field(alias="projectName")] = None
    r"""Human readable name of the project instance"""

    datasource: Optional[str] = None
    r"""Datasource that the alert is related to (possibly null)"""

    instance_display_name: Annotated[
        Optional[str], pydantic.Field(alias="instanceDisplayName")
    ] = None
    r"""datasource instance's user set display name"""

    instance_name: Annotated[Optional[str], pydantic.Field(alias="instanceName")] = None
    r"""datasource instance's name e.g. confluence_0a0odwv"""

    email_subject_description: Annotated[
        Optional[str], pydantic.Field(alias="emailSubjectDescription")
    ] = None
    r"""custom text in subject line"""
