"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .alertdata import AlertData, AlertDataTypedDict
from .communicationtemplate import CommunicationTemplate
from .dlpreportdata import DlpReportData, DlpReportDataTypedDict
from .document import Document, DocumentTypedDict
from .feedbackchatexchange import FeedbackChatExchange, FeedbackChatExchangeTypedDict
from .onboardingadmininvitedata import (
    OnboardingAdminInviteData,
    OnboardingAdminInviteDataTypedDict,
)
from .peoplefilters import PeopleFilters, PeopleFiltersTypedDict
from .person import Person, PersonTypedDict
from glean.types import BaseModel
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class BlockTypedDict(TypedDict):
    pass


class Block(BaseModel):
    pass


class FeedbackPayloadTypedDict(TypedDict):
    r"""Optional payload for feedback reporting."""

    comments: NotRequired[str]
    r"""Additional freeform comments provided by the reporter."""
    custom_json: NotRequired[str]
    r"""Arbitrary email param payloads from 3P-customer widgets. Prefer the structured fields when possible."""
    image_urls: NotRequired[List[str]]
    r"""Images uploaded by the user when submitting feedback"""
    issue_type: NotRequired[str]
    r"""The type of issue being reported, e.g. RESULT_MISSING or OTHER for search feedback."""
    query: NotRequired[str]
    r"""The query the reporter tried when feedback was sent."""
    tracking_token: NotRequired[str]
    r"""The tracking token of the feedback that admins can provide Glean Support to debug"""
    url: NotRequired[str]
    r"""The URL the reporter was on when feedback was sent."""
    rating_key: NotRequired[str]
    r"""The label of the rating that was selected when feedback was sent."""


class FeedbackPayload(BaseModel):
    r"""Optional payload for feedback reporting."""

    comments: Optional[str] = None
    r"""Additional freeform comments provided by the reporter."""

    custom_json: Annotated[Optional[str], pydantic.Field(alias="customJson")] = None
    r"""Arbitrary email param payloads from 3P-customer widgets. Prefer the structured fields when possible."""

    image_urls: Annotated[Optional[List[str]], pydantic.Field(alias="imageUrls")] = None
    r"""Images uploaded by the user when submitting feedback"""

    issue_type: Annotated[Optional[str], pydantic.Field(alias="issueType")] = None
    r"""The type of issue being reported, e.g. RESULT_MISSING or OTHER for search feedback."""

    query: Optional[str] = None
    r"""The query the reporter tried when feedback was sent."""

    tracking_token: Annotated[Optional[str], pydantic.Field(alias="trackingToken")] = (
        None
    )
    r"""The tracking token of the feedback that admins can provide Glean Support to debug"""

    url: Optional[str] = None
    r"""The URL the reporter was on when feedback was sent."""

    rating_key: Annotated[Optional[str], pydantic.Field(alias="ratingKey")] = None
    r"""The label of the rating that was selected when feedback was sent."""


class ChatFeedbackPayloadTypedDict(TypedDict):
    r"""Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`."""

    rating: NotRequired[str]
    r"""Rating given to the conversation (currently either \"upvoted\" or \"downvoted\")."""
    comments: NotRequired[str]
    r"""Additional freeform comments provided by the reporter."""
    previous_messages: NotRequired[List[str]]
    r"""Previous messages in this conversation."""
    chat_transcript: NotRequired[List[FeedbackChatExchangeTypedDict]]


class ChatFeedbackPayload(BaseModel):
    r"""Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`."""

    rating: Optional[str] = None
    r"""Rating given to the conversation (currently either \"upvoted\" or \"downvoted\")."""

    comments: Optional[str] = None
    r"""Additional freeform comments provided by the reporter."""

    previous_messages: Annotated[
        Optional[List[str]], pydantic.Field(alias="previousMessages")
    ] = None
    r"""Previous messages in this conversation."""

    chat_transcript: Annotated[
        Optional[List[FeedbackChatExchange]], pydantic.Field(alias="chatTranscript")
    ] = None


class EmailRequestTypedDict(TypedDict):
    r"""A request to send email[s] to the specified users"""

    email_template: CommunicationTemplate
    r"""The type of email to send"""
    alert_data: NotRequired[AlertDataTypedDict]
    r"""Admin alert related information that is used to construct the admin alert email"""
    recipients: NotRequired[List[PersonTypedDict]]
    r"""The people to send emails to"""
    cc_recipients: NotRequired[List[PersonTypedDict]]
    r"""The people to CC for each email"""
    recipient_filters: NotRequired[PeopleFiltersTypedDict]
    company_name: NotRequired[str]
    r"""Name of the company."""
    datasource_instance: NotRequired[str]
    r"""The instance ID of the datasource (if any)"""
    senders: NotRequired[List[PersonTypedDict]]
    r"""The people who triggered this email"""
    web_app_url: NotRequired[str]
    r"""The URL of the client triggering the request, as received in the ClientConfig"""
    server_url: NotRequired[str]
    r"""The URL of the QE instance the email request is processed by."""
    unsubscribe_url: NotRequired[str]
    r"""The URL to unsubscribe from emails."""
    documents: NotRequired[List[DocumentTypedDict]]
    r"""The documents this email request refers to"""
    reasons: NotRequired[List[str]]
    r"""Reasons this email request was sent. Will be shown directly to end user."""
    blocks: NotRequired[Dict[str, List[BlockTypedDict]]]
    r"""For building complex email UIs, we use a block structure that dictates what we create in the UI"""
    subjects: NotRequired[Dict[str, str]]
    r"""Mapping of recipientIds to the email subject they are to receive. Optional and only meant for templates with Sendgrid subject set to {{subject}}"""
    feedback_payload: NotRequired[FeedbackPayloadTypedDict]
    r"""Optional payload for feedback reporting."""
    chat_feedback_payload: NotRequired[ChatFeedbackPayloadTypedDict]
    r"""Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`."""
    dlp_report_data: NotRequired[DlpReportDataTypedDict]
    r"""Dlp report metadata which is used to construct report email"""
    onboarding_admin_invite_data: NotRequired[OnboardingAdminInviteDataTypedDict]


class EmailRequest(BaseModel):
    r"""A request to send email[s] to the specified users"""

    email_template: Annotated[
        CommunicationTemplate, pydantic.Field(alias="emailTemplate")
    ]
    r"""The type of email to send"""

    alert_data: Annotated[Optional[AlertData], pydantic.Field(alias="alertData")] = None
    r"""Admin alert related information that is used to construct the admin alert email"""

    recipients: Optional[List[Person]] = None
    r"""The people to send emails to"""

    cc_recipients: Annotated[
        Optional[List[Person]], pydantic.Field(alias="ccRecipients")
    ] = None
    r"""The people to CC for each email"""

    recipient_filters: Annotated[
        Optional[PeopleFilters], pydantic.Field(alias="recipientFilters")
    ] = None

    company_name: Annotated[Optional[str], pydantic.Field(alias="companyName")] = None
    r"""Name of the company."""

    datasource_instance: Annotated[
        Optional[str], pydantic.Field(alias="datasourceInstance")
    ] = None
    r"""The instance ID of the datasource (if any)"""

    senders: Optional[List[Person]] = None
    r"""The people who triggered this email"""

    web_app_url: Annotated[Optional[str], pydantic.Field(alias="webAppUrl")] = None
    r"""The URL of the client triggering the request, as received in the ClientConfig"""

    server_url: Annotated[Optional[str], pydantic.Field(alias="serverUrl")] = None
    r"""The URL of the QE instance the email request is processed by."""

    unsubscribe_url: Annotated[
        Optional[str], pydantic.Field(alias="unsubscribeUrl")
    ] = None
    r"""The URL to unsubscribe from emails."""

    documents: Optional[List[Document]] = None
    r"""The documents this email request refers to"""

    reasons: Optional[List[str]] = None
    r"""Reasons this email request was sent. Will be shown directly to end user."""

    blocks: Optional[Dict[str, List[Block]]] = None
    r"""For building complex email UIs, we use a block structure that dictates what we create in the UI"""

    subjects: Optional[Dict[str, str]] = None
    r"""Mapping of recipientIds to the email subject they are to receive. Optional and only meant for templates with Sendgrid subject set to {{subject}}"""

    feedback_payload: Annotated[
        Optional[FeedbackPayload], pydantic.Field(alias="feedbackPayload")
    ] = None
    r"""Optional payload for feedback reporting."""

    chat_feedback_payload: Annotated[
        Optional[ChatFeedbackPayload], pydantic.Field(alias="chatFeedbackPayload")
    ] = None
    r"""Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`."""

    dlp_report_data: Annotated[
        Optional[DlpReportData], pydantic.Field(alias="dlpReportData")
    ] = None
    r"""Dlp report metadata which is used to construct report email"""

    onboarding_admin_invite_data: Annotated[
        Optional[OnboardingAdminInviteData],
        pydantic.Field(alias="onboardingAdminInviteData"),
    ] = None
