"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .assistantconfig import AssistantConfig, AssistantConfigTypedDict
from .branding import Branding, BrandingTypedDict
from .feedbackcustomizations import (
    FeedbackCustomizations,
    FeedbackCustomizationsTypedDict,
)
from .productterms import ProductTerms, ProductTermsTypedDict
from .searchclientconfig import SearchClientConfig, SearchClientConfigTypedDict
from .shortcutsconfig import ShortcutsConfig, ShortcutsConfigTypedDict
from .themes import Themes, ThemesTypedDict
from .toolsconfig import ToolsConfig, ToolsConfigTypedDict
from .useroutreachconfig import UserOutreachConfig, UserOutreachConfigTypedDict
from enum import Enum
from glean.types import BaseModel
import pydantic
from typing import Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class BrandingsTypedDict(TypedDict):
    r"""Branding customizations applicable to the current user, such as custom company logos and background images for light and dark mode or company-specific product terminology."""

    light: NotRequired[BrandingTypedDict]
    r"""A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos."""
    dark: NotRequired[BrandingTypedDict]
    r"""A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos."""
    product_terms: NotRequired[ProductTermsTypedDict]
    r"""Mapping of product terms to the term's description. These product terms should match their counterpart in productTerms.json"""


class Brandings(BaseModel):
    r"""Branding customizations applicable to the current user, such as custom company logos and background images for light and dark mode or company-specific product terminology."""

    light: Optional[Branding] = None
    r"""A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos."""

    dark: Optional[Branding] = None
    r"""A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos."""

    product_terms: Annotated[
        Optional[ProductTerms], pydantic.Field(alias="productTerms")
    ] = None
    r"""Mapping of product terms to the term's description. These product terms should match their counterpart in productTerms.json"""


class SsoCompanyProvider(str, Enum):
    r"""SSO provider used by the company"""

    GSUITE = "gsuite"
    IAP = "iap"
    OKTA = "okta"
    OKTA_SAML = "okta_saml"
    PING = "ping"
    AZURE = "azure"
    ONELOGIN = "onelogin"
    ONELOGIN_SAML = "onelogin_saml"


class ClientConfigTypedDict(TypedDict):
    r"""Configuration settings for a specific client deployment that are not related to any particular datasource"""

    assistant: NotRequired[AssistantConfigTypedDict]
    r"""Configuration settings specific to Assistant features"""
    tools: NotRequired[ToolsConfigTypedDict]
    r"""Configuration settings related to Tools."""
    shortcuts: NotRequired[ShortcutsConfigTypedDict]
    r"""Configuration settings related to Shortcuts"""
    search: NotRequired[SearchClientConfigTypedDict]
    r"""Configuration settings related to Search"""
    feed_people_celebrations_enabled: NotRequired[bool]
    r"""Whether people celebrations is enabled or not for the instance"""
    feed_suggested_enabled: NotRequired[bool]
    r"""Whether the suggested feed is enabled"""
    feed_trending_enabled: NotRequired[bool]
    r"""Whether the trending feed is enabled"""
    feed_recents_enabled: NotRequired[bool]
    r"""Whether the recents feed is enabled"""
    feed_mentions_enabled: NotRequired[bool]
    r"""Whether the mentions feed is enabled"""
    gpt_agent_enabled: NotRequired[bool]
    r"""Whether the GPT agent for Chat is enabled"""
    chat_history_enabled: NotRequired[bool]
    r"""Whether the chat history for Chat is enabled"""
    bool_values: NotRequired[Dict[str, bool]]
    r"""A map of {string, boolean} pairs representing flags that globally guard conditional features. Omitted flags mean the client should use its default state."""
    integer_values: NotRequired[Dict[str, int]]
    r"""A map of {string, integer} pairs for client consumption."""
    company_display_name: NotRequired[str]
    r"""The user-facing name of the company owning the deployment"""
    custom_serp_markdown: NotRequired[str]
    r"""A markdown string to be displayed on the search results page. Useful for outlinks to help pages."""
    onboarding_query: NotRequired[str]
    r"""A demonstrative query to show during new user onboarding"""
    is_org_chart_link_visible: NotRequired[bool]
    r"""Determines whether the org chart link in the Directory panel is visible to all users."""
    is_org_chart_accessible: NotRequired[bool]
    r"""Determines whether the org chart is accessible to all users, regardless of link visibility. Org chart can be accessible even if the org chart link in Directory is not visible."""
    is_people_setup: NotRequired[bool]
    r"""Whether or not people data has been set up."""
    is_pilot_mode: NotRequired[bool]
    r"""Whether or not the deployment is in pilot mode."""
    web_app_url: NotRequired[str]
    r"""URL the company uses to access the web app"""
    user_outreach: NotRequired[UserOutreachConfigTypedDict]
    search_link_url_template: NotRequired[str]
    r"""The URL to use for outbound links to Glean Search. Defaults to {webAppUrl}/search?q=%s."""
    chat_link_url_template: NotRequired[str]
    r"""The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat."""
    themes: NotRequired[ThemesTypedDict]
    r"""A set of Theme objects to make available to the user based on their chosen preference. If a theme variant is not supplied, the default theme will be used."""
    brandings: NotRequired[BrandingsTypedDict]
    r"""Branding customizations applicable to the current user, such as custom company logos and background images for light and dark mode or company-specific product terminology."""
    greeting_format: NotRequired[str]
    r"""Describes how to format the web app greeting. Possible format options include \%t - timely greeting \%n - the user's first name"""
    task_see_all_label: NotRequired[str]
    r"""Label for the external link at the end of the Task card in order to guide user to the source."""
    task_see_all_link: NotRequired[str]
    r"""Link used in conjunction with taskSeeAllLabel to redirect user to the task's source."""
    search_placeholder: NotRequired[str]
    r"""Custom autocomplete box placeholder to replace rotating prompts. Deprecated for `search.placeholder`"""
    shortcuts_prefix: NotRequired[str]
    r"""Company-wide custom prefix for Go Links."""
    sso_company_provider: NotRequired[SsoCompanyProvider]
    r"""SSO provider used by the company"""
    show_pipelines_setup_banner: NotRequired[bool]
    r"""whether to show the running ML pipelines banner"""
    feedback_customizations: NotRequired[FeedbackCustomizationsTypedDict]


class ClientConfig(BaseModel):
    r"""Configuration settings for a specific client deployment that are not related to any particular datasource"""

    assistant: Optional[AssistantConfig] = None
    r"""Configuration settings specific to Assistant features"""

    tools: Annotated[
        Optional[ToolsConfig],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = None
    r"""Configuration settings related to Tools."""

    shortcuts: Optional[ShortcutsConfig] = None
    r"""Configuration settings related to Shortcuts"""

    search: Optional[SearchClientConfig] = None
    r"""Configuration settings related to Search"""

    feed_people_celebrations_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="feedPeopleCelebrationsEnabled")
    ] = None
    r"""Whether people celebrations is enabled or not for the instance"""

    feed_suggested_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="feedSuggestedEnabled")
    ] = None
    r"""Whether the suggested feed is enabled"""

    feed_trending_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="feedTrendingEnabled")
    ] = None
    r"""Whether the trending feed is enabled"""

    feed_recents_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="feedRecentsEnabled")
    ] = None
    r"""Whether the recents feed is enabled"""

    feed_mentions_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="feedMentionsEnabled")
    ] = None
    r"""Whether the mentions feed is enabled"""

    gpt_agent_enabled: Annotated[
        Optional[bool],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.",
            alias="gptAgentEnabled",
        ),
    ] = None
    r"""Whether the GPT agent for Chat is enabled"""

    chat_history_enabled: Annotated[
        Optional[bool],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.",
            alias="chatHistoryEnabled",
        ),
    ] = None
    r"""Whether the chat history for Chat is enabled"""

    bool_values: Annotated[
        Optional[Dict[str, bool]], pydantic.Field(alias="boolValues")
    ] = None
    r"""A map of {string, boolean} pairs representing flags that globally guard conditional features. Omitted flags mean the client should use its default state."""

    integer_values: Annotated[
        Optional[Dict[str, int]], pydantic.Field(alias="integerValues")
    ] = None
    r"""A map of {string, integer} pairs for client consumption."""

    company_display_name: Annotated[
        Optional[str], pydantic.Field(alias="companyDisplayName")
    ] = None
    r"""The user-facing name of the company owning the deployment"""

    custom_serp_markdown: Annotated[
        Optional[str], pydantic.Field(alias="customSerpMarkdown")
    ] = None
    r"""A markdown string to be displayed on the search results page. Useful for outlinks to help pages."""

    onboarding_query: Annotated[
        Optional[str], pydantic.Field(alias="onboardingQuery")
    ] = None
    r"""A demonstrative query to show during new user onboarding"""

    is_org_chart_link_visible: Annotated[
        Optional[bool], pydantic.Field(alias="isOrgChartLinkVisible")
    ] = None
    r"""Determines whether the org chart link in the Directory panel is visible to all users."""

    is_org_chart_accessible: Annotated[
        Optional[bool], pydantic.Field(alias="isOrgChartAccessible")
    ] = None
    r"""Determines whether the org chart is accessible to all users, regardless of link visibility. Org chart can be accessible even if the org chart link in Directory is not visible."""

    is_people_setup: Annotated[
        Optional[bool], pydantic.Field(alias="isPeopleSetup")
    ] = None
    r"""Whether or not people data has been set up."""

    is_pilot_mode: Annotated[Optional[bool], pydantic.Field(alias="isPilotMode")] = None
    r"""Whether or not the deployment is in pilot mode."""

    web_app_url: Annotated[Optional[str], pydantic.Field(alias="webAppUrl")] = None
    r"""URL the company uses to access the web app"""

    user_outreach: Annotated[
        Optional[UserOutreachConfig], pydantic.Field(alias="userOutreach")
    ] = None

    search_link_url_template: Annotated[
        Optional[str], pydantic.Field(alias="searchLinkUrlTemplate")
    ] = None
    r"""The URL to use for outbound links to Glean Search. Defaults to {webAppUrl}/search?q=%s."""

    chat_link_url_template: Annotated[
        Optional[str],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.",
            alias="chatLinkUrlTemplate",
        ),
    ] = None
    r"""The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat."""

    themes: Optional[Themes] = None
    r"""A set of Theme objects to make available to the user based on their chosen preference. If a theme variant is not supplied, the default theme will be used."""

    brandings: Optional[Brandings] = None
    r"""Branding customizations applicable to the current user, such as custom company logos and background images for light and dark mode or company-specific product terminology."""

    greeting_format: Annotated[
        Optional[str], pydantic.Field(alias="greetingFormat")
    ] = None
    r"""Describes how to format the web app greeting. Possible format options include \%t - timely greeting \%n - the user's first name"""

    task_see_all_label: Annotated[
        Optional[str], pydantic.Field(alias="taskSeeAllLabel")
    ] = None
    r"""Label for the external link at the end of the Task card in order to guide user to the source."""

    task_see_all_link: Annotated[
        Optional[str], pydantic.Field(alias="taskSeeAllLink")
    ] = None
    r"""Link used in conjunction with taskSeeAllLabel to redirect user to the task's source."""

    search_placeholder: Annotated[
        Optional[str],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.",
            alias="searchPlaceholder",
        ),
    ] = None
    r"""Custom autocomplete box placeholder to replace rotating prompts. Deprecated for `search.placeholder`"""

    shortcuts_prefix: Annotated[
        Optional[str],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.",
            alias="shortcutsPrefix",
        ),
    ] = None
    r"""Company-wide custom prefix for Go Links."""

    sso_company_provider: Annotated[
        Optional[SsoCompanyProvider], pydantic.Field(alias="ssoCompanyProvider")
    ] = None
    r"""SSO provider used by the company"""

    show_pipelines_setup_banner: Annotated[
        Optional[bool], pydantic.Field(alias="showPipelinesSetupBanner")
    ] = None
    r"""whether to show the running ML pipelines banner"""

    feedback_customizations: Annotated[
        Optional[FeedbackCustomizations], pydantic.Field(alias="feedbackCustomizations")
    ] = None
