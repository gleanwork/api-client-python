"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .gleansearchinclusions import GleanSearchInclusions, GleanSearchInclusionsTypedDict
from glean.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GleanSearchConfigTypedDict(TypedDict):
    r"""Configuration for the Glean Search action."""

    num_results: NotRequired[int]
    r"""Number of results to be returned."""
    enable_full_document_snippets: NotRequired[bool]
    r"""When enabled, entire document snippets will be used."""
    inclusions: NotRequired[GleanSearchInclusionsTypedDict]
    r"""Inclusion filters to configure the content source for a search tool in the agent. If empty, all content sources are included.

    """


class GleanSearchConfig(BaseModel):
    r"""Configuration for the Glean Search action."""

    num_results: Annotated[Optional[int], pydantic.Field(alias="numResults")] = None
    r"""Number of results to be returned."""

    enable_full_document_snippets: Annotated[
        Optional[bool], pydantic.Field(alias="enableFullDocumentSnippets")
    ] = None
    r"""When enabled, entire document snippets will be used."""

    inclusions: Optional[GleanSearchInclusions] = None
    r"""Inclusion filters to configure the content source for a search tool in the agent. If empty, all content sources are included.

    """
