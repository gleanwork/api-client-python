"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .documentspec_union import DocumentSpecUnion, DocumentSpecUnionTypedDict
from .facetfilter import FacetFilter, FacetFilterTypedDict
from .userrolespecification import UserRoleSpecification, UserRoleSpecificationTypedDict
from enum import Enum
from glean.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AnswerMutablePropertiesSourceType(str, Enum):
    DOCUMENT = "DOCUMENT"
    ASSISTANT = "ASSISTANT"


class AnswerMutablePropertiesTypedDict(TypedDict):
    question: NotRequired[str]
    question_variations: NotRequired[List[str]]
    r"""Additional ways of phrasing this question."""
    body_text: NotRequired[str]
    r"""The plain text answer to the question."""
    board_id: NotRequired[int]
    r"""The parent board ID of this Answer, or 0 if it's a floating Answer."""
    audience_filters: NotRequired[List[FacetFilterTypedDict]]
    r"""Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search."""
    added_roles: NotRequired[List[UserRoleSpecificationTypedDict]]
    r"""A list of user roles for the answer added by the owner."""
    removed_roles: NotRequired[List[UserRoleSpecificationTypedDict]]
    r"""A list of user roles for the answer removed by the owner."""
    roles: NotRequired[List[UserRoleSpecificationTypedDict]]
    r"""A list of roles for this answer explicitly granted by an owner, editor, or admin."""
    source_document_spec: NotRequired[DocumentSpecUnionTypedDict]
    source_type: NotRequired[AnswerMutablePropertiesSourceType]


class AnswerMutableProperties(BaseModel):
    question: Optional[str] = None

    question_variations: Annotated[
        Optional[List[str]], pydantic.Field(alias="questionVariations")
    ] = None
    r"""Additional ways of phrasing this question."""

    body_text: Annotated[Optional[str], pydantic.Field(alias="bodyText")] = None
    r"""The plain text answer to the question."""

    board_id: Annotated[Optional[int], pydantic.Field(alias="boardId")] = None
    r"""The parent board ID of this Answer, or 0 if it's a floating Answer."""

    audience_filters: Annotated[
        Optional[List[FacetFilter]], pydantic.Field(alias="audienceFilters")
    ] = None
    r"""Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search."""

    added_roles: Annotated[
        Optional[List[UserRoleSpecification]], pydantic.Field(alias="addedRoles")
    ] = None
    r"""A list of user roles for the answer added by the owner."""

    removed_roles: Annotated[
        Optional[List[UserRoleSpecification]], pydantic.Field(alias="removedRoles")
    ] = None
    r"""A list of user roles for the answer removed by the owner."""

    roles: Optional[List[UserRoleSpecification]] = None
    r"""A list of roles for this answer explicitly granted by an owner, editor, or admin."""

    source_document_spec: Annotated[
        Optional[DocumentSpecUnion], pydantic.Field(alias="sourceDocumentSpec")
    ] = None

    source_type: Annotated[
        Optional[AnswerMutablePropertiesSourceType], pydantic.Field(alias="sourceType")
    ] = None
