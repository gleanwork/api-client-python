"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .workflowslackconfig import WorkflowSlackConfig, WorkflowSlackConfigTypedDict
from glean.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PromptTypedDict(TypedDict):
    template: NotRequired[str]
    r"""Template string of the prompt"""
    label: NotRequired[str]
    r"""Label for the the prompt"""


class Prompt(BaseModel):
    template: Optional[str] = None
    r"""Template string of the prompt"""

    label: Optional[str] = None
    r"""Label for the the prompt"""


class WorkflowTriggerChatMessageConfigTypedDict(TypedDict):
    r"""Trigger configuration for a chat message sent by a user."""

    prompts: NotRequired[List[PromptTypedDict]]
    r"""Simpler prompts for ChatMessage triggers, i.e. conversational starters"""
    slack_config: NotRequired[WorkflowSlackConfigTypedDict]
    r"""Configuration for the Agent's behaviour in Slack"""


class WorkflowTriggerChatMessageConfig(BaseModel):
    r"""Trigger configuration for a chat message sent by a user."""

    prompts: Optional[List[Prompt]] = None
    r"""Simpler prompts for ChatMessage triggers, i.e. conversational starters"""

    slack_config: Annotated[
        Optional[WorkflowSlackConfig], pydantic.Field(alias="slackConfig")
    ] = None
    r"""Configuration for the Agent's behaviour in Slack"""
