"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .displayablelistconfig import DisplayableListConfig, DisplayableListConfigTypedDict
from enum import Enum
from glean.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class DisplayableListSource(str, Enum):
    r"""The type of data that backs this displayable list"""

    SAVED_SEARCH = "SAVED_SEARCH"
    COLLECTION = "COLLECTION"


class DisplayableListTypedDict(TypedDict):
    r"""All configurations for a list that can be displayed."""

    source: NotRequired[DisplayableListSource]
    r"""The type of data that backs this displayable list"""
    id: NotRequired[int]
    r"""Unique identifier of this list. Unique amongst only DisplayableLists, not unique amongst other types of UGC."""
    source_id: NotRequired[str]
    r"""Unstructured identifier for the source to render (ID, URL, query)."""
    config: NotRequired[DisplayableListConfigTypedDict]
    r"""UI specific configurations for a displayable list"""


class DisplayableList(BaseModel):
    r"""All configurations for a list that can be displayed."""

    source: Optional[DisplayableListSource] = None
    r"""The type of data that backs this displayable list"""

    id: Optional[int] = None
    r"""Unique identifier of this list. Unique amongst only DisplayableLists, not unique amongst other types of UGC."""

    source_id: Annotated[Optional[str], pydantic.Field(alias="sourceId")] = None
    r"""Unstructured identifier for the source to render (ID, URL, query)."""

    config: Optional[DisplayableListConfig] = None
    r"""UI specific configurations for a displayable list"""
