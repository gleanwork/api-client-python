"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from glean.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PublicConfigRequestTypedDict(TypedDict):
    r"""Will only send back publicly available config and will ignore other keys"""

    theme_keys: NotRequired[List[str]]
    r"""A list of theme keys to include in the response."""
    bool_keys: NotRequired[List[str]]
    r"""A list of boolean flag keys to include in the response."""
    integer_keys: NotRequired[List[str]]
    r"""A list of integer flag keys to include in the response."""


class PublicConfigRequest(BaseModel):
    r"""Will only send back publicly available config and will ignore other keys"""

    theme_keys: Annotated[Optional[List[str]], pydantic.Field(alias="themeKeys")] = None
    r"""A list of theme keys to include in the response."""

    bool_keys: Annotated[Optional[List[str]], pydantic.Field(alias="boolKeys")] = None
    r"""A list of boolean flag keys to include in the response."""

    integer_keys: Annotated[
        Optional[List[str]], pydantic.Field(alias="integerKeys")
    ] = None
    r"""A list of integer flag keys to include in the response."""
