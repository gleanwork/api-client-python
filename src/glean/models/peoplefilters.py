"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .facetfilter import FacetFilter, FacetFilterTypedDict
from glean.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PeopleFiltersTypedDict(TypedDict):
    filter_: NotRequired[List[FacetFilterTypedDict]]
    r"""Facets used for filtering people search"""
    query: NotRequired[str]
    r"""A query string to search for people that each person in the response must conform to. An empty query does not filter any people."""


class PeopleFilters(BaseModel):
    filter_: Annotated[Optional[List[FacetFilter]], pydantic.Field(alias="filter")] = (
        None
    )
    r"""Facets used for filtering people search"""

    query: Optional[str] = None
    r"""A query string to search for people that each person in the response must conform to. An empty query does not filter any people."""
