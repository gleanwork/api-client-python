"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .imagetype import ImageType
from glean.types import BaseModel
from glean.utils import FieldMetadata, HeaderMetadata, QueryParamMetadata
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ImagesRequestTypedDict(TypedDict):
    x_scio_actas: NotRequired[str]
    r"""Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens)."""
    x_glean_auth_type: NotRequired[str]
    r"""Auth type being used to access the endpoint (should be non-empty only for global tokens)."""
    key: NotRequired[str]
    r"""Primary key for the image being asked. The key is returned by the API when an image is uploaded. If key is used, other parameters should not be used."""
    type: NotRequired[ImageType]
    r"""The type of image requested. Supported values are listed in ImageMetadata.type enum."""
    id: NotRequired[str]
    r"""ID, if a specific entity/type is requested. The id may have different meaning for each type. for user, it is user id, for UGC, it is the id of the content, and so on."""
    ds: NotRequired[str]
    r"""A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some."""
    cid: NotRequired[str]
    r"""Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty."""


class ImagesRequest(BaseModel):
    x_scio_actas: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Scio-Actas"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens)."""

    x_glean_auth_type: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Glean-Auth-Type"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Auth type being used to access the endpoint (should be non-empty only for global tokens)."""

    key: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Primary key for the image being asked. The key is returned by the API when an image is uploaded. If key is used, other parameters should not be used."""

    type: Annotated[
        Optional[ImageType],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The type of image requested. Supported values are listed in ImageMetadata.type enum."""

    id: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""ID, if a specific entity/type is requested. The id may have different meaning for each type. for user, it is user id, for UGC, it is the id of the content, and so on."""

    ds: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some."""

    cid: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty."""
