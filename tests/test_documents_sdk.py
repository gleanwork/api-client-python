"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from datetime import date
from glean import Glean, models
from glean.utils import parse_datetime
import os
import pytest
from tests.test_client import create_test_http_client


def test_documents_sdk_getdocpermissions():
    test_http_client = create_test_http_client("getdocpermissions")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.documents.get_permissions()
        assert res is not None
        assert res == models.GetDocPermissionsResponse()


def test_documents_sdk_getdocuments():
    test_http_client = create_test_http_client("getdocuments")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.documents.get()
        assert res is not None
        assert res == models.GetDocumentsResponse(
            documents={
                "key": models.Document(
                    metadata=models.DocumentMetadata(
                        datasource="datasource",
                        object_type="Feature Request",
                        container="container",
                        parent_id="JIRA_EN-1337",
                        mime_type="mimeType",
                        document_id="documentId",
                        create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        author=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            related_documents=[],
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[],
                                query_suggestions=models.QuerySuggestionList(
                                    suggestions=[],
                                ),
                                invite_info=models.InviteInfo(
                                    invites=[],
                                ),
                                custom_fields=[],
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        owner=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        mentioned_people=[],
                        components=[
                            "Backend",
                            "Networking",
                        ],
                        status='["Done"]',
                        pins=[],
                        assigned_to=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        updated_by=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        collections=[],
                        interactions=models.DocumentInteractions(
                            reacts=[],
                            shares=[],
                        ),
                        verification=models.Verification(
                            state=models.State.VERIFIED,
                            metadata=models.VerificationMetadata(
                                last_verifier=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                reminders=[],
                                last_reminder=models.Reminder(
                                    assignee=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    requestor=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    remind_at=949753,
                                ),
                                candidate_verifiers=[],
                            ),
                        ),
                        shortcuts=[],
                        custom_data={
                            "someCustomField": models.CustomDataValue(),
                        },
                        contact_person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        ancestors=[],
                    ),
                ),
            },
        )


def test_documents_sdk_getdocumentsbyfacets():
    test_http_client = create_test_http_client("getdocumentsbyfacets")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.documents.get_by_facets(
            get_documents_by_facets_request={
                "filter_sets": [
                    {
                        "filters": [
                            {
                                "field_name": "type",
                                "values": [
                                    {
                                        "value": "Spreadsheet",
                                        "relation_type": models.RelationType.EQUALS,
                                    },
                                    {
                                        "value": "Presentation",
                                        "relation_type": models.RelationType.EQUALS,
                                    },
                                ],
                            },
                        ],
                    },
                    {
                        "filters": [],
                    },
                    {
                        "filters": [],
                    },
                ],
            }
        )
        assert res is not None
        assert res == models.GetDocumentsByFacetsResponse(
            documents=[
                models.Document(
                    metadata=models.DocumentMetadata(
                        datasource="datasource",
                        object_type="Feature Request",
                        container="container",
                        parent_id="JIRA_EN-1337",
                        mime_type="mimeType",
                        document_id="documentId",
                        create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        author=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            related_documents=[],
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[],
                                query_suggestions=models.QuerySuggestionList(
                                    suggestions=[],
                                ),
                                invite_info=models.InviteInfo(
                                    invites=[],
                                ),
                                custom_fields=[],
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        owner=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        mentioned_people=[],
                        components=[
                            "Backend",
                            "Networking",
                        ],
                        status='["Done"]',
                        pins=[],
                        assigned_to=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        updated_by=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        collections=[],
                        interactions=models.DocumentInteractions(
                            reacts=[],
                            shares=[],
                        ),
                        verification=models.Verification(
                            state=models.State.VERIFIED,
                            metadata=models.VerificationMetadata(
                                last_verifier=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                reminders=[],
                                last_reminder=models.Reminder(
                                    assignee=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    requestor=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    remind_at=949753,
                                ),
                                candidate_verifiers=[],
                            ),
                        ),
                        shortcuts=[],
                        custom_data={
                            "someCustomField": models.CustomDataValue(),
                        },
                        contact_person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        ancestors=[],
                    ),
                ),
                models.Document(),
                models.Document(),
            ],
        )


def test_documents_sdk_getdocumentanalytics():
    test_http_client = create_test_http_client("getdocumentanalytics")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.documents.get_analytics()
        assert res is not None
        assert res == models.GetDocumentAnalyticsResponse(
            results=[
                models.DocumentAnalytics(
                    facet_analytics=[],
                ),
                models.DocumentAnalytics(),
            ],
        )


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/indexdocument.test referencing operation post_/indexdocument not found in document`]"
)
def test_documents_sdk_post_indexdocument():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/indexdocuments.test referencing operation post_/indexdocuments not found in document`]"
)
def test_documents_sdk_post_indexdocuments():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/bulkindexdocuments.test referencing operation post_/bulkindexdocuments not found in document`]"
)
def test_documents_sdk_post_bulkindexdocuments():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/updatepermissions.test referencing operation post_/updatepermissions not found in document`]"
)
def test_documents_sdk_post_updatepermissions():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/processalldocuments.test referencing operation post_/processalldocuments not found in document`]"
)
def test_documents_sdk_post_processalldocuments():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/deletedocument.test referencing operation post_/deletedocument not found in document`]"
)
def test_documents_sdk_post_deletedocument():
    pass


def test_documents_sdk_post_api_index_v1_indexdocument():
    test_http_client = create_test_http_client("post_/api/index/v1/indexdocument")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.documents.add_or_update(
            document=models.DocumentDefinition(
                datasource="<value>",
            )
        )


def test_documents_sdk_post_api_index_v1_indexdocuments():
    test_http_client = create_test_http_client("post_/api/index/v1/indexdocuments")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.documents.index(
            datasource="<value>",
            documents=[
                models.DocumentDefinition(
                    datasource="<value>",
                ),
            ],
        )


def test_documents_sdk_post_api_index_v1_bulkindexdocuments():
    test_http_client = create_test_http_client("post_/api/index/v1/bulkindexdocuments")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.documents.bulk_index(
            upload_id="<id>",
            datasource="<value>",
            documents=[
                models.DocumentDefinition(
                    datasource="<value>",
                ),
                models.DocumentDefinition(
                    datasource="<value>",
                ),
                models.DocumentDefinition(
                    datasource="<value>",
                ),
            ],
        )


def test_documents_sdk_post_api_index_v1_updatepermissions():
    test_http_client = create_test_http_client("post_/api/index/v1/updatepermissions")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.update_permissions(
            datasource="<value>", permissions={}
        )


def test_documents_sdk_post_api_index_v1_processalldocuments():
    test_http_client = create_test_http_client("post_/api/index/v1/processalldocuments")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.documents.process_all()


def test_documents_sdk_post_api_index_v1_deletedocument():
    test_http_client = create_test_http_client("post_/api/index/v1/deletedocument")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.documents.delete(
            datasource="<value>", object_type="<value>", id="<id>"
        )
