"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from datetime import date
from glean import Glean, models
from glean.utils import parse_datetime
import os
from tests.test_client import create_test_http_client


def test_calendar_getevents():
    test_http_client = create_test_http_client("getevents")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.calendar.get_events(
            ids=[
                "<value>",
                "<value>",
            ],
            auth_tokens=[
                {
                    "access_token": "123abc",
                    "datasource": "gmail",
                    "scope": "email profile https://www.googleapis.com/auth/gmail.readonly",
                    "token_type": "Bearer",
                    "auth_user": "1",
                },
            ],
        )
        assert res is not None
        assert res == models.GetEventsResponse(
            events=[
                models.FeedResult(
                    category=models.FeedResultCategory.DOCUMENT_SUGGESTION,
                    primary_entry=models.FeedEntry(
                        title="<value>",
                        created_by=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            related_documents=[],
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[],
                                query_suggestions=models.QuerySuggestionList(
                                    suggestions=[],
                                ),
                                invite_info=models.InviteInfo(
                                    invites=[],
                                ),
                                custom_fields=[],
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        document=models.Document(
                            metadata=models.DocumentMetadata(
                                datasource="datasource",
                                object_type="Feature Request",
                                container="container",
                                parent_id="JIRA_EN-1337",
                                mime_type="mimeType",
                                document_id="documentId",
                                create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                                update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                                author=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                owner=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                mentioned_people=[],
                                components=[
                                    "Backend",
                                    "Networking",
                                ],
                                status='["Done"]',
                                pins=[],
                                assigned_to=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                updated_by=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                collections=[],
                                interactions=models.DocumentInteractions(
                                    reacts=[],
                                    shares=[],
                                ),
                                verification=models.Verification(
                                    state=models.State.VERIFIED,
                                    metadata=models.VerificationMetadata(
                                        last_verifier=models.Person(
                                            name="George Clooney",
                                            obfuscated_id="abc123",
                                        ),
                                        reminders=[],
                                        last_reminder=models.Reminder(
                                            assignee=models.Person(
                                                name="George Clooney",
                                                obfuscated_id="abc123",
                                            ),
                                            requestor=models.Person(
                                                name="George Clooney",
                                                obfuscated_id="abc123",
                                            ),
                                            remind_at=949753,
                                        ),
                                        candidate_verifiers=[],
                                    ),
                                ),
                                shortcuts=[],
                                custom_data={
                                    "someCustomField": models.CustomDataValue(),
                                },
                                contact_person=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                ancestors=[],
                            ),
                        ),
                        event=models.CalendarEvent(
                            id="<id>",
                            url="https://likable-editor.name",
                            attendees=models.CalendarAttendees(
                                people=[],
                            ),
                            generated_attachments=[],
                        ),
                        announcement=models.Announcement(
                            body=models.StructuredText(
                                text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                                structured_list=[],
                            ),
                            audience_filters=[
                                models.FacetFilter(
                                    field_name="type",
                                    values=[
                                        models.FacetFilterValue(
                                            value="Spreadsheet",
                                            relation_type=models.RelationType.EQUALS,
                                        ),
                                        models.FacetFilterValue(
                                            value="Presentation",
                                            relation_type=models.RelationType.EQUALS,
                                        ),
                                    ],
                                ),
                            ],
                            draft_id=342,
                            source_document=models.Document(),
                        ),
                        collection=models.Collection(
                            name="<value>",
                            description="indeed jubilantly phew upon angrily really by before spectate",
                            added_roles=[],
                            removed_roles=[],
                            audience_filters=[],
                            id=135487,
                            creator=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            items=[],
                            roles=[],
                        ),
                        collection_item=models.CollectionItem(
                            collection_id=343326,
                            shortcut=models.Shortcut(
                                input_alias="<value>",
                                destination_url="https://buttery-outrun.name/",
                                created_by='{"name":"George Clooney","obfuscatedId":"abc123","relatedDocuments":[],"metadata":{"type":"FULL_TIME","title":"Actor","department":"Movies","email":"george@example.com","location":"Hollywood, CA","managementChain":[],"phone":"6505551234","photoUrl":"https://example.com/george.jpg","reports":[],"startDate":"2000-01-23","datasourceProfile":[],"querySuggestions":{"suggestions":[]},"inviteInfo":{"invites":[]},"customFields":[],"badges":[]}}',
                                updated_by='{"name":"George Clooney","obfuscatedId":"abc123","relatedDocuments":[],"metadata":{"type":"FULL_TIME","title":"Actor","department":"Movies","email":"george@example.com","location":"Hollywood, CA","managementChain":[],"phone":"6505551234","photoUrl":"https://example.com/george.jpg","reports":[],"startDate":"2000-01-23","datasourceProfile":[],"querySuggestions":{"suggestions":[]},"inviteInfo":{"invites":[]},"customFields":[],"badges":[]}}',
                            ),
                            item_type=models.CollectionItemItemType.COLLECTION,
                        ),
                        person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        prompt_template=models.PromptTemplateResult(
                            prompt_template=models.PromptTemplate(
                                template="<value>",
                                added_roles=[],
                                removed_roles=[],
                                last_updated_by=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                roles=[],
                            ),
                        ),
                        workflow=models.WorkflowResult(
                            workflow=models.Workflow(),
                        ),
                        activities=[
                            models.UserActivity(
                                actor=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                            ),
                        ],
                    ),
                    secondary_entries=[
                        models.FeedEntry(
                            title="<value>",
                            event=models.CalendarEvent(
                                id="<id>",
                                url="https://likable-editor.name",
                                generated_attachments=[],
                            ),
                            announcement=models.Announcement(
                                audience_filters=[],
                                draft_id=342,
                            ),
                            prompt_template=models.PromptTemplateResult(
                                prompt_template=models.PromptTemplate(
                                    template="<value>",
                                    added_roles=[],
                                    removed_roles=[],
                                    roles=[],
                                ),
                            ),
                            workflow=models.WorkflowResult(
                                workflow=models.Workflow(),
                            ),
                            activities=[],
                        ),
                    ],
                ),
                models.FeedResult(
                    category=models.FeedResultCategory.DOCUMENT_SUGGESTION,
                    primary_entry=models.FeedEntry(
                        title="<value>",
                        event=models.CalendarEvent(
                            id="<id>",
                            url="https://likable-editor.name",
                            generated_attachments=[],
                        ),
                        announcement=models.Announcement(
                            audience_filters=[],
                            draft_id=342,
                        ),
                        prompt_template=models.PromptTemplateResult(
                            prompt_template=models.PromptTemplate(
                                template="<value>",
                                added_roles=[],
                                removed_roles=[],
                                roles=[],
                            ),
                        ),
                        workflow=models.WorkflowResult(
                            workflow=models.Workflow(),
                        ),
                        activities=[],
                    ),
                    secondary_entries=[],
                ),
            ],
        )
