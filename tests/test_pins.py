"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from glean import Glean, models
import os
from tests.test_client import create_test_http_client


def test_pins_editpin():
    test_http_client = create_test_http_client("editpin")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            act_as_bearer_token=os.getenv("GLEAN_ACT_AS_BEARER_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.pins.update(
            request={
                "audience_filters": [
                    {
                        "field_name": "type",
                        "values": [
                            {
                                "value": "Spreadsheet",
                                "relation_type": models.RelationType.EQUALS,
                            },
                            {
                                "value": "Presentation",
                                "relation_type": models.RelationType.EQUALS,
                            },
                        ],
                    },
                ],
            }
        )
        assert res is not None


def test_pins_getpin():
    test_http_client = create_test_http_client("getpin")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            act_as_bearer_token=os.getenv("GLEAN_ACT_AS_BEARER_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.pins.retrieve(request={})
        assert res is not None


def test_pins_listpins():
    test_http_client = create_test_http_client("listpins")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            act_as_bearer_token=os.getenv("GLEAN_ACT_AS_BEARER_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.pins.list(request={})
        assert res is not None


def test_pins_pin():
    test_http_client = create_test_http_client("pin")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            act_as_bearer_token=os.getenv("GLEAN_ACT_AS_BEARER_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.pins.create(
            request={
                "audience_filters": [
                    {
                        "field_name": "type",
                        "values": [
                            {
                                "value": "Spreadsheet",
                                "relation_type": models.RelationType.EQUALS,
                            },
                            {
                                "value": "Presentation",
                                "relation_type": models.RelationType.EQUALS,
                            },
                        ],
                    },
                ],
            }
        )
        assert res is not None


def test_pins_unpin():
    test_http_client = create_test_http_client("unpin")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            act_as_bearer_token=os.getenv("GLEAN_ACT_AS_BEARER_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        g_client.client.pins.remove(request={})
