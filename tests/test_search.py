"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from datetime import date
from glean import Glean, models
from glean.utils import parse_datetime
import os
import pytest
from tests.test_client import create_test_http_client


def test_search_adminsearch():
    test_http_client = create_test_http_client("adminsearch")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.search.admin(
            search_request=models.SearchRequest(
                tracking_token="trackingToken",
                page_size=10,
                query="vacation policy",
                request_options=models.SearchRequestOptions(
                    facet_filters=[
                        models.FacetFilter(
                            field_name="type",
                            values=[
                                models.FacetFilterValue(
                                    value="article",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                                models.FacetFilterValue(
                                    value="document",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                            ],
                        ),
                        models.FacetFilter(
                            field_name="department",
                            values=[
                                models.FacetFilterValue(
                                    value="engineering",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                            ],
                        ),
                    ],
                    facet_bucket_size=254944,
                ),
            )
        )
        assert res is not None


def test_search_autocomplete():
    test_http_client = create_test_http_client("autocomplete")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.search.autocomplete(
            tracking_token="trackingToken",
            query="San Fra",
            datasource="GDRIVE",
            result_size=10,
            auth_tokens=[
                {
                    "access_token": "123abc",
                    "datasource": "gmail",
                    "scope": "email profile https://www.googleapis.com/auth/gmail.readonly",
                    "token_type": "Bearer",
                    "auth_user": "1",
                },
            ],
        )
        assert res is not None


def test_search_feed():
    test_http_client = create_test_http_client("feed")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.search.get_feed(timeout_millis=5000)
        assert res is not None


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step peoplesuggest.test referencing operation peoplesuggest not found in document`]"
)
def test_search_peoplesuggest():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step peoplesuggestadmin.test referencing operation peoplesuggestadmin not found in document`]"
)
def test_search_peoplesuggestadmin():
    pass


def test_search_recommendations():
    test_http_client = create_test_http_client("recommendations")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.search.recommendations(
            recommendations_request=models.RecommendationsRequest(
                source_document=models.Document(
                    metadata=models.DocumentMetadata(
                        datasource="datasource",
                        object_type="Feature Request",
                        container="container",
                        parent_id="JIRA_EN-1337",
                        mime_type="mimeType",
                        document_id="documentId",
                        create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        author=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            related_documents=[],
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                ],
                                query_suggestions=models.QuerySuggestionList(
                                    suggestions=[],
                                ),
                                invite_info=models.InviteInfo(
                                    invites=[],
                                ),
                                custom_fields=[],
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        owner=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        mentioned_people=[],
                        components=[
                            "Backend",
                            "Networking",
                        ],
                        status='["Done"]',
                        pins=[],
                        assigned_to=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        updated_by=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        collections=[],
                        interactions=models.DocumentInteractions(
                            reacts=[],
                            shares=[],
                        ),
                        verification=models.Verification(
                            state=models.State.VERIFIED,
                            metadata=models.VerificationMetadata(
                                last_verifier=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                reminders=[],
                                last_reminder=models.Reminder(
                                    assignee=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    requestor=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    remind_at=986764,
                                ),
                                candidate_verifiers=[],
                            ),
                        ),
                        custom_data={
                            "someCustomField": models.CustomDataValue(),
                        },
                        contact_person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                    ),
                ),
                page_size=100,
                max_snippet_size=400,
                request_options=models.RecommendationsRequestOptions(
                    facet_filter_sets=[
                        models.FacetFilterSet(
                            filters=[
                                models.FacetFilter(
                                    field_name="type",
                                    values=[
                                        models.FacetFilterValue(
                                            value="Spreadsheet",
                                            relation_type=models.RelationType.EQUALS,
                                        ),
                                        models.FacetFilterValue(
                                            value="Presentation",
                                            relation_type=models.RelationType.EQUALS,
                                        ),
                                    ],
                                ),
                            ],
                        ),
                    ],
                    context=models.Document(),
                ),
            )
        )
        assert res is not None


def test_search_search():
    test_http_client = create_test_http_client("search")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.search.execute(
            search_request=models.SearchRequest(
                tracking_token="trackingToken",
                page_size=10,
                query="vacation policy",
                request_options=models.SearchRequestOptions(
                    facet_filters=[
                        models.FacetFilter(
                            field_name="type",
                            values=[
                                models.FacetFilterValue(
                                    value="article",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                                models.FacetFilterValue(
                                    value="document",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                            ],
                        ),
                        models.FacetFilter(
                            field_name="department",
                            values=[
                                models.FacetFilterValue(
                                    value="engineering",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                            ],
                        ),
                    ],
                    facet_bucket_size=246815,
                ),
            )
        )
        assert res is not None
