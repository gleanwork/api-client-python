"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from datetime import date
from glean import Glean, models
from glean.utils import parse_datetime
import os
from tests.test_client import create_test_http_client


def test_search_adminsearch():
    test_http_client = create_test_http_client("adminsearch")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.search.admin(
            search_request=models.SearchRequest(
                tracking_token="trackingToken",
                page_size=10,
                query="vacation policy",
                request_options=models.SearchRequestOptions(
                    facet_filters=[
                        models.FacetFilter(
                            field_name="type",
                            values=[
                                models.FacetFilterValue(
                                    value="article",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                                models.FacetFilterValue(
                                    value="document",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                            ],
                        ),
                        models.FacetFilter(
                            field_name="department",
                            values=[],
                        ),
                    ],
                    facet_bucket_size=254944,
                ),
            )
        )
        assert res is not None
        assert res == models.SearchResponse(
            tracking_token="trackingToken",
            results=[
                models.SearchResult(
                    title="title",
                    url="https://www.example.com/",
                    snippets=[],
                ),
                models.SearchResult(
                    title="title",
                    url="https://www.example.com/",
                ),
            ],
            glean_data_error=models.GleanDataError(
                error_messages=[
                    models.ErrorMessage(
                        source="gmail",
                        error_message="invalid token",
                    ),
                    models.ErrorMessage(
                        source="slack",
                        error_message="expired token",
                    ),
                ],
            ),
            request_id="5e345ae500ff0befa2b9d1a3ba0001737e7363696f312d323535323137000171756572792d656e64706f696e743a323032303031333074313830343032000100",
            facet_results=[
                models.FacetResult(
                    source_name="sourceName",
                    operator_name="operatorName",
                    buckets=[
                        models.FacetBucket(
                            count=1,
                            percentage=5,
                            value=models.FacetValue(
                                string_value="stringValue",
                                integer_value=5,
                            ),
                        ),
                        models.FacetBucket(
                            count=1,
                            percentage=5,
                            value=models.FacetValue(
                                string_value="stringValue",
                                integer_value=5,
                            ),
                        ),
                    ],
                ),
                models.FacetResult(
                    source_name="sourceName",
                    operator_name="operatorName",
                    buckets=[],
                ),
            ],
            rewritten_facet_filters=[
                models.FacetFilter(
                    field_name="fieldName",
                    values=[
                        models.FacetFilterValue(),
                        models.FacetFilterValue(),
                    ],
                ),
                models.FacetFilter(
                    field_name="fieldName",
                    values=[],
                ),
            ],
            has_more_results=True,
        )


def test_search_autocomplete():
    test_http_client = create_test_http_client("autocomplete")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.search.autocomplete(
            tracking_token="trackingToken",
            query="San Fra",
            datasource="GDRIVE",
            result_size=10,
            auth_tokens=[
                {
                    "access_token": "123abc",
                    "datasource": "gmail",
                    "scope": "email profile https://www.googleapis.com/auth/gmail.readonly",
                    "token_type": "Bearer",
                    "auth_user": "1",
                },
            ],
        )
        assert res is not None
        assert res == models.AutocompleteResponse(
            tracking_token="trackingToken",
            results=[
                models.AutocompleteResult(
                    result="sample result",
                    result_type=models.AutocompleteResultResultType.DOCUMENT,
                    score=4.56,
                    url="https://www.example.com/",
                    tracking_token="abcd",
                ),
            ],
            glean_data_error=models.GleanDataError(
                error_messages=[
                    models.ErrorMessage(
                        source="gmail",
                        error_message="invalid token",
                    ),
                    models.ErrorMessage(
                        source="gmail",
                        error_message="invalid token",
                    ),
                ],
            ),
            backend_time_millis=1100,
        )


def test_search_feed():
    test_http_client = create_test_http_client("feed")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.search.get_feed(timeout_millis=5000)
        assert res is not None
        assert res == models.FeedResponse(
            server_timestamp=994915,
            results=[
                models.FeedResult(
                    category=models.FeedResultCategory.ZERO_STATE_WORKFLOW_SUGGESTION,
                    primary_entry=models.FeedEntry(
                        title="<value>",
                        created_by=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        document=models.Document(
                            metadata=models.DocumentMetadata(
                                datasource="datasource",
                                object_type="Feature Request",
                                container="container",
                                parent_id="JIRA_EN-1337",
                                mime_type="mimeType",
                                document_id="documentId",
                                create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                                update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                                author=models.Person(
                                    name="name",
                                    obfuscated_id="<id>",
                                ),
                                components=[
                                    "Backend",
                                    "Networking",
                                ],
                                status='["Done"]',
                            ),
                        ),
                        event=models.CalendarEvent(
                            id="<id>",
                            url="https://unpleasant-makeover.com",
                            attendees=models.CalendarAttendees(
                                people=[],
                            ),
                            generated_attachments=[
                                models.GeneratedAttachment(
                                    documents=[
                                        models.Document(),
                                    ],
                                    person=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    customer=models.Customer(
                                        id="<id>",
                                        company=models.Company(
                                            name="<value>",
                                            location="New York City",
                                            industry="Finances",
                                            about="Financial, software, data, and media company headquartered in Midtown Manhattan, New York City",
                                        ),
                                        poc=[],
                                        notes="CIO is interested in trying out the product.",
                                    ),
                                    external_links=[
                                        models.StructuredLink(
                                            icon_config=models.IconConfig(
                                                color="#343CED",
                                                key="person_icon",
                                                icon_type=models.IconType.GLYPH,
                                                name="user",
                                            ),
                                        ),
                                        models.StructuredLink(
                                            icon_config=models.IconConfig(
                                                color="#343CED",
                                                key="person_icon",
                                                icon_type=models.IconType.GLYPH,
                                                name="user",
                                            ),
                                        ),
                                        models.StructuredLink(
                                            icon_config=models.IconConfig(
                                                color="#343CED",
                                                key="person_icon",
                                                icon_type=models.IconType.GLYPH,
                                                name="user",
                                            ),
                                        ),
                                    ],
                                    content=[
                                        models.GeneratedAttachmentContent(
                                            display_header="Action Items",
                                        ),
                                    ],
                                ),
                                models.GeneratedAttachment(
                                    documents=[],
                                    external_links=[],
                                    content=[],
                                ),
                                models.GeneratedAttachment(
                                    documents=[],
                                    external_links=[],
                                    content=[],
                                ),
                            ],
                        ),
                        announcement=models.Announcement(
                            draft_id=342,
                        ),
                        collection=models.Collection(
                            name="<value>",
                            description="closely badly um although",
                            added_roles=[],
                            removed_roles=[],
                            audience_filters=[],
                            id=768477,
                            creator=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            updated_by=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            items=[],
                            children=[],
                            roles=[],
                        ),
                        collection_item=models.CollectionItem(
                            collection_id=533262,
                            shortcut=models.Shortcut(
                                input_alias="<value>",
                                destination_url="https://mushy-trolley.name",
                                created_by='{"name":"George Clooney","obfuscatedId":"abc123"}',
                                updated_by='{"name":"George Clooney","obfuscatedId":"abc123"}',
                            ),
                            item_type=models.CollectionItemItemType.TEXT,
                        ),
                        prompt_template=models.PromptTemplateResult(
                            prompt_template=models.PromptTemplate(
                                template="<value>",
                                added_roles=[],
                                removed_roles=[],
                                last_updated_by=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                roles=[],
                            ),
                        ),
                        workflow=models.WorkflowResult(
                            workflow=models.Workflow(
                                roles=[],
                                schema_=models.WorkflowSchema(
                                    steps=[],
                                    trigger=models.Trigger(
                                        config=models.Config(
                                            chat_message=models.WorkflowTriggerChatMessageConfig(
                                                slack_config=models.WorkflowSlackConfig(
                                                    instance_channels={
                                                        "key": [
                                                            '{"slack-workspace-1":["C12345678","C87654321"],"enterprise-grid-1":["C98765432","C23456789"]}',
                                                        ],
                                                        "key1": [
                                                            '{"slack-workspace-1":["C12345678","C87654321"],"enterprise-grid-1":["C98765432","C23456789"]}',
                                                        ],
                                                        "key2": [
                                                            '{"slack-workspace-1":["C12345678","C87654321"],"enterprise-grid-1":["C98765432","C23456789"]}',
                                                        ],
                                                    },
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                                added_roles=[],
                                removed_roles=[],
                            ),
                        ),
                        activities=[
                            models.UserActivity(
                                actor=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                            ),
                            models.UserActivity(),
                            models.UserActivity(),
                        ],
                    ),
                    secondary_entries=[
                        models.FeedEntry(
                            title="<value>",
                            event=models.CalendarEvent(
                                id="<id>",
                                url="https://unpleasant-makeover.com",
                                generated_attachments=[],
                            ),
                            announcement=models.Announcement(
                                draft_id=342,
                            ),
                            prompt_template=models.PromptTemplateResult(
                                prompt_template=models.PromptTemplate(
                                    template="<value>",
                                    added_roles=[],
                                    removed_roles=[],
                                    roles=[],
                                ),
                            ),
                            workflow=models.WorkflowResult(
                                workflow=models.Workflow(
                                    roles=[],
                                    schema_=models.WorkflowSchema(
                                        steps=[],
                                        trigger=models.Trigger(
                                            config=models.Config(
                                                chat_message=models.WorkflowTriggerChatMessageConfig(
                                                    slack_config=models.WorkflowSlackConfig(
                                                        instance_channels={
                                                            "key": [
                                                                '{"slack-workspace-1":["C12345678","C87654321"],"enterprise-grid-1":["C98765432","C23456789"]}',
                                                            ],
                                                            "key1": [
                                                                '{"slack-workspace-1":["C12345678","C87654321"],"enterprise-grid-1":["C98765432","C23456789"]}',
                                                            ],
                                                            "key2": [
                                                                '{"slack-workspace-1":["C12345678","C87654321"],"enterprise-grid-1":["C98765432","C23456789"]}',
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                    added_roles=[],
                                    removed_roles=[],
                                ),
                            ),
                            activities=[],
                        ),
                        models.FeedEntry(
                            title="<value>",
                            event=models.CalendarEvent(
                                id="<id>",
                                url="https://unpleasant-makeover.com",
                                generated_attachments=[],
                            ),
                            announcement=models.Announcement(
                                draft_id=342,
                            ),
                            prompt_template=models.PromptTemplateResult(
                                prompt_template=models.PromptTemplate(
                                    template="<value>",
                                    added_roles=[],
                                    removed_roles=[],
                                    roles=[],
                                ),
                            ),
                            workflow=models.WorkflowResult(
                                workflow=models.Workflow(
                                    roles=[],
                                    schema_=models.WorkflowSchema(
                                        steps=[],
                                        trigger=models.Trigger(
                                            config=models.Config(
                                                chat_message=models.WorkflowTriggerChatMessageConfig(
                                                    slack_config=models.WorkflowSlackConfig(
                                                        instance_channels={
                                                            "key": [
                                                                '{"slack-workspace-1":["C12345678","C87654321"],"enterprise-grid-1":["C98765432","C23456789"]}',
                                                            ],
                                                            "key1": [
                                                                '{"slack-workspace-1":["C12345678","C87654321"],"enterprise-grid-1":["C98765432","C23456789"]}',
                                                            ],
                                                            "key2": [
                                                                '{"slack-workspace-1":["C12345678","C87654321"],"enterprise-grid-1":["C98765432","C23456789"]}',
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                    added_roles=[],
                                    removed_roles=[],
                                ),
                            ),
                            activities=[],
                        ),
                        models.FeedEntry(
                            title="<value>",
                            event=models.CalendarEvent(
                                id="<id>",
                                url="https://unpleasant-makeover.com",
                                generated_attachments=[],
                            ),
                            announcement=models.Announcement(
                                draft_id=342,
                            ),
                            prompt_template=models.PromptTemplateResult(
                                prompt_template=models.PromptTemplate(
                                    template="<value>",
                                    added_roles=[],
                                    removed_roles=[],
                                    roles=[],
                                ),
                            ),
                            workflow=models.WorkflowResult(
                                workflow=models.Workflow(
                                    roles=[],
                                    schema_=models.WorkflowSchema(
                                        steps=[],
                                        trigger=models.Trigger(
                                            config=models.Config(
                                                chat_message=models.WorkflowTriggerChatMessageConfig(
                                                    slack_config=models.WorkflowSlackConfig(
                                                        instance_channels={
                                                            "key": [
                                                                '{"slack-workspace-1":["C12345678","C87654321"],"enterprise-grid-1":["C98765432","C23456789"]}',
                                                            ],
                                                            "key1": [
                                                                '{"slack-workspace-1":["C12345678","C87654321"],"enterprise-grid-1":["C98765432","C23456789"]}',
                                                            ],
                                                            "key2": [
                                                                '{"slack-workspace-1":["C12345678","C87654321"],"enterprise-grid-1":["C98765432","C23456789"]}',
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                    added_roles=[],
                                    removed_roles=[],
                                ),
                            ),
                            activities=[],
                        ),
                    ],
                ),
                models.FeedResult(
                    category=models.FeedResultCategory.ZERO_STATE_WORKFLOW_SUGGESTION,
                    primary_entry=models.FeedEntry(
                        title="<value>",
                        event=models.CalendarEvent(
                            id="<id>",
                            url="https://unpleasant-makeover.com",
                            generated_attachments=[],
                        ),
                        announcement=models.Announcement(
                            draft_id=342,
                        ),
                        prompt_template=models.PromptTemplateResult(
                            prompt_template=models.PromptTemplate(
                                template="<value>",
                                added_roles=[],
                                removed_roles=[],
                                roles=[],
                            ),
                        ),
                        workflow=models.WorkflowResult(
                            workflow=models.Workflow(
                                roles=[],
                                schema_=models.WorkflowSchema(
                                    steps=[],
                                    trigger=models.Trigger(
                                        config=models.Config(
                                            chat_message=models.WorkflowTriggerChatMessageConfig(
                                                slack_config=models.WorkflowSlackConfig(
                                                    instance_channels={
                                                        "key": [
                                                            '{"slack-workspace-1":["C12345678","C87654321"],"enterprise-grid-1":["C98765432","C23456789"]}',
                                                        ],
                                                        "key1": [
                                                            '{"slack-workspace-1":["C12345678","C87654321"],"enterprise-grid-1":["C98765432","C23456789"]}',
                                                        ],
                                                        "key2": [
                                                            '{"slack-workspace-1":["C12345678","C87654321"],"enterprise-grid-1":["C98765432","C23456789"]}',
                                                        ],
                                                    },
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                                added_roles=[],
                                removed_roles=[],
                            ),
                        ),
                        activities=[],
                    ),
                    secondary_entries=[],
                ),
            ],
            facet_results={
                "key": [
                    models.FacetResult(
                        source_name="container_name",
                        operator_name="SelectMultiple",
                        buckets=[
                            models.FacetBucket(
                                count=1,
                                datasource="jira",
                                percentage=5,
                                value=models.FacetValue(
                                    string_value="engineering",
                                    integer_value=5,
                                    display_label="engineering",
                                    icon_config=models.IconConfig(
                                        color="#343CED",
                                        key="person_icon",
                                        icon_type=models.IconType.GLYPH,
                                        name="user",
                                    ),
                                ),
                            ),
                        ],
                        has_more_buckets=False,
                        group_name="Service Cloud",
                    ),
                    models.FacetResult(
                        source_name="container_name",
                        operator_name="SelectMultiple",
                        buckets=[],
                        has_more_buckets=False,
                        group_name="Service Cloud",
                    ),
                ],
                "key1": [],
            },
        )


def test_search_peoplesuggest():
    test_http_client = create_test_http_client("peoplesuggest")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.search.suggest_people(
            categories=[
                models.PeopleSuggestionCategory.INVITE_NONUSERS,
                models.PeopleSuggestionCategory.INVITE_NONUSERS,
            ]
        )
        assert res is not None
        assert res == models.PeopleSuggestResponse(
            suggestions=[
                models.PersonSuggestionList(
                    category=models.PeopleSuggestionCategory.INVITE_NONUSERS,
                    people=[
                        models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                    ],
                ),
            ],
        )


def test_search_peoplesuggestadmin():
    test_http_client = create_test_http_client("peoplesuggestadmin")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.search.suggest_people_admin(
            categories=[
                models.PeopleSuggestionCategory.INVITE_NONUSERS,
                models.PeopleSuggestionCategory.INVITE_NONUSERS,
            ]
        )
        assert res is not None
        assert res == models.PeopleSuggestResponse(
            suggestions=[
                models.PersonSuggestionList(
                    category=models.PeopleSuggestionCategory.INVITE_NONUSERS,
                    people=[
                        models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                    ],
                ),
            ],
        )


def test_search_recommendations():
    test_http_client = create_test_http_client("recommendations")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.search.recommendations(
            recommendations_request=models.RecommendationsRequest(
                source_document=models.Document(
                    metadata=models.DocumentMetadata(
                        datasource="datasource",
                        object_type="Feature Request",
                        container="container",
                        parent_id="JIRA_EN-1337",
                        mime_type="mimeType",
                        document_id="documentId",
                        create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        author=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            related_documents=[],
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[],
                                query_suggestions=models.QuerySuggestionList(
                                    suggestions=[],
                                ),
                                invite_info=models.InviteInfo(
                                    invites=[],
                                ),
                                custom_fields=[],
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        owner=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        mentioned_people=[],
                        components=[
                            "Backend",
                            "Networking",
                        ],
                        status='["Done"]',
                        pins=[],
                        assigned_to=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        updated_by=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        collections=[],
                        interactions=models.DocumentInteractions(
                            reacts=[],
                            shares=[],
                        ),
                        verification=models.Verification(
                            state=models.State.VERIFIED,
                            metadata=models.VerificationMetadata(
                                last_verifier=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                reminders=[],
                                last_reminder=models.Reminder(
                                    assignee=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    requestor=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    remind_at=949753,
                                ),
                                candidate_verifiers=[],
                            ),
                        ),
                        shortcuts=[],
                        custom_data={
                            "someCustomField": models.CustomDataValue(),
                        },
                        contact_person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        ancestors=[],
                    ),
                ),
                page_size=100,
                max_snippet_size=400,
                request_options=models.RecommendationsRequestOptions(
                    facet_filter_sets=[
                        models.FacetFilterSet(
                            filters=[
                                models.FacetFilter(
                                    field_name="type",
                                    values=[
                                        models.FacetFilterValue(
                                            value="Spreadsheet",
                                            relation_type=models.RelationType.EQUALS,
                                        ),
                                        models.FacetFilterValue(
                                            value="Presentation",
                                            relation_type=models.RelationType.EQUALS,
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        models.FacetFilterSet(
                            filters=[],
                        ),
                        models.FacetFilterSet(
                            filters=[],
                        ),
                    ],
                    context=models.Document(),
                ),
            )
        )
        assert res is not None
        assert res == models.ResultsResponse(
            results=[
                models.SearchResult(
                    title="title",
                    url="https://example.com/foo/bar",
                    native_app_url="slack://foo/bar",
                    snippets=[],
                ),
            ],
            structured_results=[
                models.StructuredResult(
                    document=models.Document(
                        metadata=models.DocumentMetadata(
                            datasource="datasource",
                            object_type="Feature Request",
                            container="container",
                            parent_id="JIRA_EN-1337",
                            mime_type="mimeType",
                            document_id="documentId",
                            create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                            update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                            author=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                                related_documents=[],
                                metadata=models.PersonMetadata(
                                    type=models.PersonMetadataType.FULL_TIME,
                                    title="Actor",
                                    department="Movies",
                                    email="george@example.com",
                                    location="Hollywood, CA",
                                    phone="6505551234",
                                    photo_url="https://example.com/george.jpg",
                                    start_date=date.fromisoformat("2000-01-23"),
                                    datasource_profile=[],
                                    query_suggestions=models.QuerySuggestionList(
                                        suggestions=[],
                                    ),
                                    invite_info=models.InviteInfo(
                                        invites=[],
                                    ),
                                    custom_fields=[],
                                    badges=[
                                        models.Badge(
                                            key="deployment_name_new_hire",
                                            display_name="New hire",
                                            icon_config=models.IconConfig(
                                                color="#343CED",
                                                key="person_icon",
                                                icon_type=models.IconType.GLYPH,
                                                name="user",
                                            ),
                                        ),
                                    ],
                                ),
                            ),
                            owner=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            mentioned_people=[],
                            components=[
                                "Backend",
                                "Networking",
                            ],
                            status='["Done"]',
                            pins=[],
                            assigned_to=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            updated_by=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            collections=[],
                            interactions=models.DocumentInteractions(
                                reacts=[],
                                shares=[],
                            ),
                            verification=models.Verification(
                                state=models.State.VERIFIED,
                                metadata=models.VerificationMetadata(
                                    last_verifier=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    reminders=[],
                                    last_reminder=models.Reminder(
                                        assignee=models.Person(
                                            name="George Clooney",
                                            obfuscated_id="abc123",
                                        ),
                                        requestor=models.Person(
                                            name="George Clooney",
                                            obfuscated_id="abc123",
                                        ),
                                        remind_at=949753,
                                    ),
                                    candidate_verifiers=[],
                                ),
                            ),
                            shortcuts=[],
                            custom_data={
                                "someCustomField": models.CustomDataValue(),
                            },
                            contact_person=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            ancestors=[],
                        ),
                    ),
                    person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    customer=models.Customer(
                        id="<id>",
                        company=models.Company(
                            name="<value>",
                            location="New York City",
                            industry="Finances",
                            about="Financial, software, data, and media company headquartered in Midtown Manhattan, New York City",
                        ),
                        poc=[],
                        merged_customers=[],
                        notes="CIO is interested in trying out the product.",
                    ),
                    team=models.Team(
                        id="<id>",
                        name="<value>",
                        members=[],
                        datasource_profiles=[],
                    ),
                    custom_entity=models.CustomEntity(
                        roles=[],
                    ),
                    answer=models.Answer(
                        id=3,
                        doc_id="ANSWERS_answer_3",
                        question="Why is the sky blue?",
                        body_text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                        audience_filters=[
                            models.FacetFilter(
                                field_name="type",
                                values=[
                                    models.FacetFilterValue(
                                        value="Spreadsheet",
                                        relation_type=models.RelationType.EQUALS,
                                    ),
                                    models.FacetFilterValue(
                                        value="Presentation",
                                        relation_type=models.RelationType.EQUALS,
                                    ),
                                ],
                            ),
                        ],
                        added_roles=[],
                        removed_roles=[],
                        combined_answer_text=models.StructuredText(
                            text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                            structured_list=[],
                        ),
                        likes=models.AnswerLikes(
                            liked_by=[],
                            liked_by_user=True,
                            num_likes=876250,
                        ),
                        board=models.AnswerBoard(
                            name="<value>",
                            description="aha amid lest contravene how agile in unblinking whereas",
                            audience_filters=[],
                            id=53123,
                            creator=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                        ),
                        source_document=models.Document(),
                    ),
                    extracted_qn_a=models.ExtractedQnA(
                        question_result=models.SearchResult(
                            title="title",
                            url="https://example.com/foo/bar",
                            native_app_url="slack://foo/bar",
                            related_results=[],
                            all_clustered_results=[],
                            must_include_suggestions=models.QuerySuggestionList(),
                            query_suggestion=models.QuerySuggestion(
                                query="app:github type:pull author:mortimer",
                                search_provider_info=models.SearchProviderInfo(
                                    name="Google",
                                    search_link_url_template="https://www.google.com/search?q={query}&hl=en",
                                ),
                                label="Mortimer's PRs",
                                datasource="github",
                                request_options=models.SearchRequestOptions(
                                    datasource_filter="JIRA",
                                    datasources_filter=[
                                        "JIRA",
                                    ],
                                    query_overrides_facet_filters=True,
                                    facet_filters=[],
                                    facet_filter_sets=[],
                                    facet_bucket_size=692263,
                                    auth_tokens=[],
                                ),
                                ranges=[],
                                input_details=models.SearchRequestInputDetails(
                                    has_copy_paste=True,
                                ),
                            ),
                        ),
                    ),
                    meeting=models.Meeting(
                        attendees=models.CalendarAttendees(
                            people=[],
                        ),
                    ),
                    collection=models.Collection(
                        name="<value>",
                        description="indeed jubilantly phew upon angrily really by before spectate",
                        audience_filters=[],
                        id=135487,
                        items=[],
                    ),
                    answer_board=models.AnswerBoard(
                        name="<value>",
                        description="aha amid lest contravene how agile in unblinking whereas",
                        audience_filters=[],
                        id=53123,
                    ),
                    code=models.Code(
                        repo_name="scio",
                        file_name="README.md",
                        lines=[],
                    ),
                    shortcut=models.Shortcut(
                        input_alias="<value>",
                        destination_url="https://closed-intent.biz",
                        created_by='{"name":"George Clooney","obfuscatedId":"abc123","relatedDocuments":[],"metadata":{"type":"FULL_TIME","title":"Actor","department":"Movies","email":"george@example.com","location":"Hollywood, CA","managementChain":[],"phone":"6505551234","photoUrl":"https://example.com/george.jpg","reports":[],"startDate":"2000-01-23","datasourceProfile":[],"querySuggestions":{"suggestions":[]},"inviteInfo":{"invites":[]},"customFields":[],"badges":[]}}',
                        updated_by='{"name":"George Clooney","obfuscatedId":"abc123","relatedDocuments":[],"metadata":{"type":"FULL_TIME","title":"Actor","department":"Movies","email":"george@example.com","location":"Hollywood, CA","managementChain":[],"phone":"6505551234","photoUrl":"https://example.com/george.jpg","reports":[],"startDate":"2000-01-23","datasourceProfile":[],"querySuggestions":{"suggestions":[]},"inviteInfo":{"invites":[]},"customFields":[],"badges":[]}}',
                    ),
                    related_question=models.RelatedQuestion(),
                ),
            ],
            generated_qna_result=models.GeneratedQna(
                ranges=[],
            ),
            glean_data_error=models.GleanDataError(
                error_messages=[
                    models.ErrorMessage(
                        source="gmail",
                        error_message="invalid token",
                    ),
                    models.ErrorMessage(
                        source="gmail",
                        error_message="invalid token",
                    ),
                ],
            ),
            backend_time_millis=1100,
        )


def test_search_search():
    test_http_client = create_test_http_client("search")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.search.execute(
            search_request=models.SearchRequest(
                tracking_token="trackingToken",
                page_size=10,
                query="vacation policy",
                request_options=models.SearchRequestOptions(
                    facet_filters=[
                        models.FacetFilter(
                            field_name="type",
                            values=[
                                models.FacetFilterValue(
                                    value="article",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                                models.FacetFilterValue(
                                    value="document",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                            ],
                        ),
                        models.FacetFilter(
                            field_name="department",
                            values=[],
                        ),
                    ],
                    facet_bucket_size=764604,
                ),
            )
        )
        assert res is not None
        assert res == models.SearchResponse(
            tracking_token="trackingToken",
            results=[
                models.SearchResult(
                    title="title",
                    url="https://www.example.com/",
                    snippets=[],
                ),
                models.SearchResult(
                    title="title",
                    url="https://www.example.com/",
                ),
            ],
            glean_data_error=models.GleanDataError(
                error_messages=[
                    models.ErrorMessage(
                        source="gmail",
                        error_message="invalid token",
                    ),
                    models.ErrorMessage(
                        source="slack",
                        error_message="expired token",
                    ),
                ],
            ),
            request_id="5e345ae500ff0befa2b9d1a3ba0001737e7363696f312d323535323137000171756572792d656e64706f696e743a323032303031333074313830343032000100",
            facet_results=[
                models.FacetResult(
                    source_name="sourceName",
                    operator_name="operatorName",
                    buckets=[
                        models.FacetBucket(
                            count=1,
                            percentage=5,
                            value=models.FacetValue(
                                string_value="stringValue",
                                integer_value=5,
                            ),
                        ),
                        models.FacetBucket(
                            count=1,
                            percentage=5,
                            value=models.FacetValue(
                                string_value="stringValue",
                                integer_value=5,
                            ),
                        ),
                    ],
                ),
                models.FacetResult(
                    source_name="sourceName",
                    operator_name="operatorName",
                    buckets=[],
                ),
            ],
            rewritten_facet_filters=[
                models.FacetFilter(
                    field_name="fieldName",
                    values=[
                        models.FacetFilterValue(),
                        models.FacetFilterValue(),
                    ],
                ),
                models.FacetFilter(
                    field_name="fieldName",
                    values=[],
                ),
            ],
            has_more_results=True,
        )
