"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from datetime import date
from glean import Glean, models
from glean.utils import parse_datetime
import os
from tests.test_client import create_test_http_client


def test_agents_runagent():
    test_http_client = create_test_http_client("runagent")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.agents.runagent()
        assert res is not None
        assert res == models.ChatResponse(
            messages=[
                models.ChatMessage(
                    citations=[
                        models.ChatMessageCitation(
                            source_document=models.Document(
                                metadata=models.DocumentMetadata(
                                    datasource="datasource",
                                    object_type="Feature Request",
                                    container="container",
                                    parent_id="JIRA_EN-1337",
                                    mime_type="mimeType",
                                    document_id="documentId",
                                    create_time=parse_datetime(
                                        "2000-01-23T04:56:07.000Z"
                                    ),
                                    update_time=parse_datetime(
                                        "2000-01-23T04:56:07.000Z"
                                    ),
                                    author=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                        related_documents=[],
                                        metadata=models.PersonMetadata(
                                            type=models.PersonMetadataType.FULL_TIME,
                                            title="Actor",
                                            department="Movies",
                                            email="george@example.com",
                                            location="Hollywood, CA",
                                            phone="6505551234",
                                            photo_url="https://example.com/george.jpg",
                                            start_date=date.fromisoformat("2000-01-23"),
                                            datasource_profile=[
                                                models.DatasourceProfile(
                                                    datasource="github",
                                                    handle="<value>",
                                                ),
                                            ],
                                            query_suggestions=models.QuerySuggestionList(
                                                suggestions=[],
                                            ),
                                            invite_info=models.InviteInfo(
                                                invites=[],
                                            ),
                                            custom_fields=[],
                                            badges=[
                                                models.Badge(
                                                    key="deployment_name_new_hire",
                                                    display_name="New hire",
                                                    icon_config=models.IconConfig(
                                                        color="#343CED",
                                                        key="person_icon",
                                                        icon_type=models.IconType.GLYPH,
                                                        name="user",
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                    owner=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    mentioned_people=[],
                                    components=[
                                        "Backend",
                                        "Networking",
                                    ],
                                    status='["Done"]',
                                    pins=[],
                                    assigned_to=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    updated_by=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    collections=[],
                                    interactions=models.DocumentInteractions(
                                        reacts=[],
                                        shares=[],
                                    ),
                                    verification=models.Verification(
                                        state=models.State.VERIFIED,
                                        metadata=models.VerificationMetadata(
                                            last_verifier=models.Person(
                                                name="George Clooney",
                                                obfuscated_id="abc123",
                                            ),
                                            reminders=[],
                                            last_reminder=models.Reminder(
                                                assignee=models.Person(
                                                    name="George Clooney",
                                                    obfuscated_id="abc123",
                                                ),
                                                requestor=models.Person(
                                                    name="George Clooney",
                                                    obfuscated_id="abc123",
                                                ),
                                                remind_at=906369,
                                            ),
                                            candidate_verifiers=[],
                                        ),
                                    ),
                                    custom_data={
                                        "someCustomField": models.CustomDataValue(),
                                    },
                                    contact_person=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                ),
                            ),
                            source_file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            source_person=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            reference_ranges=[
                                models.ReferenceRange(
                                    text_range=models.TextRange(
                                        start_index=540779,
                                        document=models.Document(),
                                    ),
                                    snippets=[
                                        models.SearchResultSnippet(
                                            snippet="snippet",
                                            mime_type="mimeType",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        models.ChatMessageCitation(
                            source_file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            reference_ranges=[
                                models.ReferenceRange(
                                    snippets=[
                                        models.SearchResultSnippet(
                                            snippet="snippet",
                                            mime_type="mimeType",
                                        ),
                                    ],
                                ),
                                models.ReferenceRange(
                                    snippets=[
                                        models.SearchResultSnippet(
                                            snippet="snippet",
                                            mime_type="mimeType",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        models.ChatMessageCitation(
                            source_file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            reference_ranges=[
                                models.ReferenceRange(
                                    snippets=[
                                        models.SearchResultSnippet(
                                            snippet="snippet",
                                            mime_type="mimeType",
                                        ),
                                    ],
                                ),
                                models.ReferenceRange(
                                    snippets=[
                                        models.SearchResultSnippet(
                                            snippet="snippet",
                                            mime_type="mimeType",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                    ],
                    fragments=[
                        models.ChatMessageFragment(
                            structured_results=[
                                models.StructuredResult(
                                    person=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    customer=models.Customer(
                                        id="<id>",
                                        company=models.Company(
                                            name="<value>",
                                            location="New York City",
                                            industry="Finances",
                                            about="Financial, software, data, and media company headquartered in Midtown Manhattan, New York City",
                                        ),
                                        poc=[],
                                        notes="CIO is interested in trying out the product.",
                                    ),
                                    team=models.Team(
                                        id="<id>",
                                        name="<value>",
                                        members=[],
                                        datasource_profiles=[
                                            models.DatasourceProfile(
                                                datasource="github",
                                                handle="<value>",
                                            ),
                                        ],
                                    ),
                                    custom_entity=models.CustomEntity(
                                        roles=[],
                                    ),
                                    answer=models.Answer(
                                        id=3,
                                        doc_id="ANSWERS_answer_3",
                                        question="Why is the sky blue?",
                                        body_text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                                        audience_filters=[
                                            models.FacetFilter(
                                                field_name="type",
                                                values=[
                                                    models.FacetFilterValue(
                                                        value="Spreadsheet",
                                                        relation_type=models.RelationType.EQUALS,
                                                    ),
                                                    models.FacetFilterValue(
                                                        value="Presentation",
                                                        relation_type=models.RelationType.EQUALS,
                                                    ),
                                                ],
                                            ),
                                        ],
                                        added_roles=[],
                                        removed_roles=[],
                                        combined_answer_text=models.StructuredText(
                                            text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                                            structured_list=[],
                                        ),
                                        likes=models.AnswerLikes(
                                            liked_by=[],
                                            liked_by_user=False,
                                            num_likes=320829,
                                        ),
                                        board=models.AnswerBoard(
                                            name="<value>",
                                            description="transcend however notwithstanding",
                                            audience_filters=[
                                                models.FacetFilter(
                                                    field_name="type",
                                                    values=[
                                                        models.FacetFilterValue(
                                                            value="Spreadsheet",
                                                            relation_type=models.RelationType.EQUALS,
                                                        ),
                                                        models.FacetFilterValue(
                                                            value="Presentation",
                                                            relation_type=models.RelationType.EQUALS,
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            id=992075,
                                            creator=models.Person(
                                                name="George Clooney",
                                                obfuscated_id="abc123",
                                            ),
                                        ),
                                    ),
                                    extracted_qn_a=models.ExtractedQnA(
                                        question_result=models.SearchResult(
                                            title="title",
                                            url="https://example.com/foo/bar",
                                            native_app_url="slack://foo/bar",
                                            related_results=[],
                                            all_clustered_results=[],
                                            must_include_suggestions=models.QuerySuggestionList(),
                                            query_suggestion=models.QuerySuggestion(
                                                query="app:github type:pull author:mortimer",
                                                search_provider_info=models.SearchProviderInfo(
                                                    name="Google",
                                                    search_link_url_template="https://www.google.com/search?q={query}&hl=en",
                                                ),
                                                label="Mortimer's PRs",
                                                datasource="github",
                                                request_options=models.SearchRequestOptions(
                                                    datasource_filter="JIRA",
                                                    datasources_filter=[
                                                        "JIRA",
                                                    ],
                                                    query_overrides_facet_filters=True,
                                                    facet_filters=[
                                                        models.FacetFilter(
                                                            field_name="type",
                                                            values=[
                                                                models.FacetFilterValue(
                                                                    value="Spreadsheet",
                                                                    relation_type=models.RelationType.EQUALS,
                                                                ),
                                                                models.FacetFilterValue(
                                                                    value="Presentation",
                                                                    relation_type=models.RelationType.EQUALS,
                                                                ),
                                                            ],
                                                        ),
                                                    ],
                                                    facet_filter_sets=[
                                                        models.FacetFilterSet(
                                                            filters=[
                                                                models.FacetFilter(
                                                                    field_name="type",
                                                                    values=[
                                                                        models.FacetFilterValue(
                                                                            value="Spreadsheet",
                                                                            relation_type=models.RelationType.EQUALS,
                                                                        ),
                                                                        models.FacetFilterValue(
                                                                            value="Presentation",
                                                                            relation_type=models.RelationType.EQUALS,
                                                                        ),
                                                                    ],
                                                                ),
                                                            ],
                                                        ),
                                                        models.FacetFilterSet(
                                                            filters=[
                                                                models.FacetFilter(
                                                                    field_name="type",
                                                                    values=[
                                                                        models.FacetFilterValue(
                                                                            value="Spreadsheet",
                                                                            relation_type=models.RelationType.EQUALS,
                                                                        ),
                                                                        models.FacetFilterValue(
                                                                            value="Presentation",
                                                                            relation_type=models.RelationType.EQUALS,
                                                                        ),
                                                                    ],
                                                                ),
                                                            ],
                                                        ),
                                                    ],
                                                    facet_bucket_size=694801,
                                                    auth_tokens=[
                                                        models.AuthToken(
                                                            access_token="123abc",
                                                            datasource="gmail",
                                                            scope="email profile https://www.googleapis.com/auth/gmail.readonly",
                                                            token_type="Bearer",
                                                            auth_user="1",
                                                        ),
                                                    ],
                                                ),
                                                ranges=[],
                                                input_details=models.SearchRequestInputDetails(
                                                    has_copy_paste=True,
                                                ),
                                            ),
                                        ),
                                    ),
                                    meeting=models.Meeting(
                                        attendees=models.CalendarAttendees(
                                            people=[],
                                        ),
                                    ),
                                    collection=models.Collection(
                                        name="<value>",
                                        description="cauliflower pop so",
                                        audience_filters=[
                                            models.FacetFilter(
                                                field_name="type",
                                                values=[
                                                    models.FacetFilterValue(
                                                        value="Spreadsheet",
                                                        relation_type=models.RelationType.EQUALS,
                                                    ),
                                                    models.FacetFilterValue(
                                                        value="Presentation",
                                                        relation_type=models.RelationType.EQUALS,
                                                    ),
                                                ],
                                            ),
                                        ],
                                        id=511700,
                                        items=[],
                                        children=[],
                                    ),
                                    answer_board=models.AnswerBoard(
                                        name="<value>",
                                        description="sour loosely wherever commodity",
                                        audience_filters=[
                                            models.FacetFilter(
                                                field_name="type",
                                                values=[
                                                    models.FacetFilterValue(
                                                        value="Spreadsheet",
                                                        relation_type=models.RelationType.EQUALS,
                                                    ),
                                                    models.FacetFilterValue(
                                                        value="Presentation",
                                                        relation_type=models.RelationType.EQUALS,
                                                    ),
                                                ],
                                            ),
                                        ],
                                        id=51997,
                                    ),
                                    code=models.Code(
                                        repo_name="scio",
                                        file_name="README.md",
                                        lines=[],
                                    ),
                                    related_question=models.RelatedQuestion(),
                                ),
                            ],
                            file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            action=models.ToolInfo(
                                metadata=models.ToolMetadata(
                                    type=models.ToolMetadataType.RETRIEVAL,
                                    name="<value>",
                                    display_name="Gregg.Turner",
                                    display_description="<value>",
                                    object_name='["HR ticket","Email","Chat message"]',
                                ),
                            ),
                        ),
                        models.ChatMessageFragment(
                            structured_results=[
                                models.StructuredResult(),
                                models.StructuredResult(),
                            ],
                            file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            action=models.ToolInfo(
                                metadata=models.ToolMetadata(
                                    type=models.ToolMetadataType.ACTION,
                                    name="<value>",
                                    display_name="Bethel_Blick23",
                                    display_description="<value>",
                                    object_name='["HR ticket","Email","Chat message"]',
                                ),
                            ),
                        ),
                    ],
                ),
                models.ChatMessage(
                    citations=[
                        models.ChatMessageCitation(
                            source_file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            reference_ranges=[
                                models.ReferenceRange(
                                    snippets=[
                                        models.SearchResultSnippet(
                                            snippet="snippet",
                                            mime_type="mimeType",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                    ],
                    fragments=[
                        models.ChatMessageFragment(
                            structured_results=[
                                models.StructuredResult(),
                                models.StructuredResult(),
                                models.StructuredResult(),
                            ],
                            file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            action=models.ToolInfo(
                                metadata=models.ToolMetadata(
                                    type=models.ToolMetadataType.RETRIEVAL,
                                    name="<value>",
                                    display_name="Eloisa_Bode",
                                    display_description="<value>",
                                    object_name='["HR ticket","Email","Chat message"]',
                                ),
                            ),
                        ),
                        models.ChatMessageFragment(
                            structured_results=[
                                models.StructuredResult(),
                                models.StructuredResult(),
                            ],
                            file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            action=models.ToolInfo(
                                metadata=models.ToolMetadata(
                                    type=models.ToolMetadataType.RETRIEVAL,
                                    name="<value>",
                                    display_name="Brandy_Langworth",
                                    display_description="<value>",
                                    object_name='["HR ticket","Email","Chat message"]',
                                ),
                            ),
                        ),
                    ],
                ),
            ],
            backend_time_millis=1100,
        )


def test_agents_listagents():
    test_http_client = create_test_http_client("listagents")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.agents.listagents()
        assert res is not None
        assert res == models.ListAgentsResponse(
            agents=[
                models.AgentResult(
                    agent=models.Agent(
                        author=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            related_documents=[],
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                ],
                                query_suggestions=models.QuerySuggestionList(
                                    suggestions=[],
                                ),
                                invite_info=models.InviteInfo(
                                    invites=[],
                                ),
                                custom_fields=[],
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        last_updated_by=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                    ),
                ),
                models.AgentResult(
                    agent=models.Agent(),
                ),
                models.AgentResult(
                    agent=models.Agent(),
                ),
            ],
        )


def test_agents_getagentinputs():
    test_http_client = create_test_http_client("getagentinputs")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.agents.getagentinputs()
        assert res is not None
        assert res == models.GetAgentInputsResponse()
