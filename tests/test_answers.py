"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from datetime import date
from glean import Glean, models
from glean.utils import parse_datetime
import os
from tests.test_client import create_test_http_client


def test_answers_createanswer():
    test_http_client = create_test_http_client("createanswer")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.answers.create(
            data={
                "question": "Why is the sky blue?",
                "body_text": "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                "audience_filters": [
                    {
                        "field_name": "type",
                        "values": [
                            {
                                "value": "Spreadsheet",
                                "relation_type": models.RelationType.EQUALS,
                            },
                            {
                                "value": "Presentation",
                                "relation_type": models.RelationType.EQUALS,
                            },
                        ],
                    },
                ],
                "added_roles": [
                    models.UserRoleSpecification(
                        person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            related_documents=[],
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[],
                                query_suggestions=models.QuerySuggestionList(
                                    suggestions=[],
                                ),
                                invite_info=models.InviteInfo(
                                    invites=[],
                                ),
                                custom_fields=[],
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        role=models.UserRole.VIEWER,
                    ),
                ],
                "removed_roles": [
                    models.UserRoleSpecification(
                        role=models.UserRole.VIEWER,
                    ),
                    models.UserRoleSpecification(
                        role=models.UserRole.VIEWER,
                    ),
                    models.UserRoleSpecification(
                        role=models.UserRole.VIEWER,
                    ),
                ],
                "roles": [
                    models.UserRoleSpecification(
                        role=models.UserRole.VIEWER,
                    ),
                    models.UserRoleSpecification(
                        role=models.UserRole.VIEWER,
                    ),
                ],
                "combined_answer_text": {
                    "text": "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                },
            }
        )
        assert res is not None
        assert res == models.Answer(
            id=3,
            doc_id="ANSWERS_answer_3",
            question="Why is the sky blue?",
            body_text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
            audience_filters=[
                models.FacetFilter(
                    field_name="type",
                    values=[
                        models.FacetFilterValue(
                            value="Spreadsheet",
                            relation_type=models.RelationType.EQUALS,
                        ),
                        models.FacetFilterValue(
                            value="Presentation",
                            relation_type=models.RelationType.EQUALS,
                        ),
                    ],
                ),
            ],
            added_roles=[],
            removed_roles=[],
            roles=[],
            combined_answer_text=models.StructuredText(
                text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                structured_list=[],
            ),
            likes=models.AnswerLikes(
                liked_by=[],
                liked_by_user=True,
                num_likes=876250,
            ),
            author=models.Person(
                name="George Clooney",
                obfuscated_id="abc123",
                related_documents=[],
                metadata=models.PersonMetadata(
                    type=models.PersonMetadataType.FULL_TIME,
                    title="Actor",
                    department="Movies",
                    email="george@example.com",
                    location="Hollywood, CA",
                    management_chain=[],
                    phone="6505551234",
                    photo_url="https://example.com/george.jpg",
                    reports=[],
                    start_date=date.fromisoformat("2000-01-23"),
                    datasource_profile=[],
                    query_suggestions=models.QuerySuggestionList(
                        suggestions=[],
                    ),
                    invite_info=models.InviteInfo(
                        invites=[],
                    ),
                    custom_fields=[],
                    badges=[],
                ),
            ),
            updated_by=models.Person(
                name="George Clooney",
                obfuscated_id="abc123",
            ),
            verification=models.Verification(
                state=models.State.VERIFIED,
                metadata=models.VerificationMetadata(
                    last_verifier=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    document=models.Document(
                        metadata=models.DocumentMetadata(
                            datasource="datasource",
                            object_type="Feature Request",
                            container="container",
                            parent_id="JIRA_EN-1337",
                            mime_type="mimeType",
                            document_id="documentId",
                            create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                            update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                            owner=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            mentioned_people=[],
                            components=[
                                "Backend",
                                "Networking",
                            ],
                            status='["Done"]',
                            pins=[],
                            assigned_to=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            collections=[],
                            interactions=models.DocumentInteractions(
                                reacts=[],
                                shares=[],
                            ),
                            shortcuts=[],
                            custom_data={},
                            contact_person=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            ancestors=[],
                        ),
                    ),
                    reminders=[],
                    last_reminder=models.Reminder(
                        assignee=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        requestor=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        remind_at=949753,
                    ),
                    candidate_verifiers=[],
                ),
            ),
            board=models.AnswerBoard(
                name="<value>",
                description="aha amid lest contravene how agile in unblinking whereas",
                audience_filters=[],
                id=53123,
                creator=models.Person(
                    name="George Clooney",
                    obfuscated_id="abc123",
                ),
            ),
            source_document=models.Document(),
        )


def test_answers_deleteanswer():
    test_http_client = create_test_http_client("deleteanswer")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.client.answers.delete(id=3, doc_id="ANSWERS_answer_3")


def test_answers_editanswer():
    test_http_client = create_test_http_client("editanswer")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.answers.edit(
            id=3,
            doc_id="ANSWERS_answer_3",
            question="Why is the sky blue?",
            body_text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
            audience_filters=[
                {
                    "field_name": "type",
                    "values": [
                        {
                            "value": "Spreadsheet",
                            "relation_type": models.RelationType.EQUALS,
                        },
                        {
                            "value": "Presentation",
                            "relation_type": models.RelationType.EQUALS,
                        },
                    ],
                },
            ],
            added_roles=[
                models.UserRoleSpecification(
                    person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        related_documents=[],
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[],
                            query_suggestions=models.QuerySuggestionList(
                                suggestions=[],
                            ),
                            invite_info=models.InviteInfo(
                                invites=[],
                            ),
                            custom_fields=[],
                            badges=[
                                models.Badge(
                                    key="deployment_name_new_hire",
                                    display_name="New hire",
                                    icon_config=models.IconConfig(
                                        color="#343CED",
                                        key="person_icon",
                                        icon_type=models.IconType.GLYPH,
                                        name="user",
                                    ),
                                ),
                            ],
                        ),
                    ),
                    role=models.UserRole.VIEWER,
                ),
                models.UserRoleSpecification(
                    role=models.UserRole.VIEWER,
                ),
            ],
            removed_roles=[
                models.UserRoleSpecification(
                    person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        related_documents=[],
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            management_chain=[],
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            reports=[],
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[],
                            query_suggestions=models.QuerySuggestionList(
                                suggestions=[],
                            ),
                            invite_info=models.InviteInfo(
                                invites=[],
                            ),
                            custom_fields=[],
                            badges=[],
                        ),
                    ),
                    role=models.UserRole.VIEWER,
                ),
                models.UserRoleSpecification(
                    role=models.UserRole.VIEWER,
                ),
            ],
            roles=[
                models.UserRoleSpecification(
                    person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        related_documents=[],
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            management_chain=[],
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            reports=[],
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[],
                            query_suggestions=models.QuerySuggestionList(
                                suggestions=[],
                            ),
                            invite_info=models.InviteInfo(
                                invites=[],
                            ),
                            custom_fields=[],
                            badges=[],
                        ),
                    ),
                    role=models.UserRole.VIEWER,
                ),
            ],
            combined_answer_text={
                "text": "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
            },
        )
        assert res is not None
        assert res == models.Answer(
            id=3,
            doc_id="ANSWERS_answer_3",
            question="Why is the sky blue?",
            body_text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
            audience_filters=[
                models.FacetFilter(
                    field_name="type",
                    values=[
                        models.FacetFilterValue(
                            value="Spreadsheet",
                            relation_type=models.RelationType.EQUALS,
                        ),
                        models.FacetFilterValue(
                            value="Presentation",
                            relation_type=models.RelationType.EQUALS,
                        ),
                    ],
                ),
            ],
            added_roles=[],
            removed_roles=[],
            roles=[],
            combined_answer_text=models.StructuredText(
                text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                structured_list=[],
            ),
            likes=models.AnswerLikes(
                liked_by=[],
                liked_by_user=True,
                num_likes=876250,
            ),
            author=models.Person(
                name="George Clooney",
                obfuscated_id="abc123",
                related_documents=[],
                metadata=models.PersonMetadata(
                    type=models.PersonMetadataType.FULL_TIME,
                    title="Actor",
                    department="Movies",
                    email="george@example.com",
                    location="Hollywood, CA",
                    management_chain=[],
                    phone="6505551234",
                    photo_url="https://example.com/george.jpg",
                    reports=[],
                    start_date=date.fromisoformat("2000-01-23"),
                    datasource_profile=[],
                    query_suggestions=models.QuerySuggestionList(
                        suggestions=[],
                    ),
                    invite_info=models.InviteInfo(
                        invites=[],
                    ),
                    custom_fields=[],
                    badges=[],
                ),
            ),
            updated_by=models.Person(
                name="George Clooney",
                obfuscated_id="abc123",
            ),
            verification=models.Verification(
                state=models.State.VERIFIED,
                metadata=models.VerificationMetadata(
                    last_verifier=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    document=models.Document(
                        metadata=models.DocumentMetadata(
                            datasource="datasource",
                            object_type="Feature Request",
                            container="container",
                            parent_id="JIRA_EN-1337",
                            mime_type="mimeType",
                            document_id="documentId",
                            create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                            update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                            owner=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            mentioned_people=[],
                            components=[
                                "Backend",
                                "Networking",
                            ],
                            status='["Done"]',
                            pins=[],
                            assigned_to=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            collections=[],
                            interactions=models.DocumentInteractions(
                                reacts=[],
                                shares=[],
                            ),
                            shortcuts=[],
                            custom_data={},
                            contact_person=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            ancestors=[],
                        ),
                    ),
                    reminders=[],
                    last_reminder=models.Reminder(
                        assignee=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        requestor=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        remind_at=949753,
                    ),
                    candidate_verifiers=[],
                ),
            ),
            board=models.AnswerBoard(
                name="<value>",
                description="aha amid lest contravene how agile in unblinking whereas",
                audience_filters=[],
                id=53123,
                creator=models.Person(
                    name="George Clooney",
                    obfuscated_id="abc123",
                ),
            ),
            source_document=models.Document(),
        )


def test_answers_getanswer():
    test_http_client = create_test_http_client("getanswer")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.answers.get(id=3, doc_id="ANSWERS_answer_3")
        assert res is not None
        assert res == models.GetAnswerResponse(
            answer_result=models.AnswerResult(
                answer=models.Answer(
                    id=3,
                    doc_id="ANSWERS_answer_3",
                    question="Why is the sky blue?",
                    body_text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                    audience_filters=[
                        models.FacetFilter(
                            field_name="type",
                            values=[
                                models.FacetFilterValue(
                                    value="Spreadsheet",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                                models.FacetFilterValue(
                                    value="Presentation",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                            ],
                        ),
                    ],
                    added_roles=[],
                    removed_roles=[],
                    roles=[],
                    combined_answer_text=models.StructuredText(
                        text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                        structured_list=[],
                    ),
                    likes=models.AnswerLikes(
                        liked_by=[],
                        liked_by_user=True,
                        num_likes=876250,
                    ),
                    author=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        related_documents=[],
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            management_chain=[],
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            reports=[],
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[],
                            query_suggestions=models.QuerySuggestionList(
                                suggestions=[],
                            ),
                            invite_info=models.InviteInfo(
                                invites=[],
                            ),
                            custom_fields=[],
                            badges=[],
                        ),
                    ),
                    updated_by=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    verification=models.Verification(
                        state=models.State.VERIFIED,
                        metadata=models.VerificationMetadata(
                            last_verifier=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            document=models.Document(
                                metadata=models.DocumentMetadata(
                                    datasource="datasource",
                                    object_type="Feature Request",
                                    container="container",
                                    parent_id="JIRA_EN-1337",
                                    mime_type="mimeType",
                                    document_id="documentId",
                                    create_time=parse_datetime(
                                        "2000-01-23T04:56:07.000Z"
                                    ),
                                    update_time=parse_datetime(
                                        "2000-01-23T04:56:07.000Z"
                                    ),
                                    owner=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    mentioned_people=[],
                                    components=[
                                        "Backend",
                                        "Networking",
                                    ],
                                    status='["Done"]',
                                    pins=[],
                                    assigned_to=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    collections=[],
                                    interactions=models.DocumentInteractions(
                                        reacts=[],
                                        shares=[],
                                    ),
                                    shortcuts=[],
                                    custom_data={},
                                    contact_person=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    ancestors=[],
                                ),
                            ),
                            reminders=[],
                            last_reminder=models.Reminder(
                                assignee=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                requestor=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                remind_at=949753,
                            ),
                            candidate_verifiers=[],
                        ),
                    ),
                    board=models.AnswerBoard(
                        name="<value>",
                        description="aha amid lest contravene how agile in unblinking whereas",
                        audience_filters=[],
                        id=53123,
                        creator=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                    ),
                    source_document=models.Document(),
                ),
            ),
            error=models.GetAnswerError(
                answer_author=models.Person(
                    name="George Clooney",
                    obfuscated_id="abc123",
                ),
            ),
        )


def test_answers_listanswers():
    test_http_client = create_test_http_client("listanswers")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.answers.list()
        assert res is not None
        assert res == models.ListAnswersResponse(
            answer_results=[],
        )


def test_answers_previewanswer():
    test_http_client = create_test_http_client("previewanswer")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.answers.preview(
            text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light."
        )
        assert res is not None
        assert res == models.PreviewStructuredTextResponse(
            structured_text=models.StructuredText(
                text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                structured_list=[],
            ),
            combined_answer_text=models.StructuredText(
                text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
            ),
        )


def test_answers_previewanswerdraft():
    test_http_client = create_test_http_client("previewanswerdraft")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.answers.preview_draft(
            draft=models.UgcDraft(
                announcement=models.AnnouncementMutableProperties(
                    body=models.StructuredText(
                        text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                        structured_list=[],
                    ),
                    audience_filters=[
                        models.FacetFilter(
                            field_name="type",
                            values=[
                                models.FacetFilterValue(
                                    value="Spreadsheet",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                                models.FacetFilterValue(
                                    value="Presentation",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                            ],
                        ),
                    ],
                ),
                answer=models.AnswerMutableProperties(
                    question="Why is the sky blue?",
                    body_text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                    audience_filters=[],
                    added_roles=[
                        models.UserRoleSpecification(
                            person=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                                related_documents=[],
                                metadata=models.PersonMetadata(
                                    type=models.PersonMetadataType.FULL_TIME,
                                    title="Actor",
                                    department="Movies",
                                    email="george@example.com",
                                    location="Hollywood, CA",
                                    management_chain=[],
                                    phone="6505551234",
                                    photo_url="https://example.com/george.jpg",
                                    reports=[],
                                    start_date=date.fromisoformat("2000-01-23"),
                                    datasource_profile=[],
                                    query_suggestions=models.QuerySuggestionList(
                                        suggestions=[],
                                    ),
                                    invite_info=models.InviteInfo(
                                        invites=[],
                                    ),
                                    custom_fields=[],
                                    badges=[],
                                ),
                            ),
                            role=models.UserRole.VIEWER,
                        ),
                    ],
                    removed_roles=[
                        models.UserRoleSpecification(
                            role=models.UserRole.VIEWER,
                        ),
                    ],
                    roles=[
                        models.UserRoleSpecification(
                            role=models.UserRole.VIEWER,
                        ),
                        models.UserRoleSpecification(
                            role=models.UserRole.VIEWER,
                        ),
                        models.UserRoleSpecification(
                            role=models.UserRole.VIEWER,
                        ),
                    ],
                ),
            )
        )
        assert res is not None
        assert res == models.PreviewUgcResponse(
            announcement=models.Announcement(
                body=models.StructuredText(
                    text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                    structured_list=[],
                ),
                audience_filters=[
                    models.FacetFilter(
                        field_name="type",
                        values=[
                            models.FacetFilterValue(
                                value="Spreadsheet",
                                relation_type=models.RelationType.EQUALS,
                            ),
                            models.FacetFilterValue(
                                value="Presentation",
                                relation_type=models.RelationType.EQUALS,
                            ),
                        ],
                    ),
                ],
                draft_id=342,
                author=models.Person(
                    name="George Clooney",
                    obfuscated_id="abc123",
                    related_documents=[],
                    metadata=models.PersonMetadata(
                        type=models.PersonMetadataType.FULL_TIME,
                        title="Actor",
                        department="Movies",
                        email="george@example.com",
                        location="Hollywood, CA",
                        management_chain=[],
                        phone="6505551234",
                        photo_url="https://example.com/george.jpg",
                        reports=[],
                        start_date=date.fromisoformat("2000-01-23"),
                        datasource_profile=[],
                        query_suggestions=models.QuerySuggestionList(
                            suggestions=[],
                        ),
                        invite_info=models.InviteInfo(
                            invites=[],
                        ),
                        custom_fields=[],
                        badges=[],
                    ),
                ),
                updated_by=models.Person(
                    name="George Clooney",
                    obfuscated_id="abc123",
                ),
                source_document=models.Document(
                    metadata=models.DocumentMetadata(
                        datasource="datasource",
                        object_type="Feature Request",
                        container="container",
                        parent_id="JIRA_EN-1337",
                        mime_type="mimeType",
                        document_id="documentId",
                        create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        owner=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        mentioned_people=[],
                        components=[
                            "Backend",
                            "Networking",
                        ],
                        status='["Done"]',
                        pins=[],
                        assigned_to=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        collections=[],
                        interactions=models.DocumentInteractions(
                            reacts=[],
                            shares=[],
                        ),
                        verification=models.Verification(
                            state=models.State.VERIFIED,
                            metadata=models.VerificationMetadata(
                                last_verifier=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                reminders=[],
                                last_reminder=models.Reminder(
                                    assignee=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    requestor=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    remind_at=949753,
                                ),
                                candidate_verifiers=[],
                            ),
                        ),
                        shortcuts=[],
                        custom_data={},
                        contact_person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        ancestors=[],
                    ),
                ),
            ),
            answer=models.Answer(
                id=3,
                doc_id="ANSWERS_answer_3",
                question="Why is the sky blue?",
                body_text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                audience_filters=[],
                added_roles=[],
                removed_roles=[],
                roles=[],
                combined_answer_text=models.StructuredText(
                    text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                ),
                likes=models.AnswerLikes(
                    liked_by=[],
                    liked_by_user=True,
                    num_likes=876250,
                ),
                board=models.AnswerBoard(
                    name="<value>",
                    description="aha amid lest contravene how agile in unblinking whereas",
                    audience_filters=[],
                    id=53123,
                    creator=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                ),
            ),
        )


def test_answers_updateanswerlikes():
    test_http_client = create_test_http_client("updateanswerlikes")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.answers.update_likes(
            answer_id=3,
            action=models.UpdateAnswerLikesRequestAction.LIKE,
            answer_doc_id="ANSWERS_answer_3",
        )
        assert res is not None
        assert res == models.UpdateAnswerLikesResponse(
            likes=models.AnswerLikes(
                liked_by=[],
                liked_by_user=True,
                num_likes=876250,
            ),
        )


def test_answers_createanswerboard():
    test_http_client = create_test_http_client("createanswerboard")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.answers.create_board(
            name="<value>",
            added_roles=[
                models.UserRoleSpecification(
                    person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        related_documents=[],
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[],
                            query_suggestions=models.QuerySuggestionList(
                                suggestions=[],
                            ),
                            invite_info=models.InviteInfo(
                                invites=[],
                            ),
                            custom_fields=[],
                            badges=[
                                models.Badge(
                                    key="deployment_name_new_hire",
                                    display_name="New hire",
                                    icon_config=models.IconConfig(
                                        color="#343CED",
                                        key="person_icon",
                                        icon_type=models.IconType.GLYPH,
                                        name="user",
                                    ),
                                ),
                            ],
                        ),
                    ),
                    role=models.UserRole.VIEWER,
                ),
            ],
            removed_roles=[
                models.UserRoleSpecification(
                    person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        related_documents=[],
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            management_chain=[],
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            reports=[],
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[],
                            query_suggestions=models.QuerySuggestionList(
                                suggestions=[],
                            ),
                            invite_info=models.InviteInfo(
                                invites=[],
                            ),
                            custom_fields=[],
                            badges=[],
                        ),
                    ),
                    role=models.UserRole.VIEWER,
                ),
                models.UserRoleSpecification(
                    role=models.UserRole.VIEWER,
                ),
                models.UserRoleSpecification(
                    role=models.UserRole.VIEWER,
                ),
            ],
            audience_filters=[
                {
                    "field_name": "type",
                    "values": [
                        {
                            "value": "Spreadsheet",
                            "relation_type": models.RelationType.EQUALS,
                        },
                        {
                            "value": "Presentation",
                            "relation_type": models.RelationType.EQUALS,
                        },
                    ],
                },
            ],
        )
        assert res is not None
        assert res == models.CreateAnswerBoardResponse(
            board_result=models.AnswerBoardResult(
                board=models.AnswerBoard(
                    name="<value>",
                    description="aha amid lest contravene how agile in unblinking whereas",
                    added_roles=[],
                    removed_roles=[],
                    audience_filters=[
                        models.FacetFilter(
                            field_name="type",
                            values=[
                                models.FacetFilterValue(
                                    value="Spreadsheet",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                                models.FacetFilterValue(
                                    value="Presentation",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                            ],
                        ),
                    ],
                    id=53123,
                    creator=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        related_documents=[],
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            management_chain=[],
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            reports=[],
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[],
                            query_suggestions=models.QuerySuggestionList(
                                suggestions=[],
                            ),
                            invite_info=models.InviteInfo(
                                invites=[],
                            ),
                            custom_fields=[],
                            badges=[],
                        ),
                    ),
                    updated_by=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    roles=[],
                ),
            ),
        )


def test_answers_deleteanswerboards():
    test_http_client = create_test_http_client("deleteanswerboards")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.answers.delete_board(
            ids=[
                465305,
                429422,
                392092,
            ]
        )
        assert res is not None
        assert res == models.DeleteAnswerBoardsResponse()


def test_answers_editanswerboard():
    test_http_client = create_test_http_client("editanswerboard")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.answers.update_board(
            name="<value>",
            id=735663,
            added_roles=[
                models.UserRoleSpecification(
                    person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        related_documents=[],
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[],
                            query_suggestions=models.QuerySuggestionList(
                                suggestions=[],
                            ),
                            invite_info=models.InviteInfo(
                                invites=[],
                            ),
                            custom_fields=[],
                            badges=[
                                models.Badge(
                                    key="deployment_name_new_hire",
                                    display_name="New hire",
                                    icon_config=models.IconConfig(
                                        color="#343CED",
                                        key="person_icon",
                                        icon_type=models.IconType.GLYPH,
                                        name="user",
                                    ),
                                ),
                            ],
                        ),
                    ),
                    role=models.UserRole.VIEWER,
                ),
                models.UserRoleSpecification(
                    role=models.UserRole.VIEWER,
                ),
                models.UserRoleSpecification(
                    role=models.UserRole.VIEWER,
                ),
            ],
            removed_roles=[
                models.UserRoleSpecification(
                    person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        related_documents=[],
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            management_chain=[],
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            reports=[],
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[],
                            query_suggestions=models.QuerySuggestionList(
                                suggestions=[],
                            ),
                            invite_info=models.InviteInfo(
                                invites=[],
                            ),
                            custom_fields=[],
                            badges=[],
                        ),
                    ),
                    role=models.UserRole.VIEWER,
                ),
                models.UserRoleSpecification(
                    role=models.UserRole.VIEWER,
                ),
                models.UserRoleSpecification(
                    role=models.UserRole.VIEWER,
                ),
            ],
            audience_filters=[
                {
                    "field_name": "type",
                    "values": [
                        {
                            "value": "Spreadsheet",
                            "relation_type": models.RelationType.EQUALS,
                        },
                        {
                            "value": "Presentation",
                            "relation_type": models.RelationType.EQUALS,
                        },
                    ],
                },
            ],
        )
        assert res is not None
        assert res == models.EditAnswerBoardResponse(
            board_result=models.AnswerBoardResult(
                board=models.AnswerBoard(
                    name="<value>",
                    description="aha amid lest contravene how agile in unblinking whereas",
                    added_roles=[],
                    removed_roles=[],
                    audience_filters=[
                        models.FacetFilter(
                            field_name="type",
                            values=[
                                models.FacetFilterValue(
                                    value="Spreadsheet",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                                models.FacetFilterValue(
                                    value="Presentation",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                            ],
                        ),
                    ],
                    id=53123,
                    creator=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        related_documents=[],
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            management_chain=[],
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            reports=[],
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[],
                            query_suggestions=models.QuerySuggestionList(
                                suggestions=[],
                            ),
                            invite_info=models.InviteInfo(
                                invites=[],
                            ),
                            custom_fields=[],
                            badges=[],
                        ),
                    ),
                    updated_by=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    roles=[],
                ),
            ),
        )


def test_answers_getanswerboard():
    test_http_client = create_test_http_client("getanswerboard")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.answers.get_board(id=101229)
        assert res is not None
        assert res == models.GetAnswerBoardResponse(
            board_result=models.AnswerBoardResult(
                board=models.AnswerBoard(
                    name="<value>",
                    description="aha amid lest contravene how agile in unblinking whereas",
                    added_roles=[],
                    removed_roles=[],
                    audience_filters=[
                        models.FacetFilter(
                            field_name="type",
                            values=[
                                models.FacetFilterValue(
                                    value="Spreadsheet",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                                models.FacetFilterValue(
                                    value="Presentation",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                            ],
                        ),
                    ],
                    id=53123,
                    creator=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        related_documents=[],
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            management_chain=[],
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            reports=[],
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[],
                            query_suggestions=models.QuerySuggestionList(
                                suggestions=[],
                            ),
                            invite_info=models.InviteInfo(
                                invites=[],
                            ),
                            custom_fields=[],
                            badges=[],
                        ),
                    ),
                    updated_by=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    roles=[],
                ),
            ),
        )


def test_answers_listanswerboards():
    test_http_client = create_test_http_client("listanswerboards")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.answers.list_boards()
        assert res is not None
        assert res == models.ListAnswerBoardsResponse(
            board_results=[
                models.AnswerBoardResult(
                    board=models.AnswerBoard(
                        name="<value>",
                        description="aha amid lest contravene how agile in unblinking whereas",
                        added_roles=[],
                        removed_roles=[],
                        audience_filters=[
                            models.FacetFilter(
                                field_name="type",
                                values=[
                                    models.FacetFilterValue(
                                        value="Spreadsheet",
                                        relation_type=models.RelationType.EQUALS,
                                    ),
                                    models.FacetFilterValue(
                                        value="Presentation",
                                        relation_type=models.RelationType.EQUALS,
                                    ),
                                ],
                            ),
                        ],
                        id=53123,
                        creator=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            related_documents=[],
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                management_chain=[],
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                reports=[],
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[],
                                query_suggestions=models.QuerySuggestionList(
                                    suggestions=[],
                                ),
                                invite_info=models.InviteInfo(
                                    invites=[],
                                ),
                                custom_fields=[],
                                badges=[],
                            ),
                        ),
                        updated_by=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        roles=[],
                    ),
                ),
                models.AnswerBoardResult(
                    board=models.AnswerBoard(
                        name="<value>",
                        description="aha amid lest contravene how agile in unblinking whereas",
                        audience_filters=[],
                        id=53123,
                    ),
                ),
            ],
        )
