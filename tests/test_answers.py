"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from datetime import date
from glean import Glean, models
from glean.utils import parse_datetime
import os
import pytest
from tests.test_client import create_test_http_client


def test_answers_createanswer():
    test_http_client = create_test_http_client("createanswer")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            api_token=os.getenv("GLEAN_API_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.answers.create(
            data={
                "question": "Why is the sky blue?",
                "body_text": "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                "audience_filters": [
                    {
                        "field_name": "type",
                        "values": [
                            {
                                "value": "Spreadsheet",
                                "relation_type": models.RelationType.EQUALS,
                            },
                            {
                                "value": "Presentation",
                                "relation_type": models.RelationType.EQUALS,
                            },
                        ],
                    },
                ],
                "added_roles": [
                    models.UserRoleSpecification(
                        person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            related_documents=[
                                models.RelatedDocuments(
                                    query_suggestion=models.QuerySuggestion(
                                        query="app:github type:pull author:mortimer",
                                        search_provider_info=models.SearchProviderInfo(
                                            name="Google",
                                            search_link_url_template="https://www.google.com/search?q={query}&hl=en",
                                        ),
                                        label="Mortimer's PRs",
                                        datasource="github",
                                        request_options=models.SearchRequestOptions(
                                            datasource_filter="JIRA",
                                            datasources_filter=[
                                                "JIRA",
                                            ],
                                            query_overrides_facet_filters=True,
                                            facet_filters=[
                                                models.FacetFilter(
                                                    field_name="type",
                                                    values=[
                                                        models.FacetFilterValue(
                                                            value="Spreadsheet",
                                                            relation_type=models.RelationType.EQUALS,
                                                        ),
                                                        models.FacetFilterValue(
                                                            value="Presentation",
                                                            relation_type=models.RelationType.EQUALS,
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            facet_filter_sets=[
                                                models.FacetFilterSet(
                                                    filters=[
                                                        models.FacetFilter(
                                                            field_name="type",
                                                            values=[
                                                                models.FacetFilterValue(
                                                                    value="Spreadsheet",
                                                                    relation_type=models.RelationType.EQUALS,
                                                                ),
                                                                models.FacetFilterValue(
                                                                    value="Presentation",
                                                                    relation_type=models.RelationType.EQUALS,
                                                                ),
                                                            ],
                                                        ),
                                                    ],
                                                ),
                                                models.FacetFilterSet(
                                                    filters=[
                                                        models.FacetFilter(
                                                            field_name="type",
                                                            values=[
                                                                models.FacetFilterValue(
                                                                    value="Spreadsheet",
                                                                    relation_type=models.RelationType.EQUALS,
                                                                ),
                                                                models.FacetFilterValue(
                                                                    value="Presentation",
                                                                    relation_type=models.RelationType.EQUALS,
                                                                ),
                                                            ],
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            facet_bucket_size=134365,
                                            auth_tokens=[
                                                models.AuthToken(
                                                    access_token="123abc",
                                                    datasource="gmail",
                                                    scope="email profile https://www.googleapis.com/auth/gmail.readonly",
                                                    token_type="Bearer",
                                                    auth_user="1",
                                                ),
                                            ],
                                        ),
                                        ranges=[
                                            models.TextRange(
                                                start_index=796474,
                                                document=models.Document(
                                                    metadata=models.DocumentMetadata(
                                                        datasource="datasource",
                                                        object_type="Feature Request",
                                                        container="container",
                                                        parent_id="JIRA_EN-1337",
                                                        mime_type="mimeType",
                                                        document_id="documentId",
                                                        create_time=parse_datetime(
                                                            "2000-01-23T04:56:07.000Z"
                                                        ),
                                                        update_time=parse_datetime(
                                                            "2000-01-23T04:56:07.000Z"
                                                        ),
                                                        components=[
                                                            "Backend",
                                                            "Networking",
                                                        ],
                                                        status='["Done"]',
                                                        pins=[
                                                            models.PinDocument(
                                                                audience_filters=[
                                                                    models.FacetFilter(
                                                                        field_name="type",
                                                                        values=[
                                                                            models.FacetFilterValue(
                                                                                value="Spreadsheet",
                                                                                relation_type=models.RelationType.EQUALS,
                                                                            ),
                                                                            models.FacetFilterValue(
                                                                                value="Presentation",
                                                                                relation_type=models.RelationType.EQUALS,
                                                                            ),
                                                                        ],
                                                                    ),
                                                                ],
                                                                document_id="<id>",
                                                            ),
                                                            models.PinDocument(
                                                                audience_filters=[
                                                                    models.FacetFilter(
                                                                        field_name="type",
                                                                        values=[
                                                                            models.FacetFilterValue(
                                                                                value="Spreadsheet",
                                                                                relation_type=models.RelationType.EQUALS,
                                                                            ),
                                                                            models.FacetFilterValue(
                                                                                value="Presentation",
                                                                                relation_type=models.RelationType.EQUALS,
                                                                            ),
                                                                        ],
                                                                    ),
                                                                ],
                                                                document_id="<id>",
                                                            ),
                                                            models.PinDocument(
                                                                audience_filters=[
                                                                    models.FacetFilter(
                                                                        field_name="type",
                                                                        values=[
                                                                            models.FacetFilterValue(
                                                                                value="Spreadsheet",
                                                                                relation_type=models.RelationType.EQUALS,
                                                                            ),
                                                                            models.FacetFilterValue(
                                                                                value="Presentation",
                                                                                relation_type=models.RelationType.EQUALS,
                                                                            ),
                                                                        ],
                                                                    ),
                                                                ],
                                                                document_id="<id>",
                                                            ),
                                                        ],
                                                        collections=[
                                                            models.Collection(
                                                                name="<value>",
                                                                description="fumigate convection though zowie",
                                                                audience_filters=[
                                                                    models.FacetFilter(
                                                                        field_name="type",
                                                                        values=[
                                                                            models.FacetFilterValue(
                                                                                value="Spreadsheet",
                                                                                relation_type=models.RelationType.EQUALS,
                                                                            ),
                                                                            models.FacetFilterValue(
                                                                                value="Presentation",
                                                                                relation_type=models.RelationType.EQUALS,
                                                                            ),
                                                                        ],
                                                                    ),
                                                                ],
                                                                id=496323,
                                                                items=[
                                                                    models.CollectionItem(
                                                                        collection_id=782367,
                                                                        item_type=models.CollectionItemItemType.DOCUMENT,
                                                                    ),
                                                                ],
                                                            ),
                                                        ],
                                                        interactions=models.DocumentInteractions(
                                                            reacts=[
                                                                models.Reaction(),
                                                                models.Reaction(),
                                                                models.Reaction(),
                                                            ],
                                                            shares=[
                                                                models.Share(
                                                                    num_days_ago=219974,
                                                                ),
                                                                models.Share(
                                                                    num_days_ago=449221,
                                                                ),
                                                                models.Share(
                                                                    num_days_ago=427887,
                                                                ),
                                                            ],
                                                        ),
                                                        verification=models.Verification(
                                                            state=models.State.VERIFIED,
                                                            metadata=models.VerificationMetadata(
                                                                reminders=[
                                                                    models.Reminder(
                                                                        assignee=models.Person(
                                                                            name="George Clooney",
                                                                            obfuscated_id="abc123",
                                                                        ),
                                                                        remind_at=491427,
                                                                    ),
                                                                ],
                                                                last_reminder=models.Reminder(
                                                                    assignee=models.Person(
                                                                        name="George Clooney",
                                                                        obfuscated_id="abc123",
                                                                    ),
                                                                    remind_at=490420,
                                                                ),
                                                            ),
                                                        ),
                                                        custom_data={
                                                            "someCustomField": models.CustomDataValue(),
                                                        },
                                                    ),
                                                ),
                                            ),
                                        ],
                                        input_details=models.SearchRequestInputDetails(
                                            has_copy_paste=True,
                                        ),
                                    ),
                                    results=[
                                        models.SearchResult(
                                            title="title",
                                            url="https://example.com/foo/bar",
                                            native_app_url="slack://foo/bar",
                                            snippets=[
                                                models.SearchResultSnippet(
                                                    snippet="snippet",
                                                    mime_type="mimeType",
                                                ),
                                            ],
                                        ),
                                    ],
                                ),
                                models.RelatedDocuments(
                                    query_suggestion=models.QuerySuggestion(
                                        query="app:github type:pull author:mortimer",
                                        search_provider_info=models.SearchProviderInfo(
                                            name="Google",
                                            search_link_url_template="https://www.google.com/search?q={query}&hl=en",
                                        ),
                                        label="Mortimer's PRs",
                                        datasource="github",
                                        request_options=models.SearchRequestOptions(
                                            datasource_filter="JIRA",
                                            datasources_filter=[
                                                "JIRA",
                                            ],
                                            query_overrides_facet_filters=True,
                                            facet_filters=[
                                                models.FacetFilter(
                                                    field_name="type",
                                                    values=[
                                                        models.FacetFilterValue(
                                                            value="Spreadsheet",
                                                            relation_type=models.RelationType.EQUALS,
                                                        ),
                                                        models.FacetFilterValue(
                                                            value="Presentation",
                                                            relation_type=models.RelationType.EQUALS,
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            facet_filter_sets=[
                                                models.FacetFilterSet(
                                                    filters=[
                                                        models.FacetFilter(
                                                            field_name="type",
                                                            values=[
                                                                models.FacetFilterValue(
                                                                    value="Spreadsheet",
                                                                    relation_type=models.RelationType.EQUALS,
                                                                ),
                                                                models.FacetFilterValue(
                                                                    value="Presentation",
                                                                    relation_type=models.RelationType.EQUALS,
                                                                ),
                                                            ],
                                                        ),
                                                    ],
                                                ),
                                                models.FacetFilterSet(
                                                    filters=[
                                                        models.FacetFilter(
                                                            field_name="type",
                                                            values=[
                                                                models.FacetFilterValue(
                                                                    value="Spreadsheet",
                                                                    relation_type=models.RelationType.EQUALS,
                                                                ),
                                                                models.FacetFilterValue(
                                                                    value="Presentation",
                                                                    relation_type=models.RelationType.EQUALS,
                                                                ),
                                                            ],
                                                        ),
                                                    ],
                                                ),
                                                models.FacetFilterSet(
                                                    filters=[
                                                        models.FacetFilter(
                                                            field_name="type",
                                                            values=[
                                                                models.FacetFilterValue(
                                                                    value="Spreadsheet",
                                                                    relation_type=models.RelationType.EQUALS,
                                                                ),
                                                                models.FacetFilterValue(
                                                                    value="Presentation",
                                                                    relation_type=models.RelationType.EQUALS,
                                                                ),
                                                            ],
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            facet_bucket_size=45416,
                                            auth_tokens=[
                                                models.AuthToken(
                                                    access_token="123abc",
                                                    datasource="gmail",
                                                    scope="email profile https://www.googleapis.com/auth/gmail.readonly",
                                                    token_type="Bearer",
                                                    auth_user="1",
                                                ),
                                            ],
                                        ),
                                        input_details=models.SearchRequestInputDetails(
                                            has_copy_paste=True,
                                        ),
                                    ),
                                ),
                            ],
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                ],
                                query_suggestions=models.QuerySuggestionList(
                                    suggestions=[
                                        models.QuerySuggestion(
                                            query="app:github type:pull author:mortimer",
                                            label="Mortimer's PRs",
                                            datasource="github",
                                        ),
                                    ],
                                ),
                                invite_info=models.InviteInfo(
                                    invites=[
                                        models.ChannelInviteInfo(),
                                    ],
                                ),
                                custom_fields=[
                                    models.CustomFieldData(
                                        label="<value>",
                                        values=[
                                            models.CustomFieldValueStr(),
                                            models.CustomFieldValueStr(),
                                        ],
                                    ),
                                    models.CustomFieldData(
                                        label="<value>",
                                        values=[],
                                    ),
                                ],
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        role=models.UserRole.OWNER,
                    ),
                    models.UserRoleSpecification(
                        person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                ],
                                query_suggestions=models.QuerySuggestionList(),
                                invite_info=models.InviteInfo(),
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        role=models.UserRole.VERIFIER,
                    ),
                ],
                "removed_roles": [
                    models.UserRoleSpecification(
                        person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                ],
                                query_suggestions=models.QuerySuggestionList(),
                                invite_info=models.InviteInfo(),
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        role=models.UserRole.VERIFIER,
                    ),
                    models.UserRoleSpecification(
                        person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                ],
                                query_suggestions=models.QuerySuggestionList(),
                                invite_info=models.InviteInfo(),
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        role=models.UserRole.ANSWER_MODERATOR,
                    ),
                    models.UserRoleSpecification(
                        person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                ],
                                query_suggestions=models.QuerySuggestionList(),
                                invite_info=models.InviteInfo(),
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        role=models.UserRole.OWNER,
                    ),
                ],
                "roles": [
                    models.UserRoleSpecification(
                        person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                ],
                                query_suggestions=models.QuerySuggestionList(),
                                invite_info=models.InviteInfo(),
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        role=models.UserRole.ANSWER_MODERATOR,
                    ),
                    models.UserRoleSpecification(
                        person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                ],
                                query_suggestions=models.QuerySuggestionList(),
                                invite_info=models.InviteInfo(),
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        role=models.UserRole.OWNER,
                    ),
                    models.UserRoleSpecification(
                        person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                    models.DatasourceProfile(
                                        datasource="github",
                                        handle="<value>",
                                    ),
                                ],
                                query_suggestions=models.QuerySuggestionList(),
                                invite_info=models.InviteInfo(),
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        role=models.UserRole.VERIFIER,
                    ),
                ],
                "combined_answer_text": {
                    "text": "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                },
            }
        )
        assert res is not None


def test_answers_deleteanswer():
    test_http_client = create_test_http_client("deleteanswer")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            api_token=os.getenv("GLEAN_API_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        g_client.client.answers.delete(id=3, doc_id="ANSWERS_answer_3")


def test_answers_editanswer():
    test_http_client = create_test_http_client("editanswer")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            api_token=os.getenv("GLEAN_API_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.answers.update(
            id=3,
            doc_id="ANSWERS_answer_3",
            question="Why is the sky blue?",
            body_text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
            audience_filters=[
                {
                    "field_name": "type",
                    "values": [
                        {
                            "value": "Spreadsheet",
                            "relation_type": models.RelationType.EQUALS,
                        },
                        {
                            "value": "Presentation",
                            "relation_type": models.RelationType.EQUALS,
                        },
                    ],
                },
            ],
            added_roles=[
                models.UserRoleSpecification(
                    person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        related_documents=[
                            models.RelatedDocuments(
                                query_suggestion=models.QuerySuggestion(
                                    query="app:github type:pull author:mortimer",
                                    search_provider_info=models.SearchProviderInfo(
                                        name="Google",
                                        search_link_url_template="https://www.google.com/search?q={query}&hl=en",
                                    ),
                                    label="Mortimer's PRs",
                                    datasource="github",
                                    request_options=models.SearchRequestOptions(
                                        datasource_filter="JIRA",
                                        datasources_filter=[
                                            "JIRA",
                                        ],
                                        query_overrides_facet_filters=True,
                                        facet_filters=[
                                            models.FacetFilter(
                                                field_name="type",
                                                values=[
                                                    models.FacetFilterValue(
                                                        value="Spreadsheet",
                                                        relation_type=models.RelationType.EQUALS,
                                                    ),
                                                    models.FacetFilterValue(
                                                        value="Presentation",
                                                        relation_type=models.RelationType.EQUALS,
                                                    ),
                                                ],
                                            ),
                                        ],
                                        facet_filter_sets=[
                                            models.FacetFilterSet(
                                                filters=[
                                                    models.FacetFilter(
                                                        field_name="type",
                                                        values=[
                                                            models.FacetFilterValue(
                                                                value="Spreadsheet",
                                                                relation_type=models.RelationType.EQUALS,
                                                            ),
                                                            models.FacetFilterValue(
                                                                value="Presentation",
                                                                relation_type=models.RelationType.EQUALS,
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                            ),
                                            models.FacetFilterSet(
                                                filters=[
                                                    models.FacetFilter(
                                                        field_name="type",
                                                        values=[
                                                            models.FacetFilterValue(
                                                                value="Spreadsheet",
                                                                relation_type=models.RelationType.EQUALS,
                                                            ),
                                                            models.FacetFilterValue(
                                                                value="Presentation",
                                                                relation_type=models.RelationType.EQUALS,
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                            ),
                                            models.FacetFilterSet(
                                                filters=[
                                                    models.FacetFilter(
                                                        field_name="type",
                                                        values=[
                                                            models.FacetFilterValue(
                                                                value="Spreadsheet",
                                                                relation_type=models.RelationType.EQUALS,
                                                            ),
                                                            models.FacetFilterValue(
                                                                value="Presentation",
                                                                relation_type=models.RelationType.EQUALS,
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                            ),
                                        ],
                                        facet_bucket_size=149825,
                                        auth_tokens=[
                                            models.AuthToken(
                                                access_token="123abc",
                                                datasource="gmail",
                                                scope="email profile https://www.googleapis.com/auth/gmail.readonly",
                                                token_type="Bearer",
                                                auth_user="1",
                                            ),
                                        ],
                                    ),
                                    ranges=[
                                        models.TextRange(
                                            start_index=700217,
                                            document=models.Document(
                                                metadata=models.DocumentMetadata(
                                                    datasource="datasource",
                                                    object_type="Feature Request",
                                                    container="container",
                                                    parent_id="JIRA_EN-1337",
                                                    mime_type="mimeType",
                                                    document_id="documentId",
                                                    create_time=parse_datetime(
                                                        "2000-01-23T04:56:07.000Z"
                                                    ),
                                                    update_time=parse_datetime(
                                                        "2000-01-23T04:56:07.000Z"
                                                    ),
                                                    components=[
                                                        "Backend",
                                                        "Networking",
                                                    ],
                                                    status='["Done"]',
                                                    pins=[
                                                        models.PinDocument(
                                                            audience_filters=[
                                                                models.FacetFilter(
                                                                    field_name="type",
                                                                    values=[
                                                                        models.FacetFilterValue(
                                                                            value="Spreadsheet",
                                                                            relation_type=models.RelationType.EQUALS,
                                                                        ),
                                                                        models.FacetFilterValue(
                                                                            value="Presentation",
                                                                            relation_type=models.RelationType.EQUALS,
                                                                        ),
                                                                    ],
                                                                ),
                                                            ],
                                                            document_id="<id>",
                                                        ),
                                                        models.PinDocument(
                                                            audience_filters=[
                                                                models.FacetFilter(
                                                                    field_name="type",
                                                                    values=[
                                                                        models.FacetFilterValue(
                                                                            value="Spreadsheet",
                                                                            relation_type=models.RelationType.EQUALS,
                                                                        ),
                                                                        models.FacetFilterValue(
                                                                            value="Presentation",
                                                                            relation_type=models.RelationType.EQUALS,
                                                                        ),
                                                                    ],
                                                                ),
                                                            ],
                                                            document_id="<id>",
                                                        ),
                                                    ],
                                                    collections=[
                                                        models.Collection(
                                                            name="<value>",
                                                            description="about huzzah institute violin aw pillow abnegate memorable",
                                                            audience_filters=[
                                                                models.FacetFilter(
                                                                    field_name="type",
                                                                    values=[
                                                                        models.FacetFilterValue(
                                                                            value="Spreadsheet",
                                                                            relation_type=models.RelationType.EQUALS,
                                                                        ),
                                                                        models.FacetFilterValue(
                                                                            value="Presentation",
                                                                            relation_type=models.RelationType.EQUALS,
                                                                        ),
                                                                    ],
                                                                ),
                                                            ],
                                                            id=384736,
                                                            items=[
                                                                models.CollectionItem(
                                                                    collection_id=670716,
                                                                    item_type=models.CollectionItemItemType.URL,
                                                                ),
                                                                models.CollectionItem(
                                                                    collection_id=793957,
                                                                    item_type=models.CollectionItemItemType.URL,
                                                                ),
                                                            ],
                                                        ),
                                                        models.Collection(
                                                            name="<value>",
                                                            description="trouser twine because unnaturally card gallery among",
                                                            audience_filters=[
                                                                models.FacetFilter(
                                                                    field_name="type",
                                                                    values=[
                                                                        models.FacetFilterValue(
                                                                            value="Spreadsheet",
                                                                            relation_type=models.RelationType.EQUALS,
                                                                        ),
                                                                        models.FacetFilterValue(
                                                                            value="Presentation",
                                                                            relation_type=models.RelationType.EQUALS,
                                                                        ),
                                                                    ],
                                                                ),
                                                            ],
                                                            id=818393,
                                                        ),
                                                        models.Collection(
                                                            name="<value>",
                                                            description="zebra ugh exactly pfft once",
                                                            audience_filters=[
                                                                models.FacetFilter(
                                                                    field_name="type",
                                                                    values=[
                                                                        models.FacetFilterValue(
                                                                            value="Spreadsheet",
                                                                            relation_type=models.RelationType.EQUALS,
                                                                        ),
                                                                        models.FacetFilterValue(
                                                                            value="Presentation",
                                                                            relation_type=models.RelationType.EQUALS,
                                                                        ),
                                                                    ],
                                                                ),
                                                            ],
                                                            id=29269,
                                                        ),
                                                    ],
                                                    interactions=models.DocumentInteractions(
                                                        reacts=[
                                                            models.Reaction(),
                                                            models.Reaction(),
                                                            models.Reaction(),
                                                        ],
                                                        shares=[
                                                            models.Share(
                                                                num_days_ago=177137,
                                                            ),
                                                            models.Share(
                                                                num_days_ago=127401,
                                                            ),
                                                        ],
                                                    ),
                                                    verification=models.Verification(
                                                        state=models.State.UNVERIFIED,
                                                        metadata=models.VerificationMetadata(
                                                            reminders=[
                                                                models.Reminder(
                                                                    assignee=models.Person(
                                                                        name="George Clooney",
                                                                        obfuscated_id="abc123",
                                                                    ),
                                                                    remind_at=843043,
                                                                ),
                                                            ],
                                                            last_reminder=models.Reminder(
                                                                assignee=models.Person(
                                                                    name="George Clooney",
                                                                    obfuscated_id="abc123",
                                                                ),
                                                                remind_at=630893,
                                                            ),
                                                        ),
                                                    ),
                                                    custom_data={
                                                        "someCustomField": models.CustomDataValue(),
                                                    },
                                                ),
                                            ),
                                        ),
                                    ],
                                    input_details=models.SearchRequestInputDetails(
                                        has_copy_paste=True,
                                    ),
                                ),
                                results=[
                                    models.SearchResult(
                                        title="title",
                                        url="https://example.com/foo/bar",
                                        native_app_url="slack://foo/bar",
                                        snippets=[
                                            models.SearchResultSnippet(
                                                snippet="snippet",
                                                mime_type="mimeType",
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                            models.RelatedDocuments(
                                query_suggestion=models.QuerySuggestion(
                                    query="app:github type:pull author:mortimer",
                                    search_provider_info=models.SearchProviderInfo(
                                        name="Google",
                                        search_link_url_template="https://www.google.com/search?q={query}&hl=en",
                                    ),
                                    label="Mortimer's PRs",
                                    datasource="github",
                                    request_options=models.SearchRequestOptions(
                                        datasource_filter="JIRA",
                                        datasources_filter=[
                                            "JIRA",
                                        ],
                                        query_overrides_facet_filters=True,
                                        facet_filters=[
                                            models.FacetFilter(
                                                field_name="type",
                                                values=[
                                                    models.FacetFilterValue(
                                                        value="Spreadsheet",
                                                        relation_type=models.RelationType.EQUALS,
                                                    ),
                                                    models.FacetFilterValue(
                                                        value="Presentation",
                                                        relation_type=models.RelationType.EQUALS,
                                                    ),
                                                ],
                                            ),
                                        ],
                                        facet_filter_sets=[
                                            models.FacetFilterSet(
                                                filters=[
                                                    models.FacetFilter(
                                                        field_name="type",
                                                        values=[
                                                            models.FacetFilterValue(
                                                                value="Spreadsheet",
                                                                relation_type=models.RelationType.EQUALS,
                                                            ),
                                                            models.FacetFilterValue(
                                                                value="Presentation",
                                                                relation_type=models.RelationType.EQUALS,
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                            ),
                                            models.FacetFilterSet(
                                                filters=[
                                                    models.FacetFilter(
                                                        field_name="type",
                                                        values=[
                                                            models.FacetFilterValue(
                                                                value="Spreadsheet",
                                                                relation_type=models.RelationType.EQUALS,
                                                            ),
                                                            models.FacetFilterValue(
                                                                value="Presentation",
                                                                relation_type=models.RelationType.EQUALS,
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                            ),
                                            models.FacetFilterSet(
                                                filters=[
                                                    models.FacetFilter(
                                                        field_name="type",
                                                        values=[
                                                            models.FacetFilterValue(
                                                                value="Spreadsheet",
                                                                relation_type=models.RelationType.EQUALS,
                                                            ),
                                                            models.FacetFilterValue(
                                                                value="Presentation",
                                                                relation_type=models.RelationType.EQUALS,
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                            ),
                                        ],
                                        facet_bucket_size=862908,
                                        auth_tokens=[
                                            models.AuthToken(
                                                access_token="123abc",
                                                datasource="gmail",
                                                scope="email profile https://www.googleapis.com/auth/gmail.readonly",
                                                token_type="Bearer",
                                                auth_user="1",
                                            ),
                                        ],
                                    ),
                                    input_details=models.SearchRequestInputDetails(
                                        has_copy_paste=True,
                                    ),
                                ),
                            ),
                        ],
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[
                                models.DatasourceProfile(
                                    datasource="github",
                                    handle="<value>",
                                ),
                            ],
                            query_suggestions=models.QuerySuggestionList(
                                suggestions=[
                                    models.QuerySuggestion(
                                        query="app:github type:pull author:mortimer",
                                        label="Mortimer's PRs",
                                        datasource="github",
                                    ),
                                ],
                            ),
                            invite_info=models.InviteInfo(
                                invites=[
                                    models.ChannelInviteInfo(),
                                    models.ChannelInviteInfo(),
                                    models.ChannelInviteInfo(),
                                ],
                            ),
                            custom_fields=[
                                models.CustomFieldData(
                                    label="<value>",
                                    values=[
                                        models.CustomFieldValueStr(),
                                        models.CustomFieldValueStr(),
                                    ],
                                ),
                            ],
                            badges=[
                                models.Badge(
                                    key="deployment_name_new_hire",
                                    display_name="New hire",
                                    icon_config=models.IconConfig(
                                        color="#343CED",
                                        key="person_icon",
                                        icon_type=models.IconType.GLYPH,
                                        name="user",
                                    ),
                                ),
                            ],
                        ),
                    ),
                    role=models.UserRole.EDITOR,
                ),
            ],
            removed_roles=[
                models.UserRoleSpecification(
                    person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[
                                models.DatasourceProfile(
                                    datasource="github",
                                    handle="<value>",
                                ),
                                models.DatasourceProfile(
                                    datasource="github",
                                    handle="<value>",
                                ),
                                models.DatasourceProfile(
                                    datasource="github",
                                    handle="<value>",
                                ),
                            ],
                            query_suggestions=models.QuerySuggestionList(),
                            invite_info=models.InviteInfo(),
                            badges=[
                                models.Badge(
                                    key="deployment_name_new_hire",
                                    display_name="New hire",
                                    icon_config=models.IconConfig(
                                        color="#343CED",
                                        key="person_icon",
                                        icon_type=models.IconType.GLYPH,
                                        name="user",
                                    ),
                                ),
                            ],
                        ),
                    ),
                    role=models.UserRole.EDITOR,
                ),
            ],
            roles=[
                models.UserRoleSpecification(
                    person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[
                                models.DatasourceProfile(
                                    datasource="github",
                                    handle="<value>",
                                ),
                                models.DatasourceProfile(
                                    datasource="github",
                                    handle="<value>",
                                ),
                            ],
                            query_suggestions=models.QuerySuggestionList(),
                            invite_info=models.InviteInfo(),
                            badges=[
                                models.Badge(
                                    key="deployment_name_new_hire",
                                    display_name="New hire",
                                    icon_config=models.IconConfig(
                                        color="#343CED",
                                        key="person_icon",
                                        icon_type=models.IconType.GLYPH,
                                        name="user",
                                    ),
                                ),
                            ],
                        ),
                    ),
                    role=models.UserRole.ANSWER_MODERATOR,
                ),
                models.UserRoleSpecification(
                    person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[
                                models.DatasourceProfile(
                                    datasource="github",
                                    handle="<value>",
                                ),
                            ],
                            query_suggestions=models.QuerySuggestionList(),
                            invite_info=models.InviteInfo(),
                            badges=[
                                models.Badge(
                                    key="deployment_name_new_hire",
                                    display_name="New hire",
                                    icon_config=models.IconConfig(
                                        color="#343CED",
                                        key="person_icon",
                                        icon_type=models.IconType.GLYPH,
                                        name="user",
                                    ),
                                ),
                            ],
                        ),
                    ),
                    role=models.UserRole.OWNER,
                ),
            ],
            combined_answer_text={
                "text": "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
            },
        )
        assert res is not None


def test_answers_getanswer():
    test_http_client = create_test_http_client("getanswer")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            api_token=os.getenv("GLEAN_API_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.answers.retrieve(
            request={
                "id": 3,
                "doc_id": "ANSWERS_answer_3",
            }
        )
        assert res is not None


def test_answers_listanswers():
    test_http_client = create_test_http_client("listanswers")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            api_token=os.getenv("GLEAN_API_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.answers.list(request={})
        assert res is not None


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step previewanswer.test referencing operation previewanswer not found in document`]"
)
def test_answers_previewanswer():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step previewanswerdraft.test referencing operation previewanswerdraft not found in document`]"
)
def test_answers_previewanswerdraft():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step updateanswerlikes.test referencing operation updateanswerlikes not found in document`]"
)
def test_answers_updateanswerlikes():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step createanswerboard.test referencing operation createanswerboard not found in document`]"
)
def test_answers_createanswerboard():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step deleteanswerboards.test referencing operation deleteanswerboards not found in document`]"
)
def test_answers_deleteanswerboards():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step editanswerboard.test referencing operation editanswerboard not found in document`]"
)
def test_answers_editanswerboard():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step getanswerboard.test referencing operation getanswerboard not found in document`]"
)
def test_answers_getanswerboard():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step listanswerboards.test referencing operation listanswerboards not found in document`]"
)
def test_answers_listanswerboards():
    pass
