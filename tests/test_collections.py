"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from datetime import date
from glean import Glean, models
import os
import pytest
from tests.test_client import create_test_http_client


def test_collections_addcollectionitems():
    test_http_client = create_test_http_client("addcollectionitems")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_token=os.getenv("GLEAN_API_TOKEN", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.collections.add_items(collection_id=6460.15)
        assert res is not None


def test_collections_createcollection():
    test_http_client = create_test_http_client("createcollection")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_token=os.getenv("GLEAN_API_TOKEN", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.collections.create(
            name="<value>",
            added_roles=[
                models.UserRoleSpecification(
                    person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        related_documents=[],
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[
                                models.DatasourceProfile(
                                    datasource="github",
                                    handle="<value>",
                                ),
                            ],
                            query_suggestions=models.QuerySuggestionList(
                                suggestions=[],
                            ),
                            invite_info=models.InviteInfo(
                                invites=[],
                            ),
                            custom_fields=[],
                            badges=[
                                models.Badge(
                                    key="deployment_name_new_hire",
                                    display_name="New hire",
                                    icon_config=models.IconConfig(
                                        color="#343CED",
                                        key="person_icon",
                                        icon_type=models.IconType.GLYPH,
                                        name="user",
                                    ),
                                ),
                            ],
                        ),
                    ),
                    role=models.UserRole.OWNER,
                ),
                models.UserRoleSpecification(
                    role=models.UserRole.VERIFIER,
                ),
            ],
            removed_roles=[
                models.UserRoleSpecification(
                    person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[
                                models.DatasourceProfile(
                                    datasource="github",
                                    handle="<value>",
                                ),
                            ],
                            query_suggestions=models.QuerySuggestionList(),
                            invite_info=models.InviteInfo(),
                            badges=[
                                models.Badge(
                                    key="deployment_name_new_hire",
                                    display_name="New hire",
                                    icon_config=models.IconConfig(
                                        color="#343CED",
                                        key="person_icon",
                                        icon_type=models.IconType.GLYPH,
                                        name="user",
                                    ),
                                ),
                            ],
                        ),
                    ),
                    role=models.UserRole.VERIFIER,
                ),
                models.UserRoleSpecification(
                    role=models.UserRole.ANSWER_MODERATOR,
                ),
                models.UserRoleSpecification(
                    role=models.UserRole.OWNER,
                ),
            ],
            audience_filters=[
                {
                    "field_name": "type",
                    "values": [
                        {
                            "value": "Spreadsheet",
                            "relation_type": models.RelationType.EQUALS,
                        },
                        {
                            "value": "Presentation",
                            "relation_type": models.RelationType.EQUALS,
                        },
                    ],
                },
            ],
        )
        assert res is not None


def test_collections_deletecollection():
    test_http_client = create_test_http_client("deletecollection")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_token=os.getenv("GLEAN_API_TOKEN", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.client.collections.delete(
            ids=[
                698486,
                386564,
            ]
        )


def test_collections_deletecollectionitem():
    test_http_client = create_test_http_client("deletecollectionitem")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_token=os.getenv("GLEAN_API_TOKEN", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.collections.delete_item(
            collection_id=1357.59, item_id="<id>"
        )
        assert res is not None


def test_collections_editcollection():
    test_http_client = create_test_http_client("editcollection")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_token=os.getenv("GLEAN_API_TOKEN", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.collections.update(
            name="<value>",
            id=720396,
            added_roles=[
                models.UserRoleSpecification(
                    person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        related_documents=[],
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[
                                models.DatasourceProfile(
                                    datasource="github",
                                    handle="<value>",
                                ),
                            ],
                            query_suggestions=models.QuerySuggestionList(
                                suggestions=[],
                            ),
                            invite_info=models.InviteInfo(
                                invites=[],
                            ),
                            custom_fields=[],
                            badges=[
                                models.Badge(
                                    key="deployment_name_new_hire",
                                    display_name="New hire",
                                    icon_config=models.IconConfig(
                                        color="#343CED",
                                        key="person_icon",
                                        icon_type=models.IconType.GLYPH,
                                        name="user",
                                    ),
                                ),
                            ],
                        ),
                    ),
                    role=models.UserRole.ANSWER_MODERATOR,
                ),
                models.UserRoleSpecification(
                    role=models.UserRole.EDITOR,
                ),
                models.UserRoleSpecification(
                    role=models.UserRole.ANSWER_MODERATOR,
                ),
            ],
            removed_roles=[
                models.UserRoleSpecification(
                    person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[
                                models.DatasourceProfile(
                                    datasource="github",
                                    handle="<value>",
                                ),
                            ],
                            query_suggestions=models.QuerySuggestionList(),
                            invite_info=models.InviteInfo(),
                            badges=[
                                models.Badge(
                                    key="deployment_name_new_hire",
                                    display_name="New hire",
                                    icon_config=models.IconConfig(
                                        color="#343CED",
                                        key="person_icon",
                                        icon_type=models.IconType.GLYPH,
                                        name="user",
                                    ),
                                ),
                            ],
                        ),
                    ),
                    role=models.UserRole.ANSWER_MODERATOR,
                ),
            ],
            audience_filters=[
                {
                    "field_name": "type",
                    "values": [
                        {
                            "value": "Spreadsheet",
                            "relation_type": models.RelationType.EQUALS,
                        },
                        {
                            "value": "Presentation",
                            "relation_type": models.RelationType.EQUALS,
                        },
                    ],
                },
            ],
        )
        assert res is not None


def test_collections_editcollectionitem():
    test_http_client = create_test_http_client("editcollectionitem")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_token=os.getenv("GLEAN_API_TOKEN", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.collections.update_item(
            collection_id=795203, item_id="<id>"
        )
        assert res is not None


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step editdocumentcollections.test referencing operation editdocumentcollections not found in document`]"
)
def test_collections_editdocumentcollections():
    pass


def test_collections_getcollection():
    test_http_client = create_test_http_client("getcollection")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_token=os.getenv("GLEAN_API_TOKEN", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.collections.retrieve(id=700347)
        assert res is not None


def test_collections_listcollections():
    test_http_client = create_test_http_client("listcollections")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_token=os.getenv("GLEAN_API_TOKEN", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.collections.list(request={})
        assert res is not None


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step movecollectionitem.test referencing operation movecollectionitem not found in document`]"
)
def test_collections_movecollectionitem():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step pincollection.test referencing operation pincollection not found in document`]"
)
def test_collections_pincollection():
    pass
