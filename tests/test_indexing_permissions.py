"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from glean import Glean, models
import os
from tests.test_client import create_test_http_client


def test_indexing_permissions_post_api_index_v1_updatepermissions():
    test_http_client = create_test_http_client("post_/api/index/v1/updatepermissions")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            act_as_bearer_token=os.getenv("GLEAN_ACT_AS_BEARER_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.update_permissions(
            datasource="<value>", permissions={}
        )


def test_indexing_permissions_post_api_index_v1_indexuser():
    test_http_client = create_test_http_client("post_/api/index/v1/indexuser")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            act_as_bearer_token=os.getenv("GLEAN_ACT_AS_BEARER_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.index_user(
            datasource="<value>",
            user={
                "email": "Elroy38@gmail.com",
                "name": "<value>",
            },
        )


def test_indexing_permissions_post_api_index_v1_bulkindexusers():
    test_http_client = create_test_http_client("post_/api/index/v1/bulkindexusers")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            act_as_bearer_token=os.getenv("GLEAN_ACT_AS_BEARER_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.bulk_index_users(
            upload_id="<id>",
            datasource="<value>",
            users=[
                {
                    "email": "Nola85@hotmail.com",
                    "name": "<value>",
                },
                {
                    "email": "Francisca44@hotmail.com",
                    "name": "<value>",
                },
                {
                    "email": "Georgiana_Fadel-Boyle@yahoo.com",
                    "name": "<value>",
                },
            ],
        )


def test_indexing_permissions_post_api_index_v1_indexgroup():
    test_http_client = create_test_http_client("post_/api/index/v1/indexgroup")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            act_as_bearer_token=os.getenv("GLEAN_ACT_AS_BEARER_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.index_group(
            datasource="<value>",
            group={
                "name": "<value>",
            },
        )


def test_indexing_permissions_post_api_index_v1_bulkindexgroups():
    test_http_client = create_test_http_client("post_/api/index/v1/bulkindexgroups")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            act_as_bearer_token=os.getenv("GLEAN_ACT_AS_BEARER_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.bulk_index_groups(
            upload_id="<id>",
            datasource="<value>",
            groups=[
                {
                    "name": "<value>",
                },
                {
                    "name": "<value>",
                },
            ],
        )


def test_indexing_permissions_post_api_index_v1_indexmembership():
    test_http_client = create_test_http_client("post_/api/index/v1/indexmembership")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            act_as_bearer_token=os.getenv("GLEAN_ACT_AS_BEARER_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.index_membership(
            datasource="<value>",
            membership={
                "group_name": "<value>",
            },
        )


def test_indexing_permissions_post_api_index_v1_bulkindexmemberships():
    test_http_client = create_test_http_client(
        "post_/api/index/v1/bulkindexmemberships"
    )

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            act_as_bearer_token=os.getenv("GLEAN_ACT_AS_BEARER_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.bulk_index_memberships(
            upload_id="<id>",
            datasource="<value>",
            memberships=[
                {},
                {},
                {},
            ],
        )


def test_indexing_permissions_post_api_index_v1_processallmemberships():
    test_http_client = create_test_http_client(
        "post_/api/index/v1/processallmemberships"
    )

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            act_as_bearer_token=os.getenv("GLEAN_ACT_AS_BEARER_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.process_memberships()


def test_indexing_permissions_post_api_index_v1_deleteuser():
    test_http_client = create_test_http_client("post_/api/index/v1/deleteuser")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            act_as_bearer_token=os.getenv("GLEAN_ACT_AS_BEARER_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.delete_user(
            datasource="<value>", email="Estrella.Robel56@gmail.com"
        )


def test_indexing_permissions_post_api_index_v1_deletegroup():
    test_http_client = create_test_http_client("post_/api/index/v1/deletegroup")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            act_as_bearer_token=os.getenv("GLEAN_ACT_AS_BEARER_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.delete_group(
            datasource="<value>", group_name="<value>"
        )


def test_indexing_permissions_post_api_index_v1_deletemembership():
    test_http_client = create_test_http_client("post_/api/index/v1/deletemembership")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            act_as_bearer_token=os.getenv("GLEAN_ACT_AS_BEARER_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.delete_membership(
            datasource="<value>",
            membership={
                "group_name": "<value>",
            },
        )


def test_indexing_permissions_post_api_index_v1_betausers():
    test_http_client = create_test_http_client("post_/api/index/v1/betausers")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            act_as_bearer_token=os.getenv("GLEAN_ACT_AS_BEARER_TOKEN", "value"),
        ),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.authorize_beta_users(
            datasource="<value>",
            emails=[
                "Margaret94@gmail.com",
                "Jerel_Wilkinson39@yahoo.com",
            ],
        )
