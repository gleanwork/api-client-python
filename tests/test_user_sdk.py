"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from datetime import date
from glean import Glean, models
from glean.utils import parse_datetime
import os
from tests.test_client import create_test_http_client


def test_user_sdk_addcredential():
    test_http_client = create_test_http_client("addcredential")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.client.user.add_credential()


def test_user_sdk_deletequeryhistory():
    test_http_client = create_test_http_client("deletequeryhistory")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.user.delete_query_history()
        assert res is not None
        assert res == models.DeleteQueryHistoryResponse()


def test_user_sdk_invite():
    test_http_client = create_test_http_client("invite")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.client.user.invite(
            recipients=[
                models.Person(
                    name="George Clooney",
                    obfuscated_id="abc123",
                ),
            ],
            recipient_filters={
                "filter_": [
                    {
                        "field_name": "type",
                        "values": [
                            {
                                "value": "Spreadsheet",
                                "relation_type": models.RelationType.EQUALS,
                            },
                            {
                                "value": "Presentation",
                                "relation_type": models.RelationType.EQUALS,
                            },
                        ],
                    },
                ],
            },
        )


def test_user_sdk_publicconfig():
    test_http_client = create_test_http_client("publicconfig")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.user.get_public_config()
        assert res is not None
        assert res == models.ClientConfig(
            integer_values={
                "autocompleteDebounceMs": 300,
                "retries": 3,
            },
            themes=models.Themes(
                light={
                    "background": "#fafafa",
                    "textPrimary": "#1e1e1e",
                },
                dark={
                    "background": "#fafafa",
                    "textPrimary": "#1e1e1e",
                },
            ),
            greeting_format="(This would be the current default Glean greeting)",
        )


def test_user_sdk_removecredential():
    test_http_client = create_test_http_client("removecredential")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.client.user.remove_credential()


def test_user_sdk_support_email():
    test_http_client = create_test_http_client("support_email")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.client.user.send_support_email(
            email_template=models.CommunicationTemplate.ONBOARDING_CHAT,
            recipients=[
                models.Person(
                    name="George Clooney",
                    obfuscated_id="abc123",
                ),
            ],
            cc_recipients=[
                models.Person(
                    name="George Clooney",
                    obfuscated_id="abc123",
                ),
            ],
            recipient_filters={
                "filter_": [
                    {
                        "field_name": "type",
                        "values": [
                            {
                                "value": "Spreadsheet",
                                "relation_type": models.RelationType.EQUALS,
                            },
                            {
                                "value": "Presentation",
                                "relation_type": models.RelationType.EQUALS,
                            },
                        ],
                    },
                ],
            },
            senders=[
                models.Person(
                    name="George Clooney",
                    obfuscated_id="abc123",
                ),
            ],
            documents=[
                models.Document(
                    metadata=models.DocumentMetadata(
                        datasource="datasource",
                        object_type="Feature Request",
                        container="container",
                        parent_id="JIRA_EN-1337",
                        mime_type="mimeType",
                        document_id="documentId",
                        create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        author=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            related_documents=[],
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[],
                                query_suggestions=models.QuerySuggestionList(
                                    suggestions=[],
                                ),
                                invite_info=models.InviteInfo(
                                    invites=[],
                                ),
                                custom_fields=[],
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        owner=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        mentioned_people=[],
                        components=[
                            "Backend",
                            "Networking",
                        ],
                        status='["Done"]',
                        pins=[],
                        assigned_to=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        updated_by=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        collections=[],
                        interactions=models.DocumentInteractions(
                            reacts=[],
                            shares=[],
                        ),
                        verification=models.Verification(
                            state=models.State.VERIFIED,
                            metadata=models.VerificationMetadata(
                                last_verifier=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                reminders=[],
                                last_reminder=models.Reminder(
                                    assignee=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    requestor=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    remind_at=949753,
                                ),
                                candidate_verifiers=[],
                            ),
                        ),
                        shortcuts=[],
                        custom_data={
                            "someCustomField": models.CustomDataValue(),
                        },
                        contact_person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        ancestors=[],
                    ),
                ),
                models.Document(),
            ],
            feedback_payload={
                "custom_json": '{"comment": "glean is awesome!", "sender": "happycustomer@customer.com"}',
            },
        )
