// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostRestAPIV1Getchat(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "getchat[0]":
			dir.HandlerFunc("getchat", testGetchatGetchat0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetchatGetchat0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetChatResponse{
		ChatResult: &components.ChatResult{
			Chat: &components.Chat{
				ID:         types.String("string"),
				CreateTime: types.Int64(0),
				CreatedBy: &components.Person{
					Name:         "George Clooney",
					ObfuscatedID: "abc123",
				},
				UpdateTime:      types.Int64(0),
				Name:            types.String("string"),
				ApplicationID:   types.String("string"),
				ApplicationName: types.String("string"),
				Icon: &components.IconConfig{
					Color:    types.String("#343CED"),
					Key:      types.String("person_icon"),
					IconType: components.IconTypeGlyph.ToPointer(),
					Name:     types.String("user"),
				},
				Messages: []components.ChatMessage{
					components.ChatMessage{
						AgentConfig: &components.AgentConfig{
							Agent: components.AgentEnumDefault.ToPointer(),
							Mode:  components.ModeDefault.ToPointer(),
						},
						Author: components.AuthorUser.ToPointer(),
						Citations: []components.ChatMessageCitation{
							components.ChatMessageCitation{
								TrackingToken: types.String("string"),
								SourceDocument: &components.Document{
									ID:            types.String("string"),
									Datasource:    types.String("string"),
									ConnectorType: components.ConnectorTypeAPICrawl.ToPointer(),
									DocType:       types.String("string"),
									Content: &components.DocumentContent{
										FullTextList: []string{
											"<value>",
										},
									},
									Title: types.String("string"),
									URL:   types.String("string"),
									Metadata: &components.DocumentMetadata{
										Datasource: types.String("datasource"),
										ObjectType: types.String("Feature Request"),
										Container:  types.String("container"),
										ParentID:   types.String("JIRA_EN-1337"),
										MimeType:   types.String("mimeType"),
										DocumentID: types.String("documentId"),
										CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
										UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
										Author: &components.Person{
											Name:         "name",
											ObfuscatedID: "<id>",
										},
										Components: []string{
											"Backend",
											"Networking",
										},
										Status: types.String("[\"Done\"]"),
										CustomData: map[string]components.CustomDataValue{
											"someCustomField": components.CustomDataValue{},
										},
									},
									Sections: []components.DocumentSection{
										components.DocumentSection{
											Title: types.String("<value>"),
											URL:   types.String("https://normal-making.name"),
										},
									},
								},
								SourceFile: &components.ChatFile{
									ID:   types.String("FILE_1234"),
									URL:  types.String("www.google.com"),
									Name: types.String("sample.pdf"),
									Metadata: &components.ChatFileMetadata{
										Status:        components.ChatFileStatusProcessing.ToPointer(),
										UploadTime:    types.Int64(0),
										ProcessedSize: types.Int64(0),
										FailureReason: components.ChatFileFailureReasonParseFailed.ToPointer(),
										MimeType:      types.String("string"),
									},
								},
								SourcePerson: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
								},
								ReferenceRanges: []components.ReferenceRange{
									components.ReferenceRange{
										TextRange: &components.TextRange{
											StartIndex: 969961,
											EndIndex:   types.Int64(458049),
											Type:       components.TextRangeTypeCitation.ToPointer(),
											URL:        types.String("https://earnest-tuber.info/"),
											Document: &components.Document{
												Metadata: &components.DocumentMetadata{
													Datasource: types.String("datasource"),
													ObjectType: types.String("Feature Request"),
													Container:  types.String("container"),
													ParentID:   types.String("JIRA_EN-1337"),
													MimeType:   types.String("mimeType"),
													DocumentID: types.String("documentId"),
													CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
													UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
													Author: &components.Person{
														Name:         "name",
														ObfuscatedID: "<id>",
													},
													Components: []string{
														"Backend",
														"Networking",
													},
													Status: types.String("[\"Done\"]"),
													CustomData: map[string]components.CustomDataValue{
														"someCustomField": components.CustomDataValue{},
													},
												},
											},
										},
										Snippets: []components.SearchResultSnippet{
											components.SearchResultSnippet{
												Snippet: "<value>",
												Ranges: []components.TextRange{
													components.TextRange{
														StartIndex: 78888,
														Document: &components.Document{
															Metadata: &components.DocumentMetadata{
																Datasource: types.String("datasource"),
																ObjectType: types.String("Feature Request"),
																Container:  types.String("container"),
																ParentID:   types.String("JIRA_EN-1337"),
																MimeType:   types.String("mimeType"),
																DocumentID: types.String("documentId"),
																CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
																UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
																Author: &components.Person{
																	Name:         "name",
																	ObfuscatedID: "<id>",
																},
																Components: []string{
																	"Backend",
																	"Networking",
																},
																Status: types.String("[\"Done\"]"),
																CustomData: map[string]components.CustomDataValue{
																	"someCustomField": components.CustomDataValue{},
																},
															},
														},
													},
													components.TextRange{
														StartIndex: 219956,
														Document: &components.Document{
															Metadata: &components.DocumentMetadata{
																Datasource: types.String("datasource"),
																ObjectType: types.String("Feature Request"),
																Container:  types.String("container"),
																ParentID:   types.String("JIRA_EN-1337"),
																MimeType:   types.String("mimeType"),
																DocumentID: types.String("documentId"),
																CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
																UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
																Author: &components.Person{
																	Name:         "name",
																	ObfuscatedID: "<id>",
																},
																Components: []string{
																	"Backend",
																	"Networking",
																},
																Status: types.String("[\"Done\"]"),
																CustomData: map[string]components.CustomDataValue{
																	"someCustomField": components.CustomDataValue{},
																},
															},
														},
													},
													components.TextRange{
														StartIndex: 313464,
														Document: &components.Document{
															Metadata: &components.DocumentMetadata{
																Datasource: types.String("datasource"),
																ObjectType: types.String("Feature Request"),
																Container:  types.String("container"),
																ParentID:   types.String("JIRA_EN-1337"),
																MimeType:   types.String("mimeType"),
																DocumentID: types.String("documentId"),
																CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
																UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
																Author: &components.Person{
																	Name:         "name",
																	ObfuscatedID: "<id>",
																},
																Components: []string{
																	"Backend",
																	"Networking",
																},
																Status: types.String("[\"Done\"]"),
																CustomData: map[string]components.CustomDataValue{
																	"someCustomField": components.CustomDataValue{},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						UploadedFileIds: []string{
							"string",
						},
						Fragments: []components.ChatMessageFragment{
							components.ChatMessageFragment{
								StructuredResults: []components.StructuredResult{
									components.StructuredResult{
										Document: &components.Document{
											ID:            types.String("<id>"),
											Datasource:    types.String("<value>"),
											ConnectorType: components.ConnectorTypeAPICrawl.ToPointer(),
											DocType:       types.String("<value>"),
											Title:         types.String("<value>"),
											URL:           types.String("https://strange-gloom.net"),
											Metadata: &components.DocumentMetadata{
												Author: &components.Person{
													Name:         "George Clooney",
													ObfuscatedID: "abc123",
												},
												Owner: &components.Person{
													Name:         "George Clooney",
													ObfuscatedID: "abc123",
												},
												MentionedPeople: []components.Person{
													components.Person{
														Name:         "George Clooney",
														ObfuscatedID: "abc123",
													},
												},
												Pins: []components.PinDocument{
													components.PinDocument{
														AudienceFilters: []components.FacetFilter{
															components.FacetFilter{
																FieldName: types.String("type"),
																Values: []components.FacetFilterValue{
																	components.FacetFilterValue{
																		Value:        types.String("Spreadsheet"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																	components.FacetFilterValue{
																		Value:        types.String("Presentation"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																},
															},
														},
														DocumentID: "<id>",
														Attribution: &components.Person{
															Name:         "George Clooney",
															ObfuscatedID: "abc123",
														},
														UpdatedBy: &components.Person{
															Name:         "George Clooney",
															ObfuscatedID: "abc123",
														},
													},
													components.PinDocument{
														AudienceFilters: []components.FacetFilter{
															components.FacetFilter{
																FieldName: types.String("type"),
																Values: []components.FacetFilterValue{
																	components.FacetFilterValue{
																		Value:        types.String("Spreadsheet"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																	components.FacetFilterValue{
																		Value:        types.String("Presentation"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																},
															},
														},
														DocumentID: "<id>",
														Attribution: &components.Person{
															Name:         "George Clooney",
															ObfuscatedID: "abc123",
														},
														UpdatedBy: &components.Person{
															Name:         "George Clooney",
															ObfuscatedID: "abc123",
														},
													},
												},
												AssignedTo: &components.Person{
													Name:         "George Clooney",
													ObfuscatedID: "abc123",
												},
												UpdatedBy: &components.Person{
													Name:         "George Clooney",
													ObfuscatedID: "abc123",
												},
												Collections: []components.Collection{
													components.Collection{
														Name:        "<value>",
														Description: "scrabble ignite aw showboat shakily",
														AddedRoles: []components.UserRoleSpecification{
															components.UserRoleSpecification{
																Person: &components.Person{
																	Name:         "George Clooney",
																	ObfuscatedID: "abc123",
																},
																Role: components.UserRoleOwner,
															},
															components.UserRoleSpecification{
																Person: &components.Person{
																	Name:         "George Clooney",
																	ObfuscatedID: "abc123",
																},
																Role: components.UserRoleEditor,
															},
														},
														RemovedRoles: []components.UserRoleSpecification{
															components.UserRoleSpecification{
																Person: &components.Person{
																	Name:         "George Clooney",
																	ObfuscatedID: "abc123",
																},
																Role: components.UserRoleVerifier,
															},
															components.UserRoleSpecification{
																Person: &components.Person{
																	Name:         "George Clooney",
																	ObfuscatedID: "abc123",
																},
																Role: components.UserRoleEditor,
															},
														},
														AudienceFilters: []components.FacetFilter{
															components.FacetFilter{
																FieldName: types.String("type"),
																Values: []components.FacetFilterValue{
																	components.FacetFilterValue{
																		Value:        types.String("Spreadsheet"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																	components.FacetFilterValue{
																		Value:        types.String("Presentation"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																},
															},
														},
														ID: 843618,
														Creator: &components.Person{
															Name:         "George Clooney",
															ObfuscatedID: "abc123",
														},
														UpdatedBy: &components.Person{
															Name:         "George Clooney",
															ObfuscatedID: "abc123",
														},
														Items: []components.CollectionItem{
															components.CollectionItem{
																CollectionID: 149108,
																CreatedBy: &components.Person{
																	Name:         "George Clooney",
																	ObfuscatedID: "abc123",
																},
																ItemType: components.CollectionItemItemTypeURL,
															},
															components.CollectionItem{
																CollectionID: 503671,
																CreatedBy: &components.Person{
																	Name:         "George Clooney",
																	ObfuscatedID: "abc123",
																},
																ItemType: components.CollectionItemItemTypeCollection,
															},
														},
														Roles: []components.UserRoleSpecification{
															components.UserRoleSpecification{
																Person: &components.Person{
																	Name:         "George Clooney",
																	ObfuscatedID: "abc123",
																},
																Role: components.UserRoleOwner,
															},
														},
													},
													components.Collection{
														Name:         "<value>",
														Description:  "ah ack aha bah",
														AddedRoles:   []components.UserRoleSpecification{},
														RemovedRoles: []components.UserRoleSpecification{},
														AudienceFilters: []components.FacetFilter{
															components.FacetFilter{
																FieldName: types.String("type"),
																Values: []components.FacetFilterValue{
																	components.FacetFilterValue{
																		Value:        types.String("Spreadsheet"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																	components.FacetFilterValue{
																		Value:        types.String("Presentation"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																},
															},
														},
														ID: 72193,
														Creator: &components.Person{
															Name:         "George Clooney",
															ObfuscatedID: "abc123",
														},
														UpdatedBy: &components.Person{
															Name:         "George Clooney",
															ObfuscatedID: "abc123",
														},
														Items:    []components.CollectionItem{},
														Children: []components.Collection{},
														Roles:    []components.UserRoleSpecification{},
													},
												},
												Interactions: &components.DocumentInteractions{
													Reacts: []components.Reaction{
														components.Reaction{
															Reactors: []components.Person{
																components.Person{
																	Name:         "George Clooney",
																	ObfuscatedID: "abc123",
																},
															},
														},
														components.Reaction{
															Reactors: []components.Person{},
														},
														components.Reaction{
															Reactors: []components.Person{},
														},
													},
													Shares: []components.Share{
														components.Share{
															NumDaysAgo: 786783,
															Sharer: &components.Person{
																Name:         "George Clooney",
																ObfuscatedID: "abc123",
															},
														},
														components.Share{
															NumDaysAgo: 972276,
															Sharer: &components.Person{
																Name:         "George Clooney",
																ObfuscatedID: "abc123",
															},
														},
													},
												},
												Verification: &components.Verification{
													State: components.StateUnverified,
													Metadata: &components.VerificationMetadata{
														LastVerifier: &components.Person{
															Name:         "George Clooney",
															ObfuscatedID: "abc123",
														},
														Reminders: []components.Reminder{
															components.Reminder{
																Assignee: components.Person{
																	Name:         "George Clooney",
																	ObfuscatedID: "abc123",
																},
																Requestor: &components.Person{
																	Name:         "George Clooney",
																	ObfuscatedID: "abc123",
																},
																RemindAt: 844917,
															},
															components.Reminder{
																Assignee: components.Person{
																	Name:         "George Clooney",
																	ObfuscatedID: "abc123",
																},
																Requestor: &components.Person{
																	Name:         "George Clooney",
																	ObfuscatedID: "abc123",
																},
																RemindAt: 531548,
															},
														},
														LastReminder: &components.Reminder{
															Assignee: components.Person{
																Name:         "George Clooney",
																ObfuscatedID: "abc123",
															},
															Requestor: &components.Person{
																Name:         "George Clooney",
																ObfuscatedID: "abc123",
															},
															RemindAt: 576892,
														},
														CandidateVerifiers: []components.Person{
															components.Person{
																Name:         "George Clooney",
																ObfuscatedID: "abc123",
															},
														},
													},
												},
												ContactPerson: &components.Person{
													Name:         "George Clooney",
													ObfuscatedID: "abc123",
												},
											},
											Sections: []components.DocumentSection{},
										},
										Person: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
										},
										Customer: &components.Customer{
											ID:      "<id>",
											Domains: []string{},
											Company: components.Company{
												Name:     "<value>",
												Location: types.String("New York City"),
												Industry: types.String("Finances"),
												About:    types.String("Financial, software, data, and media company headquartered in Midtown Manhattan, New York City"),
											},
											DocumentCounts: map[string]int64{
												"key":  534384,
												"key1": 901064,
											},
											Poc:                   []components.Person{},
											MergedCustomers:       []components.Customer{},
											StartDate:             types.MustNewDateFromString("2025-09-27"),
											ContractAnnualRevenue: types.Float64(2187.45),
											Notes:                 types.String("<value>"),
										},
										Team: &components.Team{
											ID:                 "<id>",
											Name:               "<value>",
											Description:        types.String("aw fibre hassle freezing but conversation under"),
											BusinessUnit:       types.String("<value>"),
											Department:         types.String("<value>"),
											PhotoURL:           types.String("https://sizzling-accountability.net/"),
											BannerURL:          types.String("https://miserable-hydrant.biz/"),
											ExternalLink:       types.String("https://hasty-cappelletti.name/"),
											Members:            []components.PersonToTeamRelationship{},
											MemberCount:        types.Int64(626356),
											Emails:             []components.TeamEmail{},
											DatasourceProfiles: []components.DatasourceProfile{},
											Datasource:         types.String("<value>"),
											CreatedFrom:        types.String("<value>"),
											LastUpdatedAt:      types.MustNewTimeFromString("2023-08-02T00:17:06.651Z"),
											Status:             components.TeamStatusQueuedForCreation.ToPointer(),
											CanBeDeleted:       types.Bool(false),
											LoggingID:          types.String("<id>"),
										},
										CustomEntity: &components.CustomEntity{
											ID:         types.String("<id>"),
											Title:      types.String("<value>"),
											Datasource: types.String("<value>"),
											ObjectType: types.String("<value>"),
											Roles:      []components.UserRoleSpecification{},
										},
										Answer: &components.Answer{
											ID:                 313992,
											DocID:              types.String("<id>"),
											Question:           types.String("<value>"),
											QuestionVariations: []string{},
											BodyText:           types.String("<value>"),
											BoardID:            types.Int64(933583),
											AudienceFilters:    []components.FacetFilter{},
											AddedRoles:         []components.UserRoleSpecification{},
											RemovedRoles:       []components.UserRoleSpecification{},
											Roles:              []components.UserRoleSpecification{},
											SourceDocumentSpec: types.Pointer(components.CreateDocumentSpecUnionDocumentSpec1(
												components.DocumentSpec1{},
											)),
											SourceType: components.AnswerSourceTypeAssistant.ToPointer(),
											CombinedAnswerText: &components.StructuredText{
												Text: "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
												StructuredList: []components.StructuredTextItem{
													components.StructuredTextItem{
														Link: types.String("https://en.wikipedia.org/wiki/Diffuse_sky_radiation"),
														Document: &components.Document{
															Metadata: &components.DocumentMetadata{
																Datasource: types.String("datasource"),
																ObjectType: types.String("Feature Request"),
																Container:  types.String("container"),
																ParentID:   types.String("JIRA_EN-1337"),
																MimeType:   types.String("mimeType"),
																DocumentID: types.String("documentId"),
																CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
																UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
																Author: &components.Person{
																	Name:         "name",
																	ObfuscatedID: "<id>",
																},
																Components: []string{
																	"Backend",
																	"Networking",
																},
																Status: types.String("[\"Done\"]"),
																CustomData: map[string]components.CustomDataValue{
																	"someCustomField": components.CustomDataValue{},
																},
															},
														},
														Text: types.String("Because its wavelengths are shorter, blue light is more strongly scattered than the longer-wavelength lights, red or green. Hence the result that when looking at the sky away from the direct incident sunlight, the human eye perceives the sky to be blue."),
													},
													components.StructuredTextItem{
														Link: types.String("https://en.wikipedia.org/wiki/Diffuse_sky_radiation"),
														Document: &components.Document{
															Metadata: &components.DocumentMetadata{
																Datasource: types.String("datasource"),
																ObjectType: types.String("Feature Request"),
																Container:  types.String("container"),
																ParentID:   types.String("JIRA_EN-1337"),
																MimeType:   types.String("mimeType"),
																DocumentID: types.String("documentId"),
																CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
																UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
																Author: &components.Person{
																	Name:         "name",
																	ObfuscatedID: "<id>",
																},
																Components: []string{
																	"Backend",
																	"Networking",
																},
																Status: types.String("[\"Done\"]"),
																CustomData: map[string]components.CustomDataValue{
																	"someCustomField": components.CustomDataValue{},
																},
															},
														},
														Text: types.String("Because its wavelengths are shorter, blue light is more strongly scattered than the longer-wavelength lights, red or green. Hence the result that when looking at the sky away from the direct incident sunlight, the human eye perceives the sky to be blue."),
													},
												},
											},
											Likes: &components.AnswerLikes{
												LikedBy:     []components.AnswerLike{},
												LikedByUser: false,
												NumLikes:    30856,
											},
											Author: &components.Person{
												Name:         "<value>",
												ObfuscatedID: "<id>",
												RelatedDocuments: []components.RelatedDocuments{
													components.RelatedDocuments{
														QuerySuggestion: &components.QuerySuggestion{
															Query:      "app:github type:pull author:mortimer",
															Label:      types.String("Mortimer's PRs"),
															Datasource: types.String("github"),
														},
														Results: []components.SearchResult{
															components.SearchResult{
																Title:        types.String("title"),
																URL:          "https://example.com/foo/bar",
																NativeAppURL: types.String("slack://foo/bar"),
																Snippets:     []components.SearchResultSnippet{},
															},
														},
													},
													components.RelatedDocuments{
														QuerySuggestion: &components.QuerySuggestion{
															Query:      "app:github type:pull author:mortimer",
															Label:      types.String("Mortimer's PRs"),
															Datasource: types.String("github"),
														},
														Results: []components.SearchResult{},
													},
													components.RelatedDocuments{
														QuerySuggestion: &components.QuerySuggestion{
															Query:      "app:github type:pull author:mortimer",
															Label:      types.String("Mortimer's PRs"),
															Datasource: types.String("github"),
														},
														Results: []components.SearchResult{},
													},
												},
												Metadata: &components.PersonMetadata{
													Title:      types.String("Actor"),
													Department: types.String("Movies"),
													Email:      types.String("george@example.com"),
													Location:   types.String("Hollywood, CA"),
													Phone:      types.String("6505551234"),
													PhotoURL:   types.String("https://example.com/george.jpg"),
													StartDate:  types.MustNewDateFromString("2000-01-23"),
												},
											},
											CreateTime: types.MustNewTimeFromString("2024-01-11T09:24:54.882Z"),
											UpdateTime: types.MustNewTimeFromString("2024-10-30T08:25:44.878Z"),
											UpdatedBy: &components.Person{
												Name:             "<value>",
												ObfuscatedID:     "<id>",
												RelatedDocuments: []components.RelatedDocuments{},
												Metadata: &components.PersonMetadata{
													Title:      types.String("Actor"),
													Department: types.String("Movies"),
													Email:      types.String("george@example.com"),
													Location:   types.String("Hollywood, CA"),
													Phone:      types.String("6505551234"),
													PhotoURL:   types.String("https://example.com/george.jpg"),
													StartDate:  types.MustNewDateFromString("2000-01-23"),
												},
											},
											Verification: &components.Verification{
												State: components.StateVerified,
												Metadata: &components.VerificationMetadata{
													LastVerifier: &components.Person{
														Name:         "George Clooney",
														ObfuscatedID: "abc123",
													},
													Document: &components.Document{
														Metadata: &components.DocumentMetadata{
															Datasource: types.String("datasource"),
															ObjectType: types.String("Feature Request"),
															Container:  types.String("container"),
															ParentID:   types.String("JIRA_EN-1337"),
															MimeType:   types.String("mimeType"),
															DocumentID: types.String("documentId"),
															CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
															UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
															Author: &components.Person{
																Name:         "name",
																ObfuscatedID: "<id>",
															},
															Components: []string{
																"Backend",
																"Networking",
															},
															Status: types.String("[\"Done\"]"),
															CustomData: map[string]components.CustomDataValue{
																"someCustomField": components.CustomDataValue{},
															},
														},
													},
													Reminders: []components.Reminder{},
													LastReminder: &components.Reminder{
														Assignee: components.Person{
															Name:         "George Clooney",
															ObfuscatedID: "abc123",
														},
														Requestor: &components.Person{
															Name:         "George Clooney",
															ObfuscatedID: "abc123",
														},
														RemindAt: 306618,
													},
													CandidateVerifiers: []components.Person{},
												},
											},
											Board: &components.AnswerBoard{
												Name:         "<value>",
												Description:  "indolent vainly closely",
												AddedRoles:   []components.UserRoleSpecification{},
												RemovedRoles: []components.UserRoleSpecification{},
												AudienceFilters: []components.FacetFilter{
													components.FacetFilter{
														FieldName: types.String("type"),
														Values: []components.FacetFilterValue{
															components.FacetFilterValue{
																Value:        types.String("Spreadsheet"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
															components.FacetFilterValue{
																Value:        types.String("Presentation"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
														},
													},
												},
												ID: 601522,
												Creator: &components.Person{
													Name:         "George Clooney",
													ObfuscatedID: "abc123",
												},
												UpdatedBy: &components.Person{
													Name:         "George Clooney",
													ObfuscatedID: "abc123",
												},
												Roles: []components.UserRoleSpecification{},
											},
											Collections:      []components.Collection{},
											DocumentCategory: types.String("<value>"),
											SourceDocument: &components.Document{
												Metadata: &components.DocumentMetadata{
													Datasource: types.String("datasource"),
													ObjectType: types.String("Feature Request"),
													Container:  types.String("container"),
													ParentID:   types.String("JIRA_EN-1337"),
													MimeType:   types.String("mimeType"),
													DocumentID: types.String("documentId"),
													CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
													UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
													Author: &components.Person{
														Name:         "name",
														ObfuscatedID: "<id>",
													},
													Components: []string{
														"Backend",
														"Networking",
													},
													Status: types.String("[\"Done\"]"),
													CustomData: map[string]components.CustomDataValue{
														"someCustomField": components.CustomDataValue{},
													},
												},
											},
										},
										ExtractedQnA: &components.ExtractedQnA{
											Heading:  types.String("<value>"),
											Question: types.String("<value>"),
											QuestionResult: &components.SearchResult{
												StructuredResults: []components.StructuredResult{},
												Document: &components.Document{
													Metadata: &components.DocumentMetadata{
														Datasource: types.String("datasource"),
														ObjectType: types.String("Feature Request"),
														Container:  types.String("container"),
														ParentID:   types.String("JIRA_EN-1337"),
														MimeType:   types.String("mimeType"),
														DocumentID: types.String("documentId"),
														CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
														UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
														Author: &components.Person{
															Name:         "name",
															ObfuscatedID: "<id>",
														},
														Components: []string{
															"Backend",
															"Networking",
														},
														Status: types.String("[\"Done\"]"),
														CustomData: map[string]components.CustomDataValue{
															"someCustomField": components.CustomDataValue{},
														},
													},
												},
												URL:      "https://gorgeous-custom.org/",
												Snippets: []components.SearchResultSnippet{},
												RelatedResults: []components.RelatedDocuments{
													components.RelatedDocuments{
														QuerySuggestion: &components.QuerySuggestion{
															Query:      "app:github type:pull author:mortimer",
															Label:      types.String("Mortimer's PRs"),
															Datasource: types.String("github"),
														},
														Results: []components.SearchResult{},
													},
												},
												AllClusteredResults: []components.ClusterGroup{
													components.ClusterGroup{
														ClusteredResults: []components.SearchResult{},
														VisibleCountHint: 564329,
													},
												},
												MustIncludeSuggestions: &components.QuerySuggestionList{
													Suggestions: []components.QuerySuggestion{
														components.QuerySuggestion{
															Query:      "app:github type:pull author:mortimer",
															Label:      types.String("Mortimer's PRs"),
															Datasource: types.String("github"),
														},
													},
													Person: &components.Person{
														Name:         "George Clooney",
														ObfuscatedID: "abc123",
													},
												},
												QuerySuggestion: &components.QuerySuggestion{
													Query:      "app:github type:pull author:mortimer",
													Label:      types.String("Mortimer's PRs"),
													Datasource: types.String("github"),
												},
												Pins: []components.PinDocument{},
											},
										},
										Meeting: &components.Meeting{
											ID:          types.String("<id>"),
											Title:       types.String("<value>"),
											Description: types.String("inside dulcimer however sonnet um eek until geez phew"),
											StartTime:   types.MustNewTimeFromString("2025-10-27T12:29:37.632Z"),
											EndTime:     types.MustNewTimeFromString("2024-03-28T07:14:42.093Z"),
											Attendees: &components.CalendarAttendees{
												People: []components.CalendarAttendee{
													components.CalendarAttendee{
														Person: components.Person{
															Name:         "George Clooney",
															ObfuscatedID: "abc123",
														},
													},
													components.CalendarAttendee{
														Person: components.Person{
															Name:         "George Clooney",
															ObfuscatedID: "abc123",
														},
														GroupAttendees: []components.CalendarAttendee{},
													},
												},
											},
										},
										App: &components.AppResult{
											Datasource: "<value>",
											DocType:    types.String("<value>"),
											MimeType:   types.String("<value>"),
											IconURL:    types.String("https://bustling-birdbath.org"),
										},
										Collection: &components.Collection{
											Name:              "<value>",
											Description:       "unless yuck serenade cuddly rundown neighboring considering upliftingly why",
											AddedRoles:        []components.UserRoleSpecification{},
											RemovedRoles:      []components.UserRoleSpecification{},
											AudienceFilters:   []components.FacetFilter{},
											Icon:              types.String("<value>"),
											AdminLocked:       types.Bool(false),
											ParentID:          types.Int64(896826),
											AllowedDatasource: types.String("<value>"),
											ID:                67110,
											CreateTime:        types.MustNewTimeFromString("2024-07-30T13:34:32.569Z"),
											UpdateTime:        types.MustNewTimeFromString("2023-04-24T03:06:17.109Z"),
											Creator: &components.Person{
												Name:             "<value>",
												ObfuscatedID:     "<id>",
												RelatedDocuments: []components.RelatedDocuments{},
												Metadata: &components.PersonMetadata{
													Title:      types.String("Actor"),
													Department: types.String("Movies"),
													Email:      types.String("george@example.com"),
													Location:   types.String("Hollywood, CA"),
													Phone:      types.String("6505551234"),
													PhotoURL:   types.String("https://example.com/george.jpg"),
													StartDate:  types.MustNewDateFromString("2000-01-23"),
												},
											},
											UpdatedBy: &components.Person{
												Name:             "<value>",
												ObfuscatedID:     "<id>",
												RelatedDocuments: []components.RelatedDocuments{},
												Metadata: &components.PersonMetadata{
													Title:      types.String("Actor"),
													Department: types.String("Movies"),
													Email:      types.String("george@example.com"),
													Location:   types.String("Hollywood, CA"),
													Phone:      types.String("6505551234"),
													PhotoURL:   types.String("https://example.com/george.jpg"),
													StartDate:  types.MustNewDateFromString("2000-01-23"),
												},
											},
											ItemCount:  types.Int64(534236),
											ChildCount: types.Int64(215291),
											Items:      []components.CollectionItem{},
											Shortcuts:  []string{},
											Children:   []components.Collection{},
											Roles:      []components.UserRoleSpecification{},
										},
										AnswerBoard: &components.AnswerBoard{
											Name:            "<value>",
											Description:     "innocent downchange ick rudely what youthfully lightly yum",
											AddedRoles:      []components.UserRoleSpecification{},
											RemovedRoles:    []components.UserRoleSpecification{},
											AudienceFilters: []components.FacetFilter{},
											ID:              569914,
											CreateTime:      types.MustNewTimeFromString("2023-02-12T07:51:20.736Z"),
											UpdateTime:      types.MustNewTimeFromString("2024-03-18T02:09:52.587Z"),
											Creator: &components.Person{
												Name:             "<value>",
												ObfuscatedID:     "<id>",
												RelatedDocuments: []components.RelatedDocuments{},
												Metadata: &components.PersonMetadata{
													Title:      types.String("Actor"),
													Department: types.String("Movies"),
													Email:      types.String("george@example.com"),
													Location:   types.String("Hollywood, CA"),
													Phone:      types.String("6505551234"),
													PhotoURL:   types.String("https://example.com/george.jpg"),
													StartDate:  types.MustNewDateFromString("2000-01-23"),
												},
											},
											UpdatedBy: &components.Person{
												Name:             "<value>",
												ObfuscatedID:     "<id>",
												RelatedDocuments: []components.RelatedDocuments{},
												Metadata: &components.PersonMetadata{
													Title:      types.String("Actor"),
													Department: types.String("Movies"),
													Email:      types.String("george@example.com"),
													Location:   types.String("Hollywood, CA"),
													Phone:      types.String("6505551234"),
													PhotoURL:   types.String("https://example.com/george.jpg"),
													StartDate:  types.MustNewDateFromString("2000-01-23"),
												},
											},
											ItemCount: types.Int64(771154),
											Roles:     []components.UserRoleSpecification{},
										},
										Code: &components.Code{
											RepoName: types.String("scio"),
											FileName: types.String("README.md"),
										},
										Shortcut: &components.Shortcut{
											InputAlias:     "<value>",
											DestinationURL: types.String("https://tight-version.org/"),
											Description:    types.String("however generally ew ha sonar usually slow guacamole"),
											Unlisted:       types.Bool(false),
											URLTemplate:    types.String("<value>"),
											CreatedBy: &components.Person{
												Name:         "<value>",
												ObfuscatedID: "<id>",
											},
											CreateTime: types.MustNewTimeFromString("345296"),
											UpdatedBy: &components.Person{
												Name:         "<value>",
												ObfuscatedID: "<id>",
											},
											UpdateTime: types.MustNewTimeFromString("68379"),
										},
										QuerySuggestions: &components.QuerySuggestionList{
											Suggestions: []components.QuerySuggestion{},
											Person: &components.Person{
												Name:             "<value>",
												ObfuscatedID:     "<id>",
												RelatedDocuments: []components.RelatedDocuments{},
												Metadata: &components.PersonMetadata{
													Title:      types.String("Actor"),
													Department: types.String("Movies"),
													Email:      types.String("george@example.com"),
													Location:   types.String("Hollywood, CA"),
													Phone:      types.String("6505551234"),
													PhotoURL:   types.String("https://example.com/george.jpg"),
													StartDate:  types.MustNewDateFromString("2000-01-23"),
												},
											},
										},
										RelatedDocuments: []components.RelatedDocuments{},
										RelatedQuestion: &components.RelatedQuestion{
											Question: types.String("<value>"),
											Answer:   types.String("<value>"),
											Ranges:   []components.TextRange{},
										},
										Disambiguation: &components.Disambiguation{
											Name: types.String("<value>"),
											ID:   types.String("<id>"),
											Type: components.EntityTypePerson.ToPointer(),
										},
										Snippets:      []components.SearchResultSnippet{},
										TrackingToken: types.String("string"),
										Prominence:    components.ProminenceHero.ToPointer(),
										Source:        components.StructuredResultSourceExpertDetection.ToPointer(),
									},
								},
								TrackingToken: types.String("string"),
								Text:          types.String("string"),
								QuerySuggestion: &components.QuerySuggestion{
									Query:      "app:github type:pull author:mortimer",
									Label:      types.String("Mortimer's PRs"),
									Datasource: types.String("github"),
								},
								File: &components.ChatFile{
									ID:   types.String("FILE_1234"),
									URL:  types.String("www.google.com"),
									Name: types.String("sample.pdf"),
									Metadata: &components.ChatFileMetadata{
										Status:        components.ChatFileStatusProcessing.ToPointer(),
										UploadTime:    types.Int64(0),
										ProcessedSize: types.Int64(0),
										FailureReason: components.ChatFileFailureReasonParseFailed.ToPointer(),
										MimeType:      types.String("string"),
									},
								},
								Action: &components.ToolInfo{
									Metadata: &components.ToolMetadata{
										Type:               components.ToolMetadataTypeRetrieval,
										Name:               "string",
										DisplayName:        "string",
										ToolID:             types.String("string"),
										DisplayDescription: "string",
										LogoURL:            types.String("string"),
										ObjectName:         types.String("[\"HR ticket\",\"Email\",\"Chat message\"]"),
										KnowledgeType:      components.KnowledgeTypeNeutralKnowledge.ToPointer(),
										CreatedBy: &components.PersonObject{
											Name:         "<value>",
											ObfuscatedID: "<id>",
										},
										LastUpdatedBy: &components.PersonObject{
											Name:         "<value>",
											ObfuscatedID: "<id>",
										},
										CreatedAt:       types.MustNewTimeFromString("2019-08-24T14:15:22Z"),
										LastUpdatedAt:   types.MustNewTimeFromString("2019-08-24T14:15:22Z"),
										WriteActionType: components.WriteActionTypeRedirect.ToPointer(),
										AuthType:        components.AuthTypeNone.ToPointer(),
										Auth: &components.AuthConfig{
											IsOnPrem:         types.Bool(true),
											UsesCentralAuth:  types.Bool(false),
											Type:             components.AuthConfigTypeDwd.ToPointer(),
											GrantType:        components.GrantTypeAuthCode.ToPointer(),
											Status:           components.AuthConfigStatusAuthorized.ToPointer(),
											ClientURL:        types.String("https://woeful-trench.com/"),
											Scopes:           []string{},
											Audiences:        []string{},
											AuthorizationURL: types.String("https://imaginative-premium.com/"),
											LastAuthorizedAt: types.MustNewTimeFromString("2023-12-19T20:03:14.149Z"),
										},
										Permissions:       &components.ObjectPermissions{},
										UsageInstructions: types.String("string"),
										IsSetupFinished:   types.Bool(true),
									},
									Parameters: map[string]components.WriteActionParameter{
										"property1": components.WriteActionParameter{
											Type:           components.WriteActionParameterTypeUnknown.ToPointer(),
											DisplayName:    types.String("Shemar63"),
											Value:          types.String("<value>"),
											IsRequired:     types.Bool(true),
											Description:    types.String("handle unlike unlike fen gently or exotic mortally nor"),
											PossibleValues: []components.PossibleValue{},
										},
										"property2": components.WriteActionParameter{
											Type:           components.WriteActionParameterTypeString.ToPointer(),
											DisplayName:    types.String("Ahmad_Reichel95"),
											Value:          types.String("<value>"),
											IsRequired:     types.Bool(false),
											Description:    types.String("mmm premise pro instead bleakly starch including per ill-fated"),
											PossibleValues: []components.PossibleValue{},
										},
									},
								},
							},
						},
						Ts:                   types.String("string"),
						MessageID:            types.String("string"),
						MessageTrackingToken: types.String("string"),
						MessageType:          components.MessageTypeUpdate.ToPointer(),
						HasMoreFragments:     types.Bool(true),
					},
				},
			},
			TrackingToken: types.String("string"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
