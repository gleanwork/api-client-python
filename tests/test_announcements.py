"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from datetime import date
from glean import Glean, models
from glean.utils import parse_datetime
import os
from tests.test_client import create_test_http_client


def test_announcements_createannouncement():
    test_http_client = create_test_http_client("createannouncement")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.announcements.create(
            start_time=parse_datetime("2025-06-06T03:52:44.951Z"),
            end_time=parse_datetime("2023-02-08T06:32:38.642Z"),
            title="<value>",
            body={
                "text": "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                "structured_list": [],
            },
            audience_filters=[
                {
                    "field_name": "type",
                    "values": [
                        {
                            "value": "Spreadsheet",
                            "relation_type": models.RelationType.EQUALS,
                        },
                        {
                            "value": "Presentation",
                            "relation_type": models.RelationType.EQUALS,
                        },
                    ],
                },
            ],
        )
        assert res is not None
        assert res == models.Announcement(
            body=models.StructuredText(
                text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                structured_list=[],
            ),
            audience_filters=[
                models.FacetFilter(
                    field_name="type",
                    values=[
                        models.FacetFilterValue(
                            value="Spreadsheet",
                            relation_type=models.RelationType.EQUALS,
                        ),
                        models.FacetFilterValue(
                            value="Presentation",
                            relation_type=models.RelationType.EQUALS,
                        ),
                    ],
                ),
            ],
            draft_id=342,
            author=models.Person(
                name="George Clooney",
                obfuscated_id="abc123",
                related_documents=[],
                metadata=models.PersonMetadata(
                    type=models.PersonMetadataType.FULL_TIME,
                    title="Actor",
                    department="Movies",
                    email="george@example.com",
                    location="Hollywood, CA",
                    management_chain=[],
                    phone="6505551234",
                    photo_url="https://example.com/george.jpg",
                    reports=[],
                    start_date=date.fromisoformat("2000-01-23"),
                    datasource_profile=[],
                    query_suggestions=models.QuerySuggestionList(
                        suggestions=[],
                    ),
                    invite_info=models.InviteInfo(
                        invites=[],
                    ),
                    custom_fields=[],
                    badges=[],
                ),
            ),
            updated_by=models.Person(
                name="George Clooney",
                obfuscated_id="abc123",
            ),
            source_document=models.Document(
                metadata=models.DocumentMetadata(
                    datasource="datasource",
                    object_type="Feature Request",
                    container="container",
                    parent_id="JIRA_EN-1337",
                    mime_type="mimeType",
                    document_id="documentId",
                    create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                    update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                    owner=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    mentioned_people=[],
                    components=[
                        "Backend",
                        "Networking",
                    ],
                    status='["Done"]',
                    pins=[],
                    assigned_to=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    collections=[],
                    interactions=models.DocumentInteractions(
                        reacts=[],
                        shares=[],
                    ),
                    verification=models.Verification(
                        state=models.State.VERIFIED,
                        metadata=models.VerificationMetadata(
                            last_verifier=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            reminders=[],
                            last_reminder=models.Reminder(
                                assignee=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                requestor=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                remind_at=949753,
                            ),
                            candidate_verifiers=[],
                        ),
                    ),
                    shortcuts=[],
                    custom_data={},
                    contact_person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    ancestors=[],
                ),
            ),
        )


def test_announcements_createdraftannouncement():
    test_http_client = create_test_http_client("createdraftannouncement")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.announcements.create_draft(
            body={
                "text": "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                "structured_list": [],
            },
            audience_filters=[
                {
                    "field_name": "type",
                    "values": [
                        {
                            "value": "Spreadsheet",
                            "relation_type": models.RelationType.EQUALS,
                        },
                        {
                            "value": "Presentation",
                            "relation_type": models.RelationType.EQUALS,
                        },
                    ],
                },
            ],
        )
        assert res is not None
        assert res == models.Announcement(
            body=models.StructuredText(
                text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                structured_list=[],
            ),
            audience_filters=[
                models.FacetFilter(
                    field_name="type",
                    values=[
                        models.FacetFilterValue(
                            value="Spreadsheet",
                            relation_type=models.RelationType.EQUALS,
                        ),
                        models.FacetFilterValue(
                            value="Presentation",
                            relation_type=models.RelationType.EQUALS,
                        ),
                    ],
                ),
            ],
            draft_id=342,
            author=models.Person(
                name="George Clooney",
                obfuscated_id="abc123",
                related_documents=[],
                metadata=models.PersonMetadata(
                    type=models.PersonMetadataType.FULL_TIME,
                    title="Actor",
                    department="Movies",
                    email="george@example.com",
                    location="Hollywood, CA",
                    management_chain=[],
                    phone="6505551234",
                    photo_url="https://example.com/george.jpg",
                    reports=[],
                    start_date=date.fromisoformat("2000-01-23"),
                    datasource_profile=[],
                    query_suggestions=models.QuerySuggestionList(
                        suggestions=[],
                    ),
                    invite_info=models.InviteInfo(
                        invites=[],
                    ),
                    custom_fields=[],
                    badges=[],
                ),
            ),
            updated_by=models.Person(
                name="George Clooney",
                obfuscated_id="abc123",
            ),
            source_document=models.Document(
                metadata=models.DocumentMetadata(
                    datasource="datasource",
                    object_type="Feature Request",
                    container="container",
                    parent_id="JIRA_EN-1337",
                    mime_type="mimeType",
                    document_id="documentId",
                    create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                    update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                    owner=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    mentioned_people=[],
                    components=[
                        "Backend",
                        "Networking",
                    ],
                    status='["Done"]',
                    pins=[],
                    assigned_to=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    collections=[],
                    interactions=models.DocumentInteractions(
                        reacts=[],
                        shares=[],
                    ),
                    verification=models.Verification(
                        state=models.State.VERIFIED,
                        metadata=models.VerificationMetadata(
                            last_verifier=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            reminders=[],
                            last_reminder=models.Reminder(
                                assignee=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                requestor=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                remind_at=949753,
                            ),
                            candidate_verifiers=[],
                        ),
                    ),
                    shortcuts=[],
                    custom_data={},
                    contact_person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    ancestors=[],
                ),
            ),
        )


def test_announcements_deleteannouncement():
    test_http_client = create_test_http_client("deleteannouncement")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.client.announcements.delete(id=537618)


def test_announcements_deletedraftannouncement():
    test_http_client = create_test_http_client("deletedraftannouncement")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.client.announcements.delete_draft(id=537618)


def test_announcements_getannouncement():
    test_http_client = create_test_http_client("getannouncement")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.announcements.get(id=176259)
        assert res is not None
        assert res == models.GetAnnouncementResponse(
            announcement=models.Announcement(
                body=models.StructuredText(
                    text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                    structured_list=[],
                ),
                audience_filters=[
                    models.FacetFilter(
                        field_name="type",
                        values=[
                            models.FacetFilterValue(
                                value="Spreadsheet",
                                relation_type=models.RelationType.EQUALS,
                            ),
                            models.FacetFilterValue(
                                value="Presentation",
                                relation_type=models.RelationType.EQUALS,
                            ),
                        ],
                    ),
                ],
                draft_id=342,
                author=models.Person(
                    name="George Clooney",
                    obfuscated_id="abc123",
                    related_documents=[],
                    metadata=models.PersonMetadata(
                        type=models.PersonMetadataType.FULL_TIME,
                        title="Actor",
                        department="Movies",
                        email="george@example.com",
                        location="Hollywood, CA",
                        management_chain=[],
                        phone="6505551234",
                        photo_url="https://example.com/george.jpg",
                        reports=[],
                        start_date=date.fromisoformat("2000-01-23"),
                        datasource_profile=[],
                        query_suggestions=models.QuerySuggestionList(
                            suggestions=[],
                        ),
                        invite_info=models.InviteInfo(
                            invites=[],
                        ),
                        custom_fields=[],
                        badges=[],
                    ),
                ),
                updated_by=models.Person(
                    name="George Clooney",
                    obfuscated_id="abc123",
                ),
                source_document=models.Document(
                    metadata=models.DocumentMetadata(
                        datasource="datasource",
                        object_type="Feature Request",
                        container="container",
                        parent_id="JIRA_EN-1337",
                        mime_type="mimeType",
                        document_id="documentId",
                        create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        owner=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        mentioned_people=[],
                        components=[
                            "Backend",
                            "Networking",
                        ],
                        status='["Done"]',
                        pins=[],
                        assigned_to=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        collections=[],
                        interactions=models.DocumentInteractions(
                            reacts=[],
                            shares=[],
                        ),
                        verification=models.Verification(
                            state=models.State.VERIFIED,
                            metadata=models.VerificationMetadata(
                                last_verifier=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                reminders=[],
                                last_reminder=models.Reminder(
                                    assignee=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    requestor=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    remind_at=949753,
                                ),
                                candidate_verifiers=[],
                            ),
                        ),
                        shortcuts=[],
                        custom_data={},
                        contact_person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        ancestors=[],
                    ),
                ),
            ),
        )


def test_announcements_getdraftannouncement():
    test_http_client = create_test_http_client("getdraftannouncement")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.announcements.get_draft(id=176259)
        assert res is not None
        assert res == models.GetDraftAnnouncementResponse(
            announcement=models.Announcement(
                body=models.StructuredText(
                    text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                    structured_list=[],
                ),
                audience_filters=[
                    models.FacetFilter(
                        field_name="type",
                        values=[
                            models.FacetFilterValue(
                                value="Spreadsheet",
                                relation_type=models.RelationType.EQUALS,
                            ),
                            models.FacetFilterValue(
                                value="Presentation",
                                relation_type=models.RelationType.EQUALS,
                            ),
                        ],
                    ),
                ],
                draft_id=342,
                author=models.Person(
                    name="George Clooney",
                    obfuscated_id="abc123",
                    related_documents=[],
                    metadata=models.PersonMetadata(
                        type=models.PersonMetadataType.FULL_TIME,
                        title="Actor",
                        department="Movies",
                        email="george@example.com",
                        location="Hollywood, CA",
                        management_chain=[],
                        phone="6505551234",
                        photo_url="https://example.com/george.jpg",
                        reports=[],
                        start_date=date.fromisoformat("2000-01-23"),
                        datasource_profile=[],
                        query_suggestions=models.QuerySuggestionList(
                            suggestions=[],
                        ),
                        invite_info=models.InviteInfo(
                            invites=[],
                        ),
                        custom_fields=[],
                        badges=[],
                    ),
                ),
                updated_by=models.Person(
                    name="George Clooney",
                    obfuscated_id="abc123",
                ),
                source_document=models.Document(
                    metadata=models.DocumentMetadata(
                        datasource="datasource",
                        object_type="Feature Request",
                        container="container",
                        parent_id="JIRA_EN-1337",
                        mime_type="mimeType",
                        document_id="documentId",
                        create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        owner=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        mentioned_people=[],
                        components=[
                            "Backend",
                            "Networking",
                        ],
                        status='["Done"]',
                        pins=[],
                        assigned_to=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        collections=[],
                        interactions=models.DocumentInteractions(
                            reacts=[],
                            shares=[],
                        ),
                        verification=models.Verification(
                            state=models.State.VERIFIED,
                            metadata=models.VerificationMetadata(
                                last_verifier=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                reminders=[],
                                last_reminder=models.Reminder(
                                    assignee=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    requestor=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    remind_at=949753,
                                ),
                                candidate_verifiers=[],
                            ),
                        ),
                        shortcuts=[],
                        custom_data={},
                        contact_person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        ancestors=[],
                    ),
                ),
            ),
        )


def test_announcements_listannouncements():
    test_http_client = create_test_http_client("listannouncements")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.announcements.list()
        assert res is not None
        assert res == models.ListAnnouncementsResponse(
            announcements=[
                models.Announcement(
                    draft_id=342,
                ),
            ],
        )


def test_announcements_previewannouncement():
    test_http_client = create_test_http_client("previewannouncement")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.announcements.preview(
            text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light."
        )
        assert res is not None
        assert res == models.PreviewStructuredTextResponse(
            structured_text=models.StructuredText(
                text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                structured_list=[],
            ),
            combined_answer_text=models.StructuredText(
                text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
            ),
        )


def test_announcements_previewannouncementdraft():
    test_http_client = create_test_http_client("previewannouncementdraft")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.announcements.preview_draft(
            draft=models.UgcDraft(
                announcement=models.AnnouncementMutableProperties(
                    body=models.StructuredText(
                        text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                        structured_list=[],
                    ),
                    audience_filters=[
                        models.FacetFilter(
                            field_name="type",
                            values=[
                                models.FacetFilterValue(
                                    value="Spreadsheet",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                                models.FacetFilterValue(
                                    value="Presentation",
                                    relation_type=models.RelationType.EQUALS,
                                ),
                            ],
                        ),
                    ],
                ),
                answer=models.AnswerMutableProperties(
                    question="Why is the sky blue?",
                    body_text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                    audience_filters=[],
                    added_roles=[
                        models.UserRoleSpecification(
                            person=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                                related_documents=[],
                                metadata=models.PersonMetadata(
                                    type=models.PersonMetadataType.FULL_TIME,
                                    title="Actor",
                                    department="Movies",
                                    email="george@example.com",
                                    location="Hollywood, CA",
                                    management_chain=[],
                                    phone="6505551234",
                                    photo_url="https://example.com/george.jpg",
                                    reports=[],
                                    start_date=date.fromisoformat("2000-01-23"),
                                    datasource_profile=[],
                                    query_suggestions=models.QuerySuggestionList(
                                        suggestions=[],
                                    ),
                                    invite_info=models.InviteInfo(
                                        invites=[],
                                    ),
                                    custom_fields=[],
                                    badges=[],
                                ),
                            ),
                            role=models.UserRole.VIEWER,
                        ),
                    ],
                    removed_roles=[
                        models.UserRoleSpecification(
                            role=models.UserRole.VIEWER,
                        ),
                    ],
                    roles=[
                        models.UserRoleSpecification(
                            role=models.UserRole.VIEWER,
                        ),
                        models.UserRoleSpecification(
                            role=models.UserRole.VIEWER,
                        ),
                        models.UserRoleSpecification(
                            role=models.UserRole.VIEWER,
                        ),
                    ],
                ),
            )
        )
        assert res is not None
        assert res == models.PreviewUgcResponse(
            announcement=models.Announcement(
                body=models.StructuredText(
                    text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                    structured_list=[],
                ),
                audience_filters=[
                    models.FacetFilter(
                        field_name="type",
                        values=[
                            models.FacetFilterValue(
                                value="Spreadsheet",
                                relation_type=models.RelationType.EQUALS,
                            ),
                            models.FacetFilterValue(
                                value="Presentation",
                                relation_type=models.RelationType.EQUALS,
                            ),
                        ],
                    ),
                ],
                draft_id=342,
                author=models.Person(
                    name="George Clooney",
                    obfuscated_id="abc123",
                    related_documents=[],
                    metadata=models.PersonMetadata(
                        type=models.PersonMetadataType.FULL_TIME,
                        title="Actor",
                        department="Movies",
                        email="george@example.com",
                        location="Hollywood, CA",
                        management_chain=[],
                        phone="6505551234",
                        photo_url="https://example.com/george.jpg",
                        reports=[],
                        start_date=date.fromisoformat("2000-01-23"),
                        datasource_profile=[],
                        query_suggestions=models.QuerySuggestionList(
                            suggestions=[],
                        ),
                        invite_info=models.InviteInfo(
                            invites=[],
                        ),
                        custom_fields=[],
                        badges=[],
                    ),
                ),
                updated_by=models.Person(
                    name="George Clooney",
                    obfuscated_id="abc123",
                ),
                source_document=models.Document(
                    metadata=models.DocumentMetadata(
                        datasource="datasource",
                        object_type="Feature Request",
                        container="container",
                        parent_id="JIRA_EN-1337",
                        mime_type="mimeType",
                        document_id="documentId",
                        create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                        owner=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        mentioned_people=[],
                        components=[
                            "Backend",
                            "Networking",
                        ],
                        status='["Done"]',
                        pins=[],
                        assigned_to=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        collections=[],
                        interactions=models.DocumentInteractions(
                            reacts=[],
                            shares=[],
                        ),
                        verification=models.Verification(
                            state=models.State.VERIFIED,
                            metadata=models.VerificationMetadata(
                                last_verifier=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                reminders=[],
                                last_reminder=models.Reminder(
                                    assignee=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    requestor=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    remind_at=949753,
                                ),
                                candidate_verifiers=[],
                            ),
                        ),
                        shortcuts=[],
                        custom_data={},
                        contact_person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        ancestors=[],
                    ),
                ),
            ),
            answer=models.Answer(
                id=3,
                doc_id="ANSWERS_answer_3",
                question="Why is the sky blue?",
                body_text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                audience_filters=[],
                added_roles=[],
                removed_roles=[],
                roles=[],
                combined_answer_text=models.StructuredText(
                    text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                ),
                likes=models.AnswerLikes(
                    liked_by=[],
                    liked_by_user=True,
                    num_likes=876250,
                ),
                board=models.AnswerBoard(
                    name="<value>",
                    description="aha amid lest contravene how agile in unblinking whereas",
                    audience_filters=[],
                    id=53123,
                    creator=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                ),
            ),
        )


def test_announcements_publishdraftannouncement():
    test_http_client = create_test_http_client("publishdraftannouncement")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.client.announcements.publish(id=253695)


def test_announcements_unpublishannouncement():
    test_http_client = create_test_http_client("unpublishannouncement")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.announcements.unpublish(id=757872)
        assert res is not None
        assert res == models.Announcement(
            body=models.StructuredText(
                text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                structured_list=[],
            ),
            audience_filters=[
                models.FacetFilter(
                    field_name="type",
                    values=[
                        models.FacetFilterValue(
                            value="Spreadsheet",
                            relation_type=models.RelationType.EQUALS,
                        ),
                        models.FacetFilterValue(
                            value="Presentation",
                            relation_type=models.RelationType.EQUALS,
                        ),
                    ],
                ),
            ],
            draft_id=342,
            author=models.Person(
                name="George Clooney",
                obfuscated_id="abc123",
                related_documents=[],
                metadata=models.PersonMetadata(
                    type=models.PersonMetadataType.FULL_TIME,
                    title="Actor",
                    department="Movies",
                    email="george@example.com",
                    location="Hollywood, CA",
                    management_chain=[],
                    phone="6505551234",
                    photo_url="https://example.com/george.jpg",
                    reports=[],
                    start_date=date.fromisoformat("2000-01-23"),
                    datasource_profile=[],
                    query_suggestions=models.QuerySuggestionList(
                        suggestions=[],
                    ),
                    invite_info=models.InviteInfo(
                        invites=[],
                    ),
                    custom_fields=[],
                    badges=[],
                ),
            ),
            updated_by=models.Person(
                name="George Clooney",
                obfuscated_id="abc123",
            ),
            source_document=models.Document(
                metadata=models.DocumentMetadata(
                    datasource="datasource",
                    object_type="Feature Request",
                    container="container",
                    parent_id="JIRA_EN-1337",
                    mime_type="mimeType",
                    document_id="documentId",
                    create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                    update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                    owner=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    mentioned_people=[],
                    components=[
                        "Backend",
                        "Networking",
                    ],
                    status='["Done"]',
                    pins=[],
                    assigned_to=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    collections=[],
                    interactions=models.DocumentInteractions(
                        reacts=[],
                        shares=[],
                    ),
                    verification=models.Verification(
                        state=models.State.VERIFIED,
                        metadata=models.VerificationMetadata(
                            last_verifier=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            reminders=[],
                            last_reminder=models.Reminder(
                                assignee=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                requestor=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                remind_at=949753,
                            ),
                            candidate_verifiers=[],
                        ),
                    ),
                    shortcuts=[],
                    custom_data={},
                    contact_person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    ancestors=[],
                ),
            ),
        )


def test_announcements_updateannouncement():
    test_http_client = create_test_http_client("updateannouncement")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.announcements.update(
            start_time=parse_datetime("2023-03-27T20:23:14.802Z"),
            end_time=parse_datetime("2023-01-26T11:51:24.312Z"),
            title="<value>",
            id=72381,
            body={
                "text": "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                "structured_list": [],
            },
            audience_filters=[
                {
                    "field_name": "type",
                    "values": [
                        {
                            "value": "Spreadsheet",
                            "relation_type": models.RelationType.EQUALS,
                        },
                        {
                            "value": "Presentation",
                            "relation_type": models.RelationType.EQUALS,
                        },
                    ],
                },
            ],
        )
        assert res is not None
        assert res == models.Announcement(
            body=models.StructuredText(
                text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                structured_list=[],
            ),
            audience_filters=[
                models.FacetFilter(
                    field_name="type",
                    values=[
                        models.FacetFilterValue(
                            value="Spreadsheet",
                            relation_type=models.RelationType.EQUALS,
                        ),
                        models.FacetFilterValue(
                            value="Presentation",
                            relation_type=models.RelationType.EQUALS,
                        ),
                    ],
                ),
            ],
            draft_id=342,
            author=models.Person(
                name="George Clooney",
                obfuscated_id="abc123",
                related_documents=[],
                metadata=models.PersonMetadata(
                    type=models.PersonMetadataType.FULL_TIME,
                    title="Actor",
                    department="Movies",
                    email="george@example.com",
                    location="Hollywood, CA",
                    management_chain=[],
                    phone="6505551234",
                    photo_url="https://example.com/george.jpg",
                    reports=[],
                    start_date=date.fromisoformat("2000-01-23"),
                    datasource_profile=[],
                    query_suggestions=models.QuerySuggestionList(
                        suggestions=[],
                    ),
                    invite_info=models.InviteInfo(
                        invites=[],
                    ),
                    custom_fields=[],
                    badges=[],
                ),
            ),
            updated_by=models.Person(
                name="George Clooney",
                obfuscated_id="abc123",
            ),
            source_document=models.Document(
                metadata=models.DocumentMetadata(
                    datasource="datasource",
                    object_type="Feature Request",
                    container="container",
                    parent_id="JIRA_EN-1337",
                    mime_type="mimeType",
                    document_id="documentId",
                    create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                    update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                    owner=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    mentioned_people=[],
                    components=[
                        "Backend",
                        "Networking",
                    ],
                    status='["Done"]',
                    pins=[],
                    assigned_to=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    collections=[],
                    interactions=models.DocumentInteractions(
                        reacts=[],
                        shares=[],
                    ),
                    verification=models.Verification(
                        state=models.State.VERIFIED,
                        metadata=models.VerificationMetadata(
                            last_verifier=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            reminders=[],
                            last_reminder=models.Reminder(
                                assignee=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                requestor=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                remind_at=949753,
                            ),
                            candidate_verifiers=[],
                        ),
                    ),
                    shortcuts=[],
                    custom_data={},
                    contact_person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    ancestors=[],
                ),
            ),
        )


def test_announcements_updatedraftannouncement():
    test_http_client = create_test_http_client("updatedraftannouncement")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.announcements.update_draft(
            draft_id=819813,
            body={
                "text": "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                "structured_list": [],
            },
            audience_filters=[
                {
                    "field_name": "type",
                    "values": [
                        {
                            "value": "Spreadsheet",
                            "relation_type": models.RelationType.EQUALS,
                        },
                        {
                            "value": "Presentation",
                            "relation_type": models.RelationType.EQUALS,
                        },
                    ],
                },
            ],
        )
        assert res is not None
        assert res == models.Announcement(
            body=models.StructuredText(
                text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                structured_list=[],
            ),
            audience_filters=[
                models.FacetFilter(
                    field_name="type",
                    values=[
                        models.FacetFilterValue(
                            value="Spreadsheet",
                            relation_type=models.RelationType.EQUALS,
                        ),
                        models.FacetFilterValue(
                            value="Presentation",
                            relation_type=models.RelationType.EQUALS,
                        ),
                    ],
                ),
            ],
            draft_id=342,
            author=models.Person(
                name="George Clooney",
                obfuscated_id="abc123",
                related_documents=[],
                metadata=models.PersonMetadata(
                    type=models.PersonMetadataType.FULL_TIME,
                    title="Actor",
                    department="Movies",
                    email="george@example.com",
                    location="Hollywood, CA",
                    management_chain=[],
                    phone="6505551234",
                    photo_url="https://example.com/george.jpg",
                    reports=[],
                    start_date=date.fromisoformat("2000-01-23"),
                    datasource_profile=[],
                    query_suggestions=models.QuerySuggestionList(
                        suggestions=[],
                    ),
                    invite_info=models.InviteInfo(
                        invites=[],
                    ),
                    custom_fields=[],
                    badges=[],
                ),
            ),
            updated_by=models.Person(
                name="George Clooney",
                obfuscated_id="abc123",
            ),
            source_document=models.Document(
                metadata=models.DocumentMetadata(
                    datasource="datasource",
                    object_type="Feature Request",
                    container="container",
                    parent_id="JIRA_EN-1337",
                    mime_type="mimeType",
                    document_id="documentId",
                    create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                    update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                    owner=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    mentioned_people=[],
                    components=[
                        "Backend",
                        "Networking",
                    ],
                    status='["Done"]',
                    pins=[],
                    assigned_to=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    collections=[],
                    interactions=models.DocumentInteractions(
                        reacts=[],
                        shares=[],
                    ),
                    verification=models.Verification(
                        state=models.State.VERIFIED,
                        metadata=models.VerificationMetadata(
                            last_verifier=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            reminders=[],
                            last_reminder=models.Reminder(
                                assignee=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                requestor=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                remind_at=949753,
                            ),
                            candidate_verifiers=[],
                        ),
                    ),
                    shortcuts=[],
                    custom_data={},
                    contact_person=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                    ),
                    ancestors=[],
                ),
            ),
        )
