"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from glean import Glean, models
import os
import pytest
from tests.test_client import create_test_http_client


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/debug/{datasource}/status.test referencing operation post_/debug/{datasource}/status not found in document`]"
)
def test_troubleshooting_post_debug_datasource_status():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/checkdocumentaccess.test referencing operation post_/checkdocumentaccess not found in document`]"
)
def test_troubleshooting_post_checkdocumentaccess():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/getdocumentstatus.test referencing operation post_/getdocumentstatus not found in document`]"
)
def test_troubleshooting_post_getdocumentstatus():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/getdocumentcount.test referencing operation post_/getdocumentcount not found in document`]"
)
def test_troubleshooting_post_getdocumentcount():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/getusercount.test referencing operation post_/getusercount not found in document`]"
)
def test_troubleshooting_post_getusercount():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/api/index/v1/debug/{datasource}/status.test contains criterion simple with invalid condition`, `workflow step post_/api/index/v1/debug/{datasource}/status.test does not contain $contentType successCriteria and required for response body assertion`]"
)
def test_troubleshooting_post_api_index_v1_debug_datasource_status():
    pass


def test_troubleshooting_post_api_index_v1_checkdocumentaccess():
    test_http_client = create_test_http_client("post_/api/index/v1/checkdocumentaccess")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.index.troubleshooting.check_access(
            datasource="<value>",
            object_type="<value>",
            doc_id="<id>",
            user_email="<value>",
        )
        assert res is not None
        assert res == models.CheckDocumentAccessResponse()


def test_troubleshooting_post_api_index_v1_getdocumentstatus():
    test_http_client = create_test_http_client("post_/api/index/v1/getdocumentstatus")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.index.troubleshooting.get_status(
            datasource="<value>", object_type="<value>", doc_id="<id>"
        )
        assert res is not None
        assert res == models.GetDocumentStatusResponse()


def test_troubleshooting_post_api_index_v1_getdocumentcount():
    test_http_client = create_test_http_client("post_/api/index/v1/getdocumentcount")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.index.troubleshooting.get_document_count(datasource="<value>")
        assert res is not None
        assert res == models.GetDocumentCountResponse()


def test_troubleshooting_post_api_index_v1_getusercount():
    test_http_client = create_test_http_client("post_/api/index/v1/getusercount")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.index.troubleshooting.get_user_count(datasource="<value>")
        assert res is not None
        assert res == models.GetUserCountResponse()
