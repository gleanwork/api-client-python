"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from glean import Glean
import os
import pytest
from tests.test_client import create_test_http_client


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/api/index/v1/debug/{datasource}/status.test contains criterion simple with invalid condition`, `workflow step post_/api/index/v1/debug/{datasource}/status.test does not contain $contentType successCriteria and required for response body assertion`]"
)
def test_troubleshooting_post_api_index_v1_debug_datasource_status():
    pass


def test_troubleshooting_post_api_index_v1_checkdocumentaccess():
    test_http_client = create_test_http_client("post_/api/index/v1/checkdocumentaccess")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_token=os.getenv("GLEAN_API_TOKEN", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.indexing.documents.check_access(
            datasource="<value>",
            object_type="<value>",
            doc_id="<id>",
            user_email="<value>",
        )
        assert res is not None


def test_troubleshooting_post_api_index_v1_getdocumentstatus():
    test_http_client = create_test_http_client("post_/api/index/v1/getdocumentstatus")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_token=os.getenv("GLEAN_API_TOKEN", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.indexing.documents.status(
            datasource="<value>", object_type="<value>", doc_id="<id>"
        )
        assert res is not None


def test_troubleshooting_post_api_index_v1_getdocumentcount():
    test_http_client = create_test_http_client("post_/api/index/v1/getdocumentcount")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_token=os.getenv("GLEAN_API_TOKEN", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.indexing.documents.count(datasource="<value>")
        assert res is not None


def test_troubleshooting_post_api_index_v1_getusercount():
    test_http_client = create_test_http_client("post_/api/index/v1/getusercount")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_token=os.getenv("GLEAN_API_TOKEN", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.indexing.people.count(datasource="<value>")
        assert res is not None
