"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from datetime import date
from glean import Glean, models
from glean.utils import parse_datetime
import os
from tests.test_client import create_test_http_client


def test_insights_insights():
    test_http_client = create_test_http_client("insights")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.insights.get(
            categories=[
                models.InsightsRequestCategory.ANSWERS,
                models.InsightsRequestCategory.ANSWERS,
                models.InsightsRequestCategory.ANSWERS,
            ]
        )
        assert res is not None
        assert res == models.InsightsResponse(
            users=models.UserInsightsResponse(
                activity_insights=[
                    models.UserActivityInsight(
                        user=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            related_documents=[],
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[],
                                query_suggestions=models.QuerySuggestionList(
                                    suggestions=[],
                                ),
                                invite_info=models.InviteInfo(
                                    invites=[],
                                ),
                                custom_fields=[],
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        activity=models.ActivityEnum.ALL,
                    ),
                    models.UserActivityInsight(
                        user=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        activity=models.ActivityEnum.ALL,
                    ),
                ],
                inactive_insights=[
                    models.UserActivityInsight(
                        user=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        activity=models.ActivityEnum.ALL,
                    ),
                    models.UserActivityInsight(
                        user=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        activity=models.ActivityEnum.ALL,
                    ),
                ],
            ),
            content=models.ContentInsightsResponse(
                document_insights=[
                    models.DocumentInsight(
                        document=models.Document(
                            metadata=models.DocumentMetadata(
                                datasource="datasource",
                                object_type="Feature Request",
                                container="container",
                                parent_id="JIRA_EN-1337",
                                mime_type="mimeType",
                                document_id="documentId",
                                create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                                update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                                author=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                owner=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                mentioned_people=[],
                                components=[
                                    "Backend",
                                    "Networking",
                                ],
                                status='["Done"]',
                                pins=[],
                                assigned_to=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                updated_by=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                collections=[],
                                interactions=models.DocumentInteractions(
                                    reacts=[],
                                    shares=[],
                                ),
                                verification=models.Verification(
                                    state=models.State.VERIFIED,
                                    metadata=models.VerificationMetadata(
                                        last_verifier=models.Person(
                                            name="George Clooney",
                                            obfuscated_id="abc123",
                                        ),
                                        reminders=[],
                                        last_reminder=models.Reminder(
                                            assignee=models.Person(
                                                name="George Clooney",
                                                obfuscated_id="abc123",
                                            ),
                                            requestor=models.Person(
                                                name="George Clooney",
                                                obfuscated_id="abc123",
                                            ),
                                            remind_at=949753,
                                        ),
                                        candidate_verifiers=[],
                                    ),
                                ),
                                shortcuts=[],
                                custom_data={
                                    "someCustomField": models.CustomDataValue(),
                                },
                                contact_person=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                ancestors=[],
                            ),
                        ),
                    ),
                    models.DocumentInsight(
                        document=models.Document(),
                    ),
                ],
            ),
            collections=models.ContentInsightsResponse(
                document_insights=[],
            ),
            collections_v2=models.ContentInsightsResponse(
                document_insights=[],
            ),
            shortcuts=models.ShortcutInsightsResponse(
                shortcut_insights=[
                    models.ShortcutInsight(
                        shortcut=models.Shortcut(
                            input_alias="<value>",
                            destination_url="https://pink-cheese.info",
                            created_by='{"name":"George Clooney","obfuscatedId":"abc123","relatedDocuments":[],"metadata":{"type":"FULL_TIME","title":"Actor","department":"Movies","email":"george@example.com","location":"Hollywood, CA","managementChain":[],"phone":"6505551234","photoUrl":"https://example.com/george.jpg","reports":[],"startDate":"2000-01-23","datasourceProfile":[],"querySuggestions":{"suggestions":[]},"inviteInfo":{"invites":[]},"customFields":[],"badges":[]}}',
                            updated_by='{"name":"George Clooney","obfuscatedId":"abc123","relatedDocuments":[],"metadata":{"type":"FULL_TIME","title":"Actor","department":"Movies","email":"george@example.com","location":"Hollywood, CA","managementChain":[],"phone":"6505551234","photoUrl":"https://example.com/george.jpg","reports":[],"startDate":"2000-01-23","datasourceProfile":[],"querySuggestions":{"suggestions":[]},"inviteInfo":{"invites":[]},"customFields":[],"badges":[]}}',
                        ),
                    ),
                    models.ShortcutInsight(
                        shortcut=models.Shortcut(
                            input_alias="<value>",
                            destination_url="https://somber-creator.biz",
                            created_by='{"name":"George Clooney","obfuscatedId":"abc123","relatedDocuments":[],"metadata":{"type":"FULL_TIME","title":"Actor","department":"Movies","email":"george@example.com","location":"Hollywood, CA","managementChain":[],"phone":"6505551234","photoUrl":"https://example.com/george.jpg","reports":[],"startDate":"2000-01-23","datasourceProfile":[],"querySuggestions":{"suggestions":[]},"inviteInfo":{"invites":[]},"customFields":[],"badges":[]}}',
                            updated_by='{"name":"George Clooney","obfuscatedId":"abc123","relatedDocuments":[],"metadata":{"type":"FULL_TIME","title":"Actor","department":"Movies","email":"george@example.com","location":"Hollywood, CA","managementChain":[],"phone":"6505551234","photoUrl":"https://example.com/george.jpg","reports":[],"startDate":"2000-01-23","datasourceProfile":[],"querySuggestions":{"suggestions":[]},"inviteInfo":{"invites":[]},"customFields":[],"badges":[]}}',
                        ),
                    ),
                ],
            ),
            announcements=models.ContentInsightsResponse(
                document_insights=[],
            ),
            answers=models.ContentInsightsResponse(
                document_insights=[],
            ),
            ai=models.AiInsightsResponse(
                assistant_insights=[
                    models.UserActivityInsight(
                        user=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        activity=models.ActivityEnum.ALL,
                    ),
                    models.UserActivityInsight(
                        user=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        activity=models.ActivityEnum.ALL,
                    ),
                    models.UserActivityInsight(
                        user=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        activity=models.ActivityEnum.ALL,
                    ),
                ],
            ),
            ai_apps=models.AiAppsInsightsResponse(
                ai_app_insights=[
                    models.UserActivityInsight(
                        user=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        activity=models.ActivityEnum.ALL,
                    ),
                    models.UserActivityInsight(
                        user=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        activity=models.ActivityEnum.ALL,
                    ),
                ],
            ),
            glean_assist=models.GleanAssistInsightsResponse(
                activity_insights=[],
            ),
        )
