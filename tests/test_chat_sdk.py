"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from datetime import date
from glean import Glean, models
from glean.utils import parse_datetime
import os
from tests.test_client import create_test_http_client


def test_chat_sdk_ask():
    test_http_client = create_test_http_client("ask")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.chat.ask(
            ask_request=models.AskRequest(
                detect_only=True,
                ask_experimental_metadata=models.AskExperimentalMetadata(
                    query_has_mentions=True,
                    query_is_length_appropriate=True,
                    query_is_answerable=True,
                ),
                search_request=models.SearchRequest(
                    tracking_token="trackingToken",
                    page_size=10,
                    query="vacation policy",
                    request_options=models.SearchRequestOptions(
                        facet_filters=[
                            models.FacetFilter(
                                field_name="type",
                                values=[
                                    models.FacetFilterValue(
                                        value="article",
                                        relation_type=models.RelationType.EQUALS,
                                    ),
                                    models.FacetFilterValue(
                                        value="document",
                                        relation_type=models.RelationType.EQUALS,
                                    ),
                                ],
                            ),
                            models.FacetFilter(
                                field_name="department",
                                values=[],
                            ),
                        ],
                        facet_bucket_size=250170,
                    ),
                ),
                excluded_document_specs=[
                    models.DocumentSpec1(
                        url="string",
                    ),
                ],
                operators="string",
                backend=models.Backend.SEARCH,
                chat_application_id="string",
                inclusions=models.ChatRestrictionFilters(
                    container_specs=[
                        models.DocumentSpec1(
                            url="string",
                        ),
                    ],
                    document_specs=[
                        models.DocumentSpec1(
                            url="string",
                        ),
                    ],
                    datasource_instances=[
                        "string",
                    ],
                ),
                exclusions=models.ChatRestrictionFilters(
                    container_specs=[],
                    document_specs=[],
                    datasource_instances=[
                        "string",
                    ],
                ),
            )
        )
        assert res is not None
        assert res == models.AskResponse(
            is_question=True,
            question="string",
            search_response=models.SearchResponse(
                tracking_token="trackingToken",
                results=[
                    models.SearchResult(
                        title="title",
                        url="https://www.example.com/",
                        snippets=[],
                    ),
                    models.SearchResult(
                        title="title",
                        url="https://www.example.com/",
                    ),
                ],
                glean_data_error=models.GleanDataError(
                    error_messages=[
                        models.ErrorMessage(
                            source="gmail",
                            error_message="invalid token",
                        ),
                        models.ErrorMessage(
                            source="slack",
                            error_message="expired token",
                        ),
                    ],
                ),
                request_id="5e345ae500ff0befa2b9d1a3ba0001737e7363696f312d323535323137000171756572792d656e64706f696e743a323032303031333074313830343032000100",
                facet_results=[
                    models.FacetResult(
                        source_name="sourceName",
                        operator_name="operatorName",
                        buckets=[
                            models.FacetBucket(
                                count=1,
                                percentage=5,
                                value=models.FacetValue(
                                    string_value="stringValue",
                                    integer_value=5,
                                ),
                            ),
                            models.FacetBucket(
                                count=1,
                                percentage=5,
                                value=models.FacetValue(
                                    string_value="stringValue",
                                    integer_value=5,
                                ),
                            ),
                        ],
                    ),
                    models.FacetResult(
                        source_name="sourceName",
                        operator_name="operatorName",
                        buckets=[],
                    ),
                ],
                rewritten_facet_filters=[
                    models.FacetFilter(
                        field_name="fieldName",
                        values=[
                            models.FacetFilterValue(),
                            models.FacetFilterValue(),
                        ],
                    ),
                    models.FacetFilter(
                        field_name="fieldName",
                        values=[],
                    ),
                ],
                has_more_results=True,
            ),
            chat_response=models.ChatResponse(
                messages=[
                    models.ChatMessage(
                        agent_config=models.AgentConfig(
                            agent=models.Agent.DEFAULT,
                            mode=models.Mode.DEFAULT,
                        ),
                        citations=[
                            models.ChatMessageCitation(
                                tracking_token="string",
                                source_document=models.Document(
                                    id="string",
                                    datasource="string",
                                    connector_type=models.ConnectorType.API_CRAWL,
                                    doc_type="string",
                                    content=models.DocumentContent(
                                        full_text_list=[],
                                    ),
                                    title="string",
                                    url="string",
                                    metadata=models.DocumentMetadata(
                                        datasource="datasource",
                                        object_type="Feature Request",
                                        container="container",
                                        parent_id="JIRA_EN-1337",
                                        mime_type="mimeType",
                                        document_id="documentId",
                                        create_time=parse_datetime(
                                            "2000-01-23T04:56:07.000Z"
                                        ),
                                        update_time=parse_datetime(
                                            "2000-01-23T04:56:07.000Z"
                                        ),
                                        author=models.Person(
                                            name="name",
                                            obfuscated_id="<id>",
                                        ),
                                        components=[
                                            "Backend",
                                            "Networking",
                                        ],
                                        status='["Done"]',
                                        custom_data={
                                            "someCustomField": models.CustomDataValue(),
                                        },
                                    ),
                                    sections=[
                                        models.DocumentSection(),
                                    ],
                                ),
                                source_file=models.ChatFile(
                                    id="FILE_1234",
                                    url="www.google.com",
                                    name="sample.pdf",
                                    metadata=models.ChatFileMetadata(
                                        status=models.ChatFileStatus.PROCESSED,
                                        upload_time=896514,
                                        processed_size=291836,
                                        failure_reason=models.ChatFileFailureReason.FILE_PROCESSING_TIMED_OUT,
                                        mime_type="<value>",
                                    ),
                                ),
                                source_person=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                reference_ranges=[
                                    models.ReferenceRange(
                                        text_range=models.TextRange(
                                            start_index=757508,
                                            document=models.Document(),
                                        ),
                                        snippets=[],
                                    ),
                                ],
                            ),
                        ],
                        uploaded_file_ids=[
                            "string",
                        ],
                        fragments=[
                            models.ChatMessageFragment(
                                structured_results=[
                                    models.StructuredResult(
                                        person=models.Person(
                                            name="<value>",
                                            obfuscated_id="<id>",
                                            related_documents=[],
                                            metadata=models.PersonMetadata(
                                                title="Actor",
                                                department="Movies",
                                                email="george@example.com",
                                                location="Hollywood, CA",
                                                phone="6505551234",
                                                photo_url="https://example.com/george.jpg",
                                                start_date=date.fromisoformat(
                                                    "2000-01-23"
                                                ),
                                            ),
                                        ),
                                        customer=models.Customer(
                                            id="<id>",
                                            company=models.Company(
                                                name="<value>",
                                                location="New York City",
                                                industry="Finances",
                                                about="Financial, software, data, and media company headquartered in Midtown Manhattan, New York City",
                                            ),
                                            poc=[],
                                            notes="CIO is interested in trying out the product.",
                                        ),
                                        team=models.Team(
                                            id="<id>",
                                            name="<value>",
                                            members=[],
                                            datasource_profiles=[
                                                models.DatasourceProfile(
                                                    datasource="github",
                                                    handle="<value>",
                                                ),
                                                models.DatasourceProfile(
                                                    datasource="github",
                                                    handle="<value>",
                                                ),
                                                models.DatasourceProfile(
                                                    datasource="github",
                                                    handle="<value>",
                                                ),
                                            ],
                                        ),
                                        custom_entity=models.CustomEntity(
                                            roles=[],
                                        ),
                                        answer=models.Answer(
                                            id=3,
                                            doc_id="ANSWERS_answer_3",
                                            question="Why is the sky blue?",
                                            body_text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                                            audience_filters=[
                                                models.FacetFilter(
                                                    field_name="type",
                                                    values=[],
                                                ),
                                            ],
                                            added_roles=[],
                                            removed_roles=[],
                                            combined_answer_text=models.StructuredText(
                                                text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                                                structured_list=[],
                                            ),
                                            likes=models.AnswerLikes(
                                                liked_by=[],
                                                liked_by_user=False,
                                                num_likes=122564,
                                            ),
                                            updated_by=models.Person(
                                                name="George Clooney",
                                                obfuscated_id="abc123",
                                            ),
                                            verification=models.Verification(
                                                state=models.State.VERIFIED,
                                                metadata=models.VerificationMetadata(
                                                    last_verifier=models.Person(
                                                        name="George Clooney",
                                                        obfuscated_id="abc123",
                                                    ),
                                                    reminders=[],
                                                    last_reminder=models.Reminder(
                                                        assignee=models.Person(
                                                            name="George Clooney",
                                                            obfuscated_id="abc123",
                                                        ),
                                                        requestor=models.Person(
                                                            name="George Clooney",
                                                            obfuscated_id="abc123",
                                                        ),
                                                        remind_at=713018,
                                                    ),
                                                    candidate_verifiers=[],
                                                ),
                                            ),
                                            board=models.AnswerBoard(
                                                name="<value>",
                                                description="slowly about delightfully cautiously knowingly scrap greedily zany bossy straight",
                                                audience_filters=[],
                                                id=701036,
                                                creator=models.Person(
                                                    name="George Clooney",
                                                    obfuscated_id="abc123",
                                                ),
                                            ),
                                            collections=[],
                                        ),
                                        extracted_qn_a=models.ExtractedQnA(
                                            question_result=models.SearchResult(
                                                title="title",
                                                url="https://example.com/foo/bar",
                                                native_app_url="slack://foo/bar",
                                            ),
                                        ),
                                        meeting=models.Meeting(
                                            attendees=models.CalendarAttendees(
                                                people=[],
                                            ),
                                        ),
                                        app=models.AppResult(
                                            datasource="<value>",
                                        ),
                                        collection=models.Collection(
                                            name="<value>",
                                            description="closely badly um although",
                                            audience_filters=[],
                                            id=768477,
                                            items=[],
                                            children=[],
                                        ),
                                        answer_board=models.AnswerBoard(
                                            name="<value>",
                                            description="descendant awkwardly skeletal better cloudy congregate",
                                            audience_filters=[],
                                            id=779086,
                                        ),
                                        code=models.Code(
                                            lines=[],
                                        ),
                                        shortcut=models.Shortcut(
                                            input_alias="<value>",
                                            destination_url="https://petty-surface.com/",
                                            created_by="<value>",
                                        ),
                                        query_suggestions=models.QuerySuggestionList(
                                            suggestions=[],
                                        ),
                                        related_question=models.RelatedQuestion(
                                            ranges=[],
                                        ),
                                        tracking_token="<value>",
                                        prominence=models.Prominence.PROMOTED,
                                        source=models.StructuredResultSource.ENTITY_NLQ,
                                    ),
                                ],
                                tracking_token="string",
                                text="string",
                                query_suggestion=models.QuerySuggestion(
                                    query="app:github type:pull author:mortimer",
                                    label="Mortimer's PRs",
                                    datasource="github",
                                ),
                                file=models.ChatFile(
                                    id="FILE_1234",
                                    url="www.google.com",
                                    name="sample.pdf",
                                    metadata=models.ChatFileMetadata(
                                        status=models.ChatFileStatus.DELETED,
                                        upload_time=169967,
                                        processed_size=993314,
                                        failure_reason=models.ChatFileFailureReason.FILE_TOO_LARGE,
                                        mime_type="<value>",
                                    ),
                                ),
                                action=models.ToolInfo(
                                    metadata=models.ToolMetadata(
                                        type=models.ToolMetadataType.RETRIEVAL,
                                        name="<value>",
                                        display_name="Ansley73",
                                        tool_id="<id>",
                                        display_description="<value>",
                                        logo_url="https://complete-dress.name/",
                                        object_name="<value>",
                                        knowledge_type=models.KnowledgeType.WORLD_KNOWLEDGE,
                                        created_by=models.PersonObject(
                                            name="<value>",
                                            obfuscated_id="<id>",
                                        ),
                                        last_updated_by=models.PersonObject(
                                            name="<value>",
                                            obfuscated_id="<id>",
                                        ),
                                        created_at=parse_datetime(
                                            "2023-01-08T00:43:46.254Z"
                                        ),
                                        last_updated_at=parse_datetime(
                                            "2025-10-23T11:42:30.507Z"
                                        ),
                                        write_action_type=models.WriteActionType.EXECUTION,
                                        auth_type=models.AuthType.NONE,
                                        usage_instructions="<value>",
                                        is_setup_finished=False,
                                    ),
                                    parameters={
                                        "property1": models.WriteActionParameter(),
                                        "property2": models.WriteActionParameter(),
                                    },
                                ),
                            ),
                        ],
                        ts="string",
                        message_id="string",
                        message_tracking_token="string",
                        has_more_fragments=True,
                    ),
                ],
                chat_id="string",
                follow_up_prompts=[
                    "string",
                ],
                backend_time_millis=1100,
                chat_session_tracking_token="string",
            ),
        )


def test_chat_sdk_chat_default_example():
    test_http_client = create_test_http_client("chat-defaultExample")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.chat.start(
            messages=[
                {
                    "fragments": [
                        models.ChatMessageFragment(
                            text="What are the company holidays this year?",
                        ),
                    ],
                },
            ],
            timeout_millis=30000,
        )
        assert res is not None
        assert (
            res
            == '{"messages":[{"author":"GLEAN_AI","messageType":"CONTENT","hasMoreFragments":false,"agentConfig":{"agent":"DEFAULT","mode":"DEFAULT"},"fragments":[{"text":"There are no holidays!"}]}]}'
        )


def test_chat_sdk_chat_gpt_agent_example():
    test_http_client = create_test_http_client("chat-gptAgentExample")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.chat.start(
            messages=[
                {
                    "fragments": [
                        models.ChatMessageFragment(
                            text="Who was the first person to land on the moon?",
                        ),
                    ],
                },
            ],
            agent_config={
                "agent": models.Agent.GPT,
            },
            timeout_millis=30000,
        )
        assert res is not None
        assert res == "<value>"


def test_chat_sdk_chat_streaming_example():
    test_http_client = create_test_http_client("chat-streamingExample")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.chat.start(
            messages=[
                {
                    "citations": [
                        models.ChatMessageCitation(
                            source_document=models.Document(
                                metadata=models.DocumentMetadata(
                                    datasource="datasource",
                                    object_type="Feature Request",
                                    container="container",
                                    parent_id="JIRA_EN-1337",
                                    mime_type="mimeType",
                                    document_id="documentId",
                                    create_time=parse_datetime(
                                        "2000-01-23T04:56:07.000Z"
                                    ),
                                    update_time=parse_datetime(
                                        "2000-01-23T04:56:07.000Z"
                                    ),
                                    author=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                        related_documents=[],
                                        metadata=models.PersonMetadata(
                                            type=models.PersonMetadataType.FULL_TIME,
                                            title="Actor",
                                            department="Movies",
                                            email="george@example.com",
                                            location="Hollywood, CA",
                                            management_chain=[],
                                            phone="6505551234",
                                            photo_url="https://example.com/george.jpg",
                                            reports=[],
                                            start_date=date.fromisoformat("2000-01-23"),
                                            datasource_profile=[],
                                            query_suggestions=models.QuerySuggestionList(
                                                suggestions=[],
                                            ),
                                            invite_info=models.InviteInfo(
                                                invites=[],
                                            ),
                                            custom_fields=[],
                                            badges=[],
                                        ),
                                    ),
                                    owner=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    mentioned_people=[],
                                    components=[],
                                    status='["Done"]',
                                    pins=[],
                                    assigned_to=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    updated_by=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    collections=[],
                                    interactions=models.DocumentInteractions(
                                        reacts=[],
                                        shares=[],
                                    ),
                                    verification=models.Verification(
                                        state=models.State.VERIFIED,
                                        metadata=models.VerificationMetadata(
                                            last_verifier=models.Person(
                                                name="George Clooney",
                                                obfuscated_id="abc123",
                                            ),
                                            reminders=[],
                                            last_reminder=models.Reminder(
                                                assignee=models.Person(
                                                    name="George Clooney",
                                                    obfuscated_id="abc123",
                                                ),
                                                requestor=models.Person(
                                                    name="George Clooney",
                                                    obfuscated_id="abc123",
                                                ),
                                                remind_at=949753,
                                            ),
                                            candidate_verifiers=[],
                                        ),
                                    ),
                                    shortcuts=[],
                                    custom_data={
                                        "someCustomField": models.CustomDataValue(),
                                    },
                                    contact_person=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    ancestors=[],
                                ),
                            ),
                            source_file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            source_person=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            reference_ranges=[],
                        ),
                        models.ChatMessageCitation(
                            source_file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            reference_ranges=[],
                        ),
                    ],
                    "fragments": [
                        models.ChatMessageFragment(
                            structured_results=[],
                            query_suggestion=models.QuerySuggestion(
                                query="app:github type:pull author:mortimer",
                                search_provider_info=models.SearchProviderInfo(
                                    name="Google",
                                    search_link_url_template="https://www.google.com/search?q={query}&hl=en",
                                ),
                                label="Mortimer's PRs",
                                datasource="github",
                                request_options=models.SearchRequestOptions(
                                    datasource_filter="JIRA",
                                    datasources_filter=[
                                        "JIRA",
                                    ],
                                    query_overrides_facet_filters=True,
                                    facet_filters=[
                                        models.FacetFilter(
                                            field_name="type",
                                            values=[
                                                models.FacetFilterValue(
                                                    value="Spreadsheet",
                                                    relation_type=models.RelationType.EQUALS,
                                                ),
                                                models.FacetFilterValue(
                                                    value="Spreadsheet",
                                                    relation_type=models.RelationType.EQUALS,
                                                ),
                                            ],
                                        ),
                                    ],
                                    facet_filter_sets=[
                                        models.FacetFilterSet(
                                            filters=[],
                                        ),
                                    ],
                                    facet_bucket_size=896514,
                                    auth_tokens=[
                                        models.AuthToken(
                                            access_token="123abc",
                                            datasource="gmail",
                                            scope="email profile https://www.googleapis.com/auth/gmail.readonly",
                                            token_type="Bearer",
                                            auth_user="1",
                                        ),
                                    ],
                                ),
                                ranges=[],
                                input_details=models.SearchRequestInputDetails(
                                    has_copy_paste=True,
                                ),
                            ),
                            file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            action=models.ToolInfo(
                                metadata=models.ToolMetadata(
                                    type=models.ToolMetadataType.RETRIEVAL,
                                    name="<value>",
                                    display_name="Elza_Toy",
                                    display_description="<value>",
                                    object_name='["HR ticket","Email","Chat message"]',
                                ),
                            ),
                        ),
                        models.ChatMessageFragment(
                            structured_results=[],
                            file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            action=models.ToolInfo(
                                metadata=models.ToolMetadata(
                                    type=models.ToolMetadataType.RETRIEVAL,
                                    name="<value>",
                                    display_name="Elza_Toy",
                                    display_description="<value>",
                                    object_name='["HR ticket","Email","Chat message"]',
                                ),
                            ),
                        ),
                        models.ChatMessageFragment(
                            structured_results=[],
                            file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            action=models.ToolInfo(
                                metadata=models.ToolMetadata(
                                    type=models.ToolMetadataType.RETRIEVAL,
                                    name="<value>",
                                    display_name="Elza_Toy",
                                    display_description="<value>",
                                    object_name='["HR ticket","Email","Chat message"]',
                                ),
                            ),
                        ),
                    ],
                },
            ],
            timeout_millis=30000,
        )
        assert res is not None
        assert (
            res
            == '{"messages":[{"author":"GLEAN_AI","messageType":"CONTENT","agentConfig":{"agent":"DEFAULT","mode":"DEFAULT","hasMoreFragments":true},"fragments":null},{"author":"GLEAN_AI","messageType":"CONTENT","agentConfig":{"agent":"DEFAULT","mode":"DEFAULT","hasMoreFragments":true},"fragments":null},{"author":"GLEAN_AI","messageType":"CONTENT","agentConfig":{"agent":"DEFAULT","mode":"DEFAULT","hasMoreFragments":true},"fragments":[{"text":"e are"}]},{"author":"GLEAN_AI","messageType":"CONTENT","agentConfig":{"agent":"DEFAULT","mode":"DEFAULT","hasMoreFragments":true},"fragments":[{"text":"no hol"}]},{"author":"GLEAN_AI","messageType":"CONTENT","agentConfig":{"agent":"DEFAULT","mode":"DEFAULT","hasMoreFragments":false},"fragments":[{"text":"idays!"}]}]}'
        )


def test_chat_sdk_chat_update_response():
    test_http_client = create_test_http_client("chat-updateResponse")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.chat.start(
            messages=[
                {
                    "citations": [
                        models.ChatMessageCitation(
                            source_document=models.Document(
                                metadata=models.DocumentMetadata(
                                    datasource="datasource",
                                    object_type="Feature Request",
                                    container="container",
                                    parent_id="JIRA_EN-1337",
                                    mime_type="mimeType",
                                    document_id="documentId",
                                    create_time=parse_datetime(
                                        "2000-01-23T04:56:07.000Z"
                                    ),
                                    update_time=parse_datetime(
                                        "2000-01-23T04:56:07.000Z"
                                    ),
                                    author=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                        related_documents=[],
                                        metadata=models.PersonMetadata(
                                            type=models.PersonMetadataType.FULL_TIME,
                                            title="Actor",
                                            department="Movies",
                                            email="george@example.com",
                                            location="Hollywood, CA",
                                            management_chain=[],
                                            phone="6505551234",
                                            photo_url="https://example.com/george.jpg",
                                            reports=[],
                                            start_date=date.fromisoformat("2000-01-23"),
                                            datasource_profile=[],
                                            query_suggestions=models.QuerySuggestionList(
                                                suggestions=[],
                                            ),
                                            invite_info=models.InviteInfo(
                                                invites=[],
                                            ),
                                            custom_fields=[],
                                            badges=[],
                                        ),
                                    ),
                                    owner=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    mentioned_people=[],
                                    components=[],
                                    status='["Done"]',
                                    pins=[],
                                    assigned_to=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    updated_by=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    collections=[],
                                    interactions=models.DocumentInteractions(
                                        reacts=[],
                                        shares=[],
                                    ),
                                    verification=models.Verification(
                                        state=models.State.VERIFIED,
                                        metadata=models.VerificationMetadata(
                                            last_verifier=models.Person(
                                                name="George Clooney",
                                                obfuscated_id="abc123",
                                            ),
                                            reminders=[],
                                            last_reminder=models.Reminder(
                                                assignee=models.Person(
                                                    name="George Clooney",
                                                    obfuscated_id="abc123",
                                                ),
                                                requestor=models.Person(
                                                    name="George Clooney",
                                                    obfuscated_id="abc123",
                                                ),
                                                remind_at=949753,
                                            ),
                                            candidate_verifiers=[],
                                        ),
                                    ),
                                    shortcuts=[],
                                    custom_data={
                                        "someCustomField": models.CustomDataValue(),
                                    },
                                    contact_person=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    ancestors=[],
                                ),
                            ),
                            source_file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            source_person=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            reference_ranges=[],
                        ),
                        models.ChatMessageCitation(
                            source_file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            reference_ranges=[],
                        ),
                    ],
                    "fragments": [
                        models.ChatMessageFragment(
                            structured_results=[],
                            query_suggestion=models.QuerySuggestion(
                                query="app:github type:pull author:mortimer",
                                search_provider_info=models.SearchProviderInfo(
                                    name="Google",
                                    search_link_url_template="https://www.google.com/search?q={query}&hl=en",
                                ),
                                label="Mortimer's PRs",
                                datasource="github",
                                request_options=models.SearchRequestOptions(
                                    datasource_filter="JIRA",
                                    datasources_filter=[
                                        "JIRA",
                                    ],
                                    query_overrides_facet_filters=True,
                                    facet_filters=[
                                        models.FacetFilter(
                                            field_name="type",
                                            values=[
                                                models.FacetFilterValue(
                                                    value="Spreadsheet",
                                                    relation_type=models.RelationType.EQUALS,
                                                ),
                                                models.FacetFilterValue(
                                                    value="Spreadsheet",
                                                    relation_type=models.RelationType.EQUALS,
                                                ),
                                            ],
                                        ),
                                    ],
                                    facet_filter_sets=[
                                        models.FacetFilterSet(
                                            filters=[],
                                        ),
                                    ],
                                    facet_bucket_size=896514,
                                    auth_tokens=[
                                        models.AuthToken(
                                            access_token="123abc",
                                            datasource="gmail",
                                            scope="email profile https://www.googleapis.com/auth/gmail.readonly",
                                            token_type="Bearer",
                                            auth_user="1",
                                        ),
                                    ],
                                ),
                                ranges=[],
                                input_details=models.SearchRequestInputDetails(
                                    has_copy_paste=True,
                                ),
                            ),
                            file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            action=models.ToolInfo(
                                metadata=models.ToolMetadata(
                                    type=models.ToolMetadataType.RETRIEVAL,
                                    name="<value>",
                                    display_name="Elza_Toy",
                                    display_description="<value>",
                                    object_name='["HR ticket","Email","Chat message"]',
                                ),
                            ),
                        ),
                        models.ChatMessageFragment(
                            structured_results=[],
                            file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            action=models.ToolInfo(
                                metadata=models.ToolMetadata(
                                    type=models.ToolMetadataType.RETRIEVAL,
                                    name="<value>",
                                    display_name="Elza_Toy",
                                    display_description="<value>",
                                    object_name='["HR ticket","Email","Chat message"]',
                                ),
                            ),
                        ),
                        models.ChatMessageFragment(
                            structured_results=[],
                            file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            action=models.ToolInfo(
                                metadata=models.ToolMetadata(
                                    type=models.ToolMetadataType.RETRIEVAL,
                                    name="<value>",
                                    display_name="Elza_Toy",
                                    display_description="<value>",
                                    object_name='["HR ticket","Email","Chat message"]',
                                ),
                            ),
                        ),
                    ],
                },
            ],
            timeout_millis=30000,
        )
        assert res is not None
        assert (
            res
            == '{"messages":[{"author":"GLEAN_AI","messageType":"UPDATE","agentConfig":{"agent":"DEFAULT","mode":"DEFAULT"},"fragments":[{"text":"**Reading:**"},{"structuredResults":[{"document":{"id":"123","title":"Company Handbook"}}]}]}]}'
        )


def test_chat_sdk_chat_citation_response():
    test_http_client = create_test_http_client("chat-citationResponse")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.chat.start(
            messages=[
                {
                    "citations": [
                        models.ChatMessageCitation(
                            source_document=models.Document(
                                metadata=models.DocumentMetadata(
                                    datasource="datasource",
                                    object_type="Feature Request",
                                    container="container",
                                    parent_id="JIRA_EN-1337",
                                    mime_type="mimeType",
                                    document_id="documentId",
                                    create_time=parse_datetime(
                                        "2000-01-23T04:56:07.000Z"
                                    ),
                                    update_time=parse_datetime(
                                        "2000-01-23T04:56:07.000Z"
                                    ),
                                    author=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                        related_documents=[],
                                        metadata=models.PersonMetadata(
                                            type=models.PersonMetadataType.FULL_TIME,
                                            title="Actor",
                                            department="Movies",
                                            email="george@example.com",
                                            location="Hollywood, CA",
                                            management_chain=[],
                                            phone="6505551234",
                                            photo_url="https://example.com/george.jpg",
                                            reports=[],
                                            start_date=date.fromisoformat("2000-01-23"),
                                            datasource_profile=[],
                                            query_suggestions=models.QuerySuggestionList(
                                                suggestions=[],
                                            ),
                                            invite_info=models.InviteInfo(
                                                invites=[],
                                            ),
                                            custom_fields=[],
                                            badges=[],
                                        ),
                                    ),
                                    owner=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    mentioned_people=[],
                                    components=[],
                                    status='["Done"]',
                                    pins=[],
                                    assigned_to=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    updated_by=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    collections=[],
                                    interactions=models.DocumentInteractions(
                                        reacts=[],
                                        shares=[],
                                    ),
                                    verification=models.Verification(
                                        state=models.State.VERIFIED,
                                        metadata=models.VerificationMetadata(
                                            last_verifier=models.Person(
                                                name="George Clooney",
                                                obfuscated_id="abc123",
                                            ),
                                            reminders=[],
                                            last_reminder=models.Reminder(
                                                assignee=models.Person(
                                                    name="George Clooney",
                                                    obfuscated_id="abc123",
                                                ),
                                                requestor=models.Person(
                                                    name="George Clooney",
                                                    obfuscated_id="abc123",
                                                ),
                                                remind_at=949753,
                                            ),
                                            candidate_verifiers=[],
                                        ),
                                    ),
                                    shortcuts=[],
                                    custom_data={
                                        "someCustomField": models.CustomDataValue(),
                                    },
                                    contact_person=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    ancestors=[],
                                ),
                            ),
                            source_file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            source_person=models.Person(
                                name="George Clooney",
                                obfuscated_id="abc123",
                            ),
                            reference_ranges=[],
                        ),
                        models.ChatMessageCitation(
                            source_file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            reference_ranges=[],
                        ),
                    ],
                    "fragments": [
                        models.ChatMessageFragment(
                            structured_results=[],
                            query_suggestion=models.QuerySuggestion(
                                query="app:github type:pull author:mortimer",
                                search_provider_info=models.SearchProviderInfo(
                                    name="Google",
                                    search_link_url_template="https://www.google.com/search?q={query}&hl=en",
                                ),
                                label="Mortimer's PRs",
                                datasource="github",
                                request_options=models.SearchRequestOptions(
                                    datasource_filter="JIRA",
                                    datasources_filter=[
                                        "JIRA",
                                    ],
                                    query_overrides_facet_filters=True,
                                    facet_filters=[
                                        models.FacetFilter(
                                            field_name="type",
                                            values=[
                                                models.FacetFilterValue(
                                                    value="Spreadsheet",
                                                    relation_type=models.RelationType.EQUALS,
                                                ),
                                                models.FacetFilterValue(
                                                    value="Spreadsheet",
                                                    relation_type=models.RelationType.EQUALS,
                                                ),
                                            ],
                                        ),
                                    ],
                                    facet_filter_sets=[
                                        models.FacetFilterSet(
                                            filters=[],
                                        ),
                                    ],
                                    facet_bucket_size=896514,
                                    auth_tokens=[
                                        models.AuthToken(
                                            access_token="123abc",
                                            datasource="gmail",
                                            scope="email profile https://www.googleapis.com/auth/gmail.readonly",
                                            token_type="Bearer",
                                            auth_user="1",
                                        ),
                                    ],
                                ),
                                ranges=[],
                                input_details=models.SearchRequestInputDetails(
                                    has_copy_paste=True,
                                ),
                            ),
                            file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            action=models.ToolInfo(
                                metadata=models.ToolMetadata(
                                    type=models.ToolMetadataType.RETRIEVAL,
                                    name="<value>",
                                    display_name="Elza_Toy",
                                    display_description="<value>",
                                    object_name='["HR ticket","Email","Chat message"]',
                                ),
                            ),
                        ),
                        models.ChatMessageFragment(
                            structured_results=[],
                            file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            action=models.ToolInfo(
                                metadata=models.ToolMetadata(
                                    type=models.ToolMetadataType.RETRIEVAL,
                                    name="<value>",
                                    display_name="Elza_Toy",
                                    display_description="<value>",
                                    object_name='["HR ticket","Email","Chat message"]',
                                ),
                            ),
                        ),
                        models.ChatMessageFragment(
                            structured_results=[],
                            file=models.ChatFile(
                                id="FILE_1234",
                                url="www.google.com",
                                name="sample.pdf",
                            ),
                            action=models.ToolInfo(
                                metadata=models.ToolMetadata(
                                    type=models.ToolMetadataType.RETRIEVAL,
                                    name="<value>",
                                    display_name="Elza_Toy",
                                    display_description="<value>",
                                    object_name='["HR ticket","Email","Chat message"]',
                                ),
                            ),
                        ),
                    ],
                },
            ],
            timeout_millis=30000,
        )
        assert res is not None
        assert (
            res
            == '{"messages":[{"author":"GLEAN_AI","messageType":"CONTENT","agentConfig":{"agent":"DEFAULT","mode":"DEFAULT"},"citations":[{"sourceDocument":{"id":"123","title":"Company Handbook","referenceRanges":[{"textRange":{"startIndex":0,"endIndex":12,"type":"CITATION"}}]}}]}]}'
        )


def test_chat_sdk_deleteallchats():
    test_http_client = create_test_http_client("deleteallchats")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.client.chat.delete_all()


def test_chat_sdk_getchat():
    test_http_client = create_test_http_client("getchat")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.chat.get(id="<id>")
        assert res is not None
        assert res == models.GetChatResponse(
            chat_result=models.ChatResult(
                chat=models.Chat(
                    created_by=models.Person(
                        name="George Clooney",
                        obfuscated_id="abc123",
                        related_documents=[],
                        metadata=models.PersonMetadata(
                            type=models.PersonMetadataType.FULL_TIME,
                            title="Actor",
                            department="Movies",
                            email="george@example.com",
                            location="Hollywood, CA",
                            phone="6505551234",
                            photo_url="https://example.com/george.jpg",
                            start_date=date.fromisoformat("2000-01-23"),
                            datasource_profile=[],
                            query_suggestions=models.QuerySuggestionList(
                                suggestions=[],
                            ),
                            invite_info=models.InviteInfo(
                                invites=[],
                            ),
                            custom_fields=[],
                            badges=[
                                models.Badge(
                                    key="deployment_name_new_hire",
                                    display_name="New hire",
                                    icon_config=models.IconConfig(
                                        color="#343CED",
                                        key="person_icon",
                                        icon_type=models.IconType.GLYPH,
                                        name="user",
                                    ),
                                ),
                            ],
                        ),
                    ),
                    icon=models.IconConfig(
                        color="#343CED",
                        key="person_icon",
                        icon_type=models.IconType.GLYPH,
                        name="user",
                    ),
                    messages=[
                        models.ChatMessage(
                            citations=[
                                models.ChatMessageCitation(
                                    source_document=models.Document(
                                        metadata=models.DocumentMetadata(
                                            datasource="datasource",
                                            object_type="Feature Request",
                                            container="container",
                                            parent_id="JIRA_EN-1337",
                                            mime_type="mimeType",
                                            document_id="documentId",
                                            create_time=parse_datetime(
                                                "2000-01-23T04:56:07.000Z"
                                            ),
                                            update_time=parse_datetime(
                                                "2000-01-23T04:56:07.000Z"
                                            ),
                                            author=models.Person(
                                                name="George Clooney",
                                                obfuscated_id="abc123",
                                            ),
                                            owner=models.Person(
                                                name="George Clooney",
                                                obfuscated_id="abc123",
                                            ),
                                            mentioned_people=[],
                                            components=[
                                                "Backend",
                                                "Networking",
                                            ],
                                            status='["Done"]',
                                            pins=[],
                                            assigned_to=models.Person(
                                                name="George Clooney",
                                                obfuscated_id="abc123",
                                            ),
                                            updated_by=models.Person(
                                                name="George Clooney",
                                                obfuscated_id="abc123",
                                            ),
                                            collections=[],
                                            interactions=models.DocumentInteractions(
                                                reacts=[],
                                                shares=[],
                                            ),
                                            verification=models.Verification(
                                                state=models.State.VERIFIED,
                                                metadata=models.VerificationMetadata(
                                                    last_verifier=models.Person(
                                                        name="George Clooney",
                                                        obfuscated_id="abc123",
                                                    ),
                                                    reminders=[],
                                                    last_reminder=models.Reminder(
                                                        assignee=models.Person(
                                                            name="George Clooney",
                                                            obfuscated_id="abc123",
                                                        ),
                                                        requestor=models.Person(
                                                            name="George Clooney",
                                                            obfuscated_id="abc123",
                                                        ),
                                                        remind_at=949753,
                                                    ),
                                                    candidate_verifiers=[],
                                                ),
                                            ),
                                            shortcuts=[],
                                            custom_data={
                                                "someCustomField": models.CustomDataValue(),
                                            },
                                            contact_person=models.Person(
                                                name="George Clooney",
                                                obfuscated_id="abc123",
                                            ),
                                            ancestors=[],
                                        ),
                                    ),
                                    source_file=models.ChatFile(
                                        id="FILE_1234",
                                        url="www.google.com",
                                        name="sample.pdf",
                                    ),
                                    source_person=models.Person(
                                        name="George Clooney",
                                        obfuscated_id="abc123",
                                    ),
                                    reference_ranges=[],
                                ),
                                models.ChatMessageCitation(
                                    source_file=models.ChatFile(
                                        id="FILE_1234",
                                        url="www.google.com",
                                        name="sample.pdf",
                                    ),
                                    reference_ranges=[],
                                ),
                            ],
                            fragments=[
                                models.ChatMessageFragment(
                                    structured_results=[],
                                    query_suggestion=models.QuerySuggestion(
                                        query="app:github type:pull author:mortimer",
                                        search_provider_info=models.SearchProviderInfo(
                                            name="Google",
                                            search_link_url_template="https://www.google.com/search?q={query}&hl=en",
                                        ),
                                        label="Mortimer's PRs",
                                        datasource="github",
                                        request_options=models.SearchRequestOptions(
                                            datasource_filter="JIRA",
                                            datasources_filter=[
                                                "JIRA",
                                            ],
                                            query_overrides_facet_filters=True,
                                            facet_filters=[
                                                models.FacetFilter(
                                                    field_name="type",
                                                    values=[
                                                        models.FacetFilterValue(
                                                            value="Spreadsheet",
                                                            relation_type=models.RelationType.EQUALS,
                                                        ),
                                                        models.FacetFilterValue(
                                                            value="Presentation",
                                                            relation_type=models.RelationType.EQUALS,
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            facet_filter_sets=[
                                                models.FacetFilterSet(
                                                    filters=[
                                                        models.FacetFilter(
                                                            field_name="type",
                                                            values=[],
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            facet_bucket_size=896514,
                                            auth_tokens=[
                                                models.AuthToken(
                                                    access_token="123abc",
                                                    datasource="gmail",
                                                    scope="email profile https://www.googleapis.com/auth/gmail.readonly",
                                                    token_type="Bearer",
                                                    auth_user="1",
                                                ),
                                            ],
                                        ),
                                        ranges=[],
                                        input_details=models.SearchRequestInputDetails(
                                            has_copy_paste=True,
                                        ),
                                    ),
                                    file=models.ChatFile(
                                        id="FILE_1234",
                                        url="www.google.com",
                                        name="sample.pdf",
                                    ),
                                    action=models.ToolInfo(
                                        metadata=models.ToolMetadata(
                                            type=models.ToolMetadataType.RETRIEVAL,
                                            name="<value>",
                                            display_name="Elza_Toy",
                                            display_description="<value>",
                                            object_name='["HR ticket","Email","Chat message"]',
                                        ),
                                    ),
                                ),
                                models.ChatMessageFragment(
                                    structured_results=[],
                                    file=models.ChatFile(
                                        id="FILE_1234",
                                        url="www.google.com",
                                        name="sample.pdf",
                                    ),
                                    action=models.ToolInfo(
                                        metadata=models.ToolMetadata(
                                            type=models.ToolMetadataType.RETRIEVAL,
                                            name="<value>",
                                            display_name="Elza_Toy",
                                            display_description="<value>",
                                            object_name='["HR ticket","Email","Chat message"]',
                                        ),
                                    ),
                                ),
                                models.ChatMessageFragment(
                                    structured_results=[],
                                    file=models.ChatFile(
                                        id="FILE_1234",
                                        url="www.google.com",
                                        name="sample.pdf",
                                    ),
                                    action=models.ToolInfo(
                                        metadata=models.ToolMetadata(
                                            type=models.ToolMetadataType.RETRIEVAL,
                                            name="<value>",
                                            display_name="Elza_Toy",
                                            display_description="<value>",
                                            object_name='["HR ticket","Email","Chat message"]',
                                        ),
                                    ),
                                ),
                            ],
                        ),
                        models.ChatMessage(
                            citations=[],
                            fragments=[],
                        ),
                        models.ChatMessage(
                            citations=[],
                            fragments=[],
                        ),
                    ],
                ),
            ),
        )


def test_chat_sdk_listchats():
    test_http_client = create_test_http_client("listchats")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.chat.list()
        assert res is not None
        assert res == models.ListChatsResponse(
            chat_results=[
                models.ChatMetadataResult(
                    chat=models.ChatMetadata(
                        created_by=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                            related_documents=[],
                            metadata=models.PersonMetadata(
                                type=models.PersonMetadataType.FULL_TIME,
                                title="Actor",
                                department="Movies",
                                email="george@example.com",
                                location="Hollywood, CA",
                                phone="6505551234",
                                photo_url="https://example.com/george.jpg",
                                start_date=date.fromisoformat("2000-01-23"),
                                datasource_profile=[],
                                query_suggestions=models.QuerySuggestionList(
                                    suggestions=[],
                                ),
                                invite_info=models.InviteInfo(
                                    invites=[],
                                ),
                                custom_fields=[],
                                badges=[
                                    models.Badge(
                                        key="deployment_name_new_hire",
                                        display_name="New hire",
                                        icon_config=models.IconConfig(
                                            color="#343CED",
                                            key="person_icon",
                                            icon_type=models.IconType.GLYPH,
                                            name="user",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        icon=models.IconConfig(
                            color="#343CED",
                            key="person_icon",
                            icon_type=models.IconType.GLYPH,
                            name="user",
                        ),
                    ),
                ),
            ],
        )


def test_chat_sdk_getchatapplication():
    test_http_client = create_test_http_client("getchatapplication")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.chat.get_application(id="<id>")
        assert res is not None
        assert res == models.GetChatApplicationResponse()


def test_chat_sdk_uploadchatfiles():
    test_http_client = create_test_http_client("uploadchatfiles")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.chat.upload_files(files=[])
        assert res is not None
        assert res == models.UploadChatFilesResponse(
            files=[
                models.ChatFile(
                    id="FILE_1234",
                    url="www.google.com",
                    name="sample.pdf",
                ),
                models.ChatFile(
                    id="FILE_1234",
                    url="www.google.com",
                    name="sample.pdf",
                ),
                models.ChatFile(
                    id="FILE_1234",
                    url="www.google.com",
                    name="sample.pdf",
                ),
            ],
        )


def test_chat_sdk_getchatfiles():
    test_http_client = create_test_http_client("getchatfiles")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.chat.get_files(file_ids=[])
        assert res is not None
        assert res == models.GetChatFilesResponse(
            files={
                "key": models.ChatFile(
                    id="FILE_1234",
                    url="www.google.com",
                    name="sample.pdf",
                ),
                "key1": models.ChatFile(
                    id="FILE_1234",
                    url="www.google.com",
                    name="sample.pdf",
                ),
            },
        )


def test_chat_sdk_deletechatfiles():
    test_http_client = create_test_http_client("deletechatfiles")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.client.chat.delete_files(
            file_ids=[
                "<value>",
            ]
        )
