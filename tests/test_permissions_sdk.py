"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from glean import Glean
import os
import pytest
from tests.test_client import create_test_http_client


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/indexuser.test referencing operation post_/indexuser not found in document`]"
)
def test_permissions_sdk_post_indexuser():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/bulkindexusers.test referencing operation post_/bulkindexusers not found in document`]"
)
def test_permissions_sdk_post_bulkindexusers():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/indexgroup.test referencing operation post_/indexgroup not found in document`]"
)
def test_permissions_sdk_post_indexgroup():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/bulkindexgroups.test referencing operation post_/bulkindexgroups not found in document`]"
)
def test_permissions_sdk_post_bulkindexgroups():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/indexmembership.test referencing operation post_/indexmembership not found in document`]"
)
def test_permissions_sdk_post_indexmembership():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/bulkindexmemberships.test referencing operation post_/bulkindexmemberships not found in document`]"
)
def test_permissions_sdk_post_bulkindexmemberships():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/processallmemberships.test referencing operation post_/processallmemberships not found in document`]"
)
def test_permissions_sdk_post_processallmemberships():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/deleteuser.test referencing operation post_/deleteuser not found in document`]"
)
def test_permissions_sdk_post_deleteuser():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/deletegroup.test referencing operation post_/deletegroup not found in document`]"
)
def test_permissions_sdk_post_deletegroup():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/deletemembership.test referencing operation post_/deletemembership not found in document`]"
)
def test_permissions_sdk_post_deletemembership():
    pass


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step post_/betausers.test referencing operation post_/betausers not found in document`]"
)
def test_permissions_sdk_post_betausers():
    pass


def test_permissions_sdk_post_api_index_v1_indexuser():
    test_http_client = create_test_http_client("post_/api/index/v1/indexuser")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.index_user(
            datasource="<value>",
            user={
                "email": "Aracely40@hotmail.com",
                "name": "<value>",
            },
        )


def test_permissions_sdk_post_api_index_v1_bulkindexusers():
    test_http_client = create_test_http_client("post_/api/index/v1/bulkindexusers")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.bulk_index_users(
            upload_id="<id>", datasource="<value>", users=[]
        )


def test_permissions_sdk_post_api_index_v1_indexgroup():
    test_http_client = create_test_http_client("post_/api/index/v1/indexgroup")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.index_group(
            datasource="<value>",
            group={
                "name": "<value>",
            },
        )


def test_permissions_sdk_post_api_index_v1_bulkindexgroups():
    test_http_client = create_test_http_client("post_/api/index/v1/bulkindexgroups")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.bulk_index_groups(
            upload_id="<id>", datasource="<value>", groups=[]
        )


def test_permissions_sdk_post_api_index_v1_indexmembership():
    test_http_client = create_test_http_client("post_/api/index/v1/indexmembership")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.index_membership(
            datasource="<value>",
            membership={
                "group_name": "<value>",
            },
        )


def test_permissions_sdk_post_api_index_v1_bulkindexmemberships():
    test_http_client = create_test_http_client(
        "post_/api/index/v1/bulkindexmemberships"
    )

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.bulk_index_memberships(
            upload_id="<id>",
            datasource="<value>",
            memberships=[
                {},
            ],
        )


def test_permissions_sdk_post_api_index_v1_processallmemberships():
    test_http_client = create_test_http_client(
        "post_/api/index/v1/processallmemberships"
    )

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.process_memberships()


def test_permissions_sdk_post_api_index_v1_deleteuser():
    test_http_client = create_test_http_client("post_/api/index/v1/deleteuser")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.delete_user(
            datasource="<value>", email="Kendra.Cole57@hotmail.com"
        )


def test_permissions_sdk_post_api_index_v1_deletegroup():
    test_http_client = create_test_http_client("post_/api/index/v1/deletegroup")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.delete_group(
            datasource="<value>", group_name="<value>"
        )


def test_permissions_sdk_post_api_index_v1_deletemembership():
    test_http_client = create_test_http_client("post_/api/index/v1/deletemembership")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.delete_membership(
            datasource="<value>",
            membership={
                "group_name": "<value>",
            },
        )


def test_permissions_sdk_post_api_index_v1_betausers():
    test_http_client = create_test_http_client("post_/api/index/v1/betausers")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.indexing.permissions.authorize_beta_users(
            datasource="<value>",
            emails=[
                "Casper50@yahoo.com",
            ],
        )
