"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from glean import Glean, models
import os
import pytest
from tests.test_client import create_test_http_client


def test_client_documents_getdocpermissions():
    test_http_client = create_test_http_client("getdocpermissions")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_token=os.getenv("GLEAN_API_TOKEN", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.documents.retrieve_permissions(request={})
        assert res is not None


def test_client_documents_getdocuments():
    test_http_client = create_test_http_client("getdocuments")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_token=os.getenv("GLEAN_API_TOKEN", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.documents.retrieve()
        assert res is not None


def test_client_documents_getdocumentsbyfacets():
    test_http_client = create_test_http_client("getdocumentsbyfacets")

    with Glean(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_token=os.getenv("GLEAN_API_TOKEN", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.documents.retrieve_by_facets(
            request={
                "filter_sets": [
                    {
                        "filters": [
                            {
                                "field_name": "type",
                                "values": [
                                    {
                                        "value": "Spreadsheet",
                                        "relation_type": models.RelationType.EQUALS,
                                    },
                                    {
                                        "value": "Presentation",
                                        "relation_type": models.RelationType.EQUALS,
                                    },
                                ],
                            },
                        ],
                    },
                    {
                        "filters": [
                            {
                                "field_name": "type",
                                "values": [
                                    {
                                        "value": "Spreadsheet",
                                        "relation_type": models.RelationType.EQUALS,
                                    },
                                    {
                                        "value": "Presentation",
                                        "relation_type": models.RelationType.EQUALS,
                                    },
                                ],
                            },
                        ],
                    },
                ],
            }
        )
        assert res is not None


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step getdocumentanalytics.test referencing operation getdocumentanalytics not found in document`]"
)
def test_client_documents_getdocumentanalytics():
    pass
