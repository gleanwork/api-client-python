"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from glean import Glean, models
from glean.utils import parse_datetime
import os
from tests.test_client import create_test_http_client


def test_activity_sdk_activity():
    test_http_client = create_test_http_client("activity")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.client.activity.report(
            events=[
                {
                    "action": models.ActivityEventAction.HISTORICAL_VIEW,
                    "timestamp": parse_datetime("2000-01-23T04:56:07.000Z"),
                    "url": "https://example.com/",
                },
                {
                    "action": models.ActivityEventAction.SEARCH,
                    "params": {
                        "query": "query",
                    },
                    "timestamp": parse_datetime("2000-01-23T04:56:07.000Z"),
                    "url": "https://example.com/search?q=query",
                },
                {
                    "action": models.ActivityEventAction.VIEW,
                    "params": {
                        "duration": 20,
                        "referrer": "https://example.com/document",
                    },
                    "timestamp": parse_datetime("2000-01-23T04:56:07.000Z"),
                    "url": "https://example.com/",
                },
            ]
        )


def test_activity_sdk_feedback():
    test_http_client = create_test_http_client("feedback")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        g_client.client.activities.report_activity(
            feedback1={
                "tracking_tokens": [
                    "trackingTokens",
                ],
                "event": models.Event.VIEW,
            }
        )
