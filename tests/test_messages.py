"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from datetime import date
from glean import Glean, models
from glean.utils import parse_datetime
import os
from tests.test_client import create_test_http_client


def test_messages_messages():
    test_http_client = create_test_http_client("messages")

    with Glean(
        client=test_http_client,
        bearer_auth=os.getenv("GLEAN_BEARER_AUTH", "value"),
    ) as g_client:
        assert g_client is not None

        res = g_client.client.messages.get(
            id_type=models.IDType.CONVERSATION_ID, id="<id>", timestamp_millis=991417
        )
        assert res is not None
        assert res == models.MessagesResponse(
            has_more=False,
            search_response=models.SearchResponse(
                tracking_token="trackingToken",
                results=[
                    models.SearchResult(
                        title="title",
                        url="https://example.com/foo/bar",
                        native_app_url="slack://foo/bar",
                        snippets=[],
                    ),
                ],
                structured_results=[
                    models.StructuredResult(
                        document=models.Document(
                            metadata=models.DocumentMetadata(
                                datasource="datasource",
                                object_type="Feature Request",
                                container="container",
                                parent_id="JIRA_EN-1337",
                                mime_type="mimeType",
                                document_id="documentId",
                                create_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                                update_time=parse_datetime("2000-01-23T04:56:07.000Z"),
                                author=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                    related_documents=[],
                                    metadata=models.PersonMetadata(
                                        type=models.PersonMetadataType.FULL_TIME,
                                        title="Actor",
                                        department="Movies",
                                        email="george@example.com",
                                        location="Hollywood, CA",
                                        phone="6505551234",
                                        photo_url="https://example.com/george.jpg",
                                        start_date=date.fromisoformat("2000-01-23"),
                                        datasource_profile=[],
                                        query_suggestions=models.QuerySuggestionList(
                                            suggestions=[],
                                        ),
                                        invite_info=models.InviteInfo(
                                            invites=[],
                                        ),
                                        custom_fields=[],
                                        badges=[
                                            models.Badge(
                                                key="deployment_name_new_hire",
                                                display_name="New hire",
                                                icon_config=models.IconConfig(
                                                    color="#343CED",
                                                    key="person_icon",
                                                    icon_type=models.IconType.GLYPH,
                                                    name="user",
                                                ),
                                            ),
                                        ],
                                    ),
                                ),
                                owner=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                mentioned_people=[],
                                components=[
                                    "Backend",
                                    "Networking",
                                ],
                                status='["Done"]',
                                pins=[],
                                assigned_to=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                updated_by=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                collections=[],
                                interactions=models.DocumentInteractions(
                                    reacts=[],
                                    shares=[],
                                ),
                                verification=models.Verification(
                                    state=models.State.VERIFIED,
                                    metadata=models.VerificationMetadata(
                                        last_verifier=models.Person(
                                            name="George Clooney",
                                            obfuscated_id="abc123",
                                        ),
                                        reminders=[],
                                        last_reminder=models.Reminder(
                                            assignee=models.Person(
                                                name="George Clooney",
                                                obfuscated_id="abc123",
                                            ),
                                            requestor=models.Person(
                                                name="George Clooney",
                                                obfuscated_id="abc123",
                                            ),
                                            remind_at=949753,
                                        ),
                                        candidate_verifiers=[],
                                    ),
                                ),
                                shortcuts=[],
                                custom_data={
                                    "someCustomField": models.CustomDataValue(),
                                },
                                contact_person=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                                ancestors=[],
                            ),
                        ),
                        person=models.Person(
                            name="George Clooney",
                            obfuscated_id="abc123",
                        ),
                        customer=models.Customer(
                            id="<id>",
                            company=models.Company(
                                name="<value>",
                                location="New York City",
                                industry="Finances",
                                about="Financial, software, data, and media company headquartered in Midtown Manhattan, New York City",
                            ),
                            poc=[],
                            merged_customers=[],
                            notes="CIO is interested in trying out the product.",
                        ),
                        team=models.Team(
                            id="<id>",
                            name="<value>",
                            members=[],
                            datasource_profiles=[],
                        ),
                        custom_entity=models.CustomEntity(
                            roles=[],
                        ),
                        answer=models.Answer(
                            id=3,
                            doc_id="ANSWERS_answer_3",
                            question="Why is the sky blue?",
                            body_text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                            audience_filters=[
                                models.FacetFilter(
                                    field_name="type",
                                    values=[
                                        models.FacetFilterValue(
                                            value="Spreadsheet",
                                            relation_type=models.RelationType.EQUALS,
                                        ),
                                        models.FacetFilterValue(
                                            value="Presentation",
                                            relation_type=models.RelationType.EQUALS,
                                        ),
                                    ],
                                ),
                            ],
                            added_roles=[],
                            removed_roles=[],
                            combined_answer_text=models.StructuredText(
                                text="From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                                structured_list=[],
                            ),
                            likes=models.AnswerLikes(
                                liked_by=[],
                                liked_by_user=True,
                                num_likes=876250,
                            ),
                            board=models.AnswerBoard(
                                name="<value>",
                                description="aha amid lest contravene how agile in unblinking whereas",
                                audience_filters=[],
                                id=53123,
                                creator=models.Person(
                                    name="George Clooney",
                                    obfuscated_id="abc123",
                                ),
                            ),
                            source_document=models.Document(),
                        ),
                        extracted_qn_a=models.ExtractedQnA(
                            question_result=models.SearchResult(
                                title="title",
                                url="https://example.com/foo/bar",
                                native_app_url="slack://foo/bar",
                                related_results=[],
                                all_clustered_results=[],
                                must_include_suggestions=models.QuerySuggestionList(),
                                query_suggestion=models.QuerySuggestion(
                                    query="app:github type:pull author:mortimer",
                                    search_provider_info=models.SearchProviderInfo(
                                        name="Google",
                                        search_link_url_template="https://www.google.com/search?q={query}&hl=en",
                                    ),
                                    label="Mortimer's PRs",
                                    datasource="github",
                                    request_options=models.SearchRequestOptions(
                                        datasource_filter="JIRA",
                                        datasources_filter=[
                                            "JIRA",
                                        ],
                                        query_overrides_facet_filters=True,
                                        facet_filters=[],
                                        facet_filter_sets=[],
                                        facet_bucket_size=78202,
                                        auth_tokens=[],
                                    ),
                                    ranges=[],
                                    input_details=models.SearchRequestInputDetails(
                                        has_copy_paste=True,
                                    ),
                                ),
                            ),
                        ),
                        meeting=models.Meeting(
                            attendees=models.CalendarAttendees(
                                people=[],
                            ),
                        ),
                        collection=models.Collection(
                            name="<value>",
                            description="indeed jubilantly phew upon angrily really by before spectate",
                            audience_filters=[],
                            id=135487,
                            items=[],
                        ),
                        answer_board=models.AnswerBoard(
                            name="<value>",
                            description="aha amid lest contravene how agile in unblinking whereas",
                            audience_filters=[],
                            id=53123,
                        ),
                        code=models.Code(
                            repo_name="scio",
                            file_name="README.md",
                            lines=[],
                        ),
                        shortcut=models.Shortcut(
                            input_alias="<value>",
                            destination_url="https://acclaimed-molasses.info/",
                            created_by='{"name":"George Clooney","obfuscatedId":"abc123","relatedDocuments":[],"metadata":{"type":"FULL_TIME","title":"Actor","department":"Movies","email":"george@example.com","location":"Hollywood, CA","managementChain":[],"phone":"6505551234","photoUrl":"https://example.com/george.jpg","reports":[],"startDate":"2000-01-23","datasourceProfile":[],"querySuggestions":{"suggestions":[]},"inviteInfo":{"invites":[]},"customFields":[],"badges":[]}}',
                            updated_by='{"name":"George Clooney","obfuscatedId":"abc123","relatedDocuments":[],"metadata":{"type":"FULL_TIME","title":"Actor","department":"Movies","email":"george@example.com","location":"Hollywood, CA","managementChain":[],"phone":"6505551234","photoUrl":"https://example.com/george.jpg","reports":[],"startDate":"2000-01-23","datasourceProfile":[],"querySuggestions":{"suggestions":[]},"inviteInfo":{"invites":[]},"customFields":[],"badges":[]}}',
                        ),
                        related_question=models.RelatedQuestion(),
                    ),
                    models.StructuredResult(
                        shortcut=models.Shortcut(
                            input_alias="<value>",
                            destination_url="https://flashy-excess.com",
                            created_by='{"name":"George Clooney","obfuscatedId":"abc123","relatedDocuments":[],"metadata":{"type":"FULL_TIME","title":"Actor","department":"Movies","email":"george@example.com","location":"Hollywood, CA","managementChain":[],"phone":"6505551234","photoUrl":"https://example.com/george.jpg","reports":[],"startDate":"2000-01-23","datasourceProfile":[],"querySuggestions":{"suggestions":[]},"inviteInfo":{"invites":[]},"customFields":[],"badges":[]}}',
                            updated_by='{"name":"George Clooney","obfuscatedId":"abc123","relatedDocuments":[],"metadata":{"type":"FULL_TIME","title":"Actor","department":"Movies","email":"george@example.com","location":"Hollywood, CA","managementChain":[],"phone":"6505551234","photoUrl":"https://example.com/george.jpg","reports":[],"startDate":"2000-01-23","datasourceProfile":[],"querySuggestions":{"suggestions":[]},"inviteInfo":{"invites":[]},"customFields":[],"badges":[]}}',
                        ),
                    ),
                    models.StructuredResult(
                        shortcut=models.Shortcut(
                            input_alias="<value>",
                            destination_url="https://stale-corporation.com/",
                            created_by='{"name":"George Clooney","obfuscatedId":"abc123","relatedDocuments":[],"metadata":{"type":"FULL_TIME","title":"Actor","department":"Movies","email":"george@example.com","location":"Hollywood, CA","managementChain":[],"phone":"6505551234","photoUrl":"https://example.com/george.jpg","reports":[],"startDate":"2000-01-23","datasourceProfile":[],"querySuggestions":{"suggestions":[]},"inviteInfo":{"invites":[]},"customFields":[],"badges":[]}}',
                            updated_by='{"name":"George Clooney","obfuscatedId":"abc123","relatedDocuments":[],"metadata":{"type":"FULL_TIME","title":"Actor","department":"Movies","email":"george@example.com","location":"Hollywood, CA","managementChain":[],"phone":"6505551234","photoUrl":"https://example.com/george.jpg","reports":[],"startDate":"2000-01-23","datasourceProfile":[],"querySuggestions":{"suggestions":[]},"inviteInfo":{"invites":[]},"customFields":[],"badges":[]}}',
                        ),
                    ),
                ],
                generated_qna_result=models.GeneratedQna(
                    ranges=[],
                ),
                glean_data_error=models.GleanDataError(
                    error_messages=[
                        models.ErrorMessage(
                            source="gmail",
                            error_message="invalid token",
                        ),
                        models.ErrorMessage(
                            source="slack",
                            error_message="expired token",
                        ),
                    ],
                ),
                request_id="5e345ae500ff0befa2b9d1a3ba0001737e7363696f312d323535323137000171756572792d656e64706f696e743a323032303031333074313830343032000100",
                backend_time_millis=1100,
                metadata=models.SearchResponseMetadata(
                    searched_query_ranges=[
                        models.TextRange(
                            start_index=509209,
                        ),
                    ],
                    additional_query_suggestions=models.QuerySuggestionList(),
                ),
                facet_results=[
                    models.FacetResult(
                        source_name="container_name",
                        operator_name="SelectMultiple",
                        buckets=[
                            models.FacetBucket(
                                count=1,
                                datasource="jira",
                                percentage=5,
                                value=models.FacetValue(
                                    string_value="engineering",
                                    integer_value=5,
                                    display_label="engineering",
                                    icon_config=models.IconConfig(
                                        color="#343CED",
                                        key="person_icon",
                                        icon_type=models.IconType.GLYPH,
                                        name="user",
                                    ),
                                ),
                            ),
                            models.FacetBucket(
                                count=1,
                                datasource="jira",
                                percentage=5,
                                value=models.FacetValue(
                                    string_value="engineering",
                                    integer_value=5,
                                    display_label="engineering",
                                    icon_config=models.IconConfig(
                                        color="#343CED",
                                        key="person_icon",
                                        icon_type=models.IconType.GLYPH,
                                        name="user",
                                    ),
                                ),
                            ),
                        ],
                        has_more_buckets=False,
                        group_name="Service Cloud",
                    ),
                    models.FacetResult(
                        source_name="container_name",
                        operator_name="SelectMultiple",
                        buckets=[],
                        has_more_buckets=False,
                        group_name="Service Cloud",
                    ),
                ],
                results_description=models.ResultsDescription(
                    icon_config=models.IconConfig(
                        color="#343CED",
                        key="person_icon",
                        icon_type=models.IconType.GLYPH,
                        name="user",
                    ),
                ),
                rewritten_facet_filters=[
                    models.FacetFilter(
                        field_name="type",
                        values=[],
                    ),
                ],
                has_more_results=True,
            ),
            root_message=models.SearchResult(
                title="title",
                url="https://example.com/foo/bar",
                native_app_url="slack://foo/bar",
                clustered_results=[],
                attachments=[],
                backlink_results=[],
            ),
        )
